// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api/api.proto

It has these top-level messages:
	Account
	AccountCustom
	AccountDevice
	AccountEmail
	AccountFacebook
	AccountGameCenter
	AccountGoogle
	AccountSteam
	AddFriendsRequest
	AddGroupUsersRequest
	AuthenticateCustomRequest
	AuthenticateDeviceRequest
	AuthenticateEmailRequest
	AuthenticateFacebookRequest
	AuthenticateGameCenterRequest
	AuthenticateGoogleRequest
	AuthenticateSteamRequest
	BlockFriendsRequest
	ChannelMessage
	ChannelMessageList
	CreateGroupRequest
	DeleteFriendsRequest
	DeleteGroupRequest
	DeleteLeaderboardRecordRequest
	DeleteNotificationsRequest
	DeleteStorageObjectId
	DeleteStorageObjectsRequest
	Friend
	Friends
	GetUsersRequest
	Group
	GroupUserList
	ImportFacebookFriendsRequest
	JoinGroupRequest
	KickGroupUsersRequest
	LeaderboardRecord
	LeaderboardRecordList
	LeaveGroupRequest
	LinkFacebookRequest
	ListChannelMessagesRequest
	ListGroupUsersRequest
	ListLeaderboardRecordsRequest
	ListMatchesRequest
	ListNotificationsRequest
	ListStorageObjectsRequest
	ListUserGroupsRequest
	Match
	MatchList
	Notification
	NotificationList
	PromoteGroupUsersRequest
	ReadStorageObjectId
	ReadStorageObjectsRequest
	Rpc
	Session
	StorageObject
	StorageObjectAck
	StorageObjectAcks
	StorageObjects
	StorageObjectList
	UpdateAccountRequest
	UpdateGroupRequest
	User
	UserGroupList
	Users
	WriteLeaderboardRecordRequest
	WriteStorageObject
	WriteStorageObjectsRequest
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf3 "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The friendship status.
type Friend_State int32

const (
	// Default case. Assumed as FRIEND state.
	Friend_STATE_UNSPECIFIED Friend_State = 0
	// The user is a friend of the current user.
	Friend_FRIEND Friend_State = 1
	// The user has sent an invite to the current user.
	Friend_INVITE_SENT Friend_State = 2
	// The current user has sent an invite to this user.
	Friend_INVITE_RECEIVED Friend_State = 3
	// The current user has blocked this user.
	Friend_BLOCKED Friend_State = 4
)

var Friend_State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "FRIEND",
	2: "INVITE_SENT",
	3: "INVITE_RECEIVED",
	4: "BLOCKED",
}
var Friend_State_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"FRIEND":            1,
	"INVITE_SENT":       2,
	"INVITE_RECEIVED":   3,
	"BLOCKED":           4,
}

func (x Friend_State) String() string {
	return proto.EnumName(Friend_State_name, int32(x))
}
func (Friend_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{27, 0} }

// The group role status.
type GroupUserList_GroupUser_State int32

const (
	// Default case. Assumed as SUPERADMIN state.
	GroupUserList_GroupUser_STATE_UNSPECIFIED GroupUserList_GroupUser_State = 0
	// The user is a superadmin with full control of the group.
	GroupUserList_GroupUser_SUPERADMIN GroupUserList_GroupUser_State = 1
	// The user is an admin with additional privileges.
	GroupUserList_GroupUser_ADMIN GroupUserList_GroupUser_State = 2
	// The user is a regular member.
	GroupUserList_GroupUser_MEMBER GroupUserList_GroupUser_State = 3
	// The user has requested to join the group
	GroupUserList_GroupUser_JOIN_REQUEST GroupUserList_GroupUser_State = 4
)

var GroupUserList_GroupUser_State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "SUPERADMIN",
	2: "ADMIN",
	3: "MEMBER",
	4: "JOIN_REQUEST",
}
var GroupUserList_GroupUser_State_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"SUPERADMIN":        1,
	"ADMIN":             2,
	"MEMBER":            3,
	"JOIN_REQUEST":      4,
}

func (x GroupUserList_GroupUser_State) String() string {
	return proto.EnumName(GroupUserList_GroupUser_State_name, int32(x))
}
func (GroupUserList_GroupUser_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{31, 0, 0}
}

// The group role status.
type UserGroupList_UserGroup_State int32

const (
	// Default case. Assumed as SUPERADMIN state.
	UserGroupList_UserGroup_STATE_UNSPECIFIED UserGroupList_UserGroup_State = 0
	// The user is a superadmin with full control of the group.
	UserGroupList_UserGroup_SUPERADMIN UserGroupList_UserGroup_State = 1
	// The user is an admin with additional privileges.
	UserGroupList_UserGroup_ADMIN UserGroupList_UserGroup_State = 2
	// The user is a regular member.
	UserGroupList_UserGroup_MEMBER UserGroupList_UserGroup_State = 3
	// The user has requested to join the group
	UserGroupList_UserGroup_JOIN_REQUEST UserGroupList_UserGroup_State = 4
)

var UserGroupList_UserGroup_State_name = map[int32]string{
	0: "STATE_UNSPECIFIED",
	1: "SUPERADMIN",
	2: "ADMIN",
	3: "MEMBER",
	4: "JOIN_REQUEST",
}
var UserGroupList_UserGroup_State_value = map[string]int32{
	"STATE_UNSPECIFIED": 0,
	"SUPERADMIN":        1,
	"ADMIN":             2,
	"MEMBER":            3,
	"JOIN_REQUEST":      4,
}

func (x UserGroupList_UserGroup_State) String() string {
	return proto.EnumName(UserGroupList_UserGroup_State_name, int32(x))
}
func (UserGroupList_UserGroup_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{63, 0, 0}
}

// A user with additional account details. Always the current user.
type Account struct {
	// The user object.
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	// The user's wallet data.
	Wallet string `protobuf:"bytes,2,opt,name=wallet" json:"wallet,omitempty"`
	// The email address of the user.
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	// The devices which belong to the user's account.
	Devices []*AccountDevice `protobuf:"bytes,4,rep,name=devices" json:"devices,omitempty"`
	// The custom id in the user's account.
	CustomId string `protobuf:"bytes,5,opt,name=custom_id,json=customId" json:"custom_id,omitempty"`
	// The UNIX time when the user's email was verified.
	VerifyTime *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=verify_time,json=verifyTime" json:"verify_time,omitempty"`
}

func (m *Account) Reset()                    { *m = Account{} }
func (m *Account) String() string            { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()               {}
func (*Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Account) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Account) GetWallet() string {
	if m != nil {
		return m.Wallet
	}
	return ""
}

func (m *Account) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Account) GetDevices() []*AccountDevice {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *Account) GetCustomId() string {
	if m != nil {
		return m.CustomId
	}
	return ""
}

func (m *Account) GetVerifyTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.VerifyTime
	}
	return nil
}

// Send a custom ID to the server. Used with authenticate/link/unlink.
type AccountCustom struct {
	// A custom identifier.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *AccountCustom) Reset()                    { *m = AccountCustom{} }
func (m *AccountCustom) String() string            { return proto.CompactTextString(m) }
func (*AccountCustom) ProtoMessage()               {}
func (*AccountCustom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountCustom) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Send a device to the server. Used with authenticate/link/unlink and user.
type AccountDevice struct {
	// A device identifier. Should be obtained by a platform-specific device API.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *AccountDevice) Reset()                    { *m = AccountDevice{} }
func (m *AccountDevice) String() string            { return proto.CompactTextString(m) }
func (*AccountDevice) ProtoMessage()               {}
func (*AccountDevice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AccountDevice) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Send an email with password to the server. Used with authenticate/link/unlink.
type AccountEmail struct {
	// A valid RFC-5322 email address.
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	// A password for the user account.
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AccountEmail) Reset()                    { *m = AccountEmail{} }
func (m *AccountEmail) String() string            { return proto.CompactTextString(m) }
func (*AccountEmail) ProtoMessage()               {}
func (*AccountEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AccountEmail) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AccountEmail) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// Send a Facebook token to the server. Used with authenticate/link/unlink.
type AccountFacebook struct {
	// The OAuth token received from Facebook to access their profile API.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AccountFacebook) Reset()                    { *m = AccountFacebook{} }
func (m *AccountFacebook) String() string            { return proto.CompactTextString(m) }
func (*AccountFacebook) ProtoMessage()               {}
func (*AccountFacebook) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AccountFacebook) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Send Apple's Game Center account credentials to the server. Used with authenticate/link/unlink.
type AccountGameCenter struct {
	// Player ID (generated by GameCenter).
	PlayerId string `protobuf:"bytes,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
	// Bundle ID (generated by GameCenter).
	BundleId string `protobuf:"bytes,2,opt,name=bundle_id,json=bundleId" json:"bundle_id,omitempty"`
	// Time since UNIX epoch when the signature was created.
	TimestampSeconds int64 `protobuf:"varint,3,opt,name=timestamp_seconds,json=timestampSeconds" json:"timestamp_seconds,omitempty"`
	// A random "NSString" used to compute the hash and keep it randomized.
	Salt string `protobuf:"bytes,4,opt,name=salt" json:"salt,omitempty"`
	// The verification signature data generated.
	Signature string `protobuf:"bytes,5,opt,name=signature" json:"signature,omitempty"`
	// The URL for the public encryption key.
	PublicKeyUrl string `protobuf:"bytes,6,opt,name=public_key_url,json=publicKeyUrl" json:"public_key_url,omitempty"`
}

func (m *AccountGameCenter) Reset()                    { *m = AccountGameCenter{} }
func (m *AccountGameCenter) String() string            { return proto.CompactTextString(m) }
func (*AccountGameCenter) ProtoMessage()               {}
func (*AccountGameCenter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AccountGameCenter) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (m *AccountGameCenter) GetBundleId() string {
	if m != nil {
		return m.BundleId
	}
	return ""
}

func (m *AccountGameCenter) GetTimestampSeconds() int64 {
	if m != nil {
		return m.TimestampSeconds
	}
	return 0
}

func (m *AccountGameCenter) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *AccountGameCenter) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *AccountGameCenter) GetPublicKeyUrl() string {
	if m != nil {
		return m.PublicKeyUrl
	}
	return ""
}

// Send a Google token to the server. Used with authenticate/link/unlink.
type AccountGoogle struct {
	// The OAuth token received from Google to access their profile API.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AccountGoogle) Reset()                    { *m = AccountGoogle{} }
func (m *AccountGoogle) String() string            { return proto.CompactTextString(m) }
func (*AccountGoogle) ProtoMessage()               {}
func (*AccountGoogle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AccountGoogle) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Send a Steam token to the server. Used with authenticate/link/unlink.
type AccountSteam struct {
	// The account token received from Steam to access their profile API.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *AccountSteam) Reset()                    { *m = AccountSteam{} }
func (m *AccountSteam) String() string            { return proto.CompactTextString(m) }
func (*AccountSteam) ProtoMessage()               {}
func (*AccountSteam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AccountSteam) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Add one or more friends to the current user.
type AddFriendsRequest struct {
	// The account id of a user.
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	// The account username of a user.
	Usernames []string `protobuf:"bytes,2,rep,name=usernames" json:"usernames,omitempty"`
}

func (m *AddFriendsRequest) Reset()                    { *m = AddFriendsRequest{} }
func (m *AddFriendsRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFriendsRequest) ProtoMessage()               {}
func (*AddFriendsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AddFriendsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *AddFriendsRequest) GetUsernames() []string {
	if m != nil {
		return m.Usernames
	}
	return nil
}

// Add users to a group.
type AddGroupUsersRequest struct {
	// The group to add users to.
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	// The users to add.
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (m *AddGroupUsersRequest) Reset()                    { *m = AddGroupUsersRequest{} }
func (m *AddGroupUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*AddGroupUsersRequest) ProtoMessage()               {}
func (*AddGroupUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AddGroupUsersRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *AddGroupUsersRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

// Authenticate against the server with a custom ID.
type AuthenticateCustomRequest struct {
	// The custom account details.
	Account *AccountCustom `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf3.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AuthenticateCustomRequest) Reset()                    { *m = AuthenticateCustomRequest{} }
func (m *AuthenticateCustomRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateCustomRequest) ProtoMessage()               {}
func (*AuthenticateCustomRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AuthenticateCustomRequest) GetAccount() *AccountCustom {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateCustomRequest) GetCreate() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateCustomRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// Authenticate against the server with a device ID.
type AuthenticateDeviceRequest struct {
	// The device account details.
	Account *AccountDevice `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf3.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AuthenticateDeviceRequest) Reset()                    { *m = AuthenticateDeviceRequest{} }
func (m *AuthenticateDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateDeviceRequest) ProtoMessage()               {}
func (*AuthenticateDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AuthenticateDeviceRequest) GetAccount() *AccountDevice {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateDeviceRequest) GetCreate() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateDeviceRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// Authenticate against the server with email+password.
type AuthenticateEmailRequest struct {
	// The email account details.
	Account *AccountEmail `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf3.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AuthenticateEmailRequest) Reset()                    { *m = AuthenticateEmailRequest{} }
func (m *AuthenticateEmailRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateEmailRequest) ProtoMessage()               {}
func (*AuthenticateEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AuthenticateEmailRequest) GetAccount() *AccountEmail {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateEmailRequest) GetCreate() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateEmailRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// Authenticate against the server with Facebook.
type AuthenticateFacebookRequest struct {
	// The Facebook account details.
	Account *AccountFacebook `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf3.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	// Import Facebook friends for the user.
	Import *google_protobuf3.BoolValue `protobuf:"bytes,4,opt,name=import" json:"import,omitempty"`
}

func (m *AuthenticateFacebookRequest) Reset()                    { *m = AuthenticateFacebookRequest{} }
func (m *AuthenticateFacebookRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateFacebookRequest) ProtoMessage()               {}
func (*AuthenticateFacebookRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AuthenticateFacebookRequest) GetAccount() *AccountFacebook {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateFacebookRequest) GetCreate() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateFacebookRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthenticateFacebookRequest) GetImport() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Import
	}
	return nil
}

// Authenticate against the server with Apple's Game Center.
type AuthenticateGameCenterRequest struct {
	// The Game Center account details.
	Account *AccountGameCenter `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf3.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AuthenticateGameCenterRequest) Reset()                    { *m = AuthenticateGameCenterRequest{} }
func (m *AuthenticateGameCenterRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateGameCenterRequest) ProtoMessage()               {}
func (*AuthenticateGameCenterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AuthenticateGameCenterRequest) GetAccount() *AccountGameCenter {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateGameCenterRequest) GetCreate() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateGameCenterRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// Authenticate against the server with Google.
type AuthenticateGoogleRequest struct {
	// The Google account details.
	Account *AccountGoogle `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf3.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AuthenticateGoogleRequest) Reset()                    { *m = AuthenticateGoogleRequest{} }
func (m *AuthenticateGoogleRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateGoogleRequest) ProtoMessage()               {}
func (*AuthenticateGoogleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AuthenticateGoogleRequest) GetAccount() *AccountGoogle {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateGoogleRequest) GetCreate() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateGoogleRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// Authenticate against the server with Steam.
type AuthenticateSteamRequest struct {
	// The Steam account details.
	Account *AccountSteam `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Register the account if the user does not already exist.
	Create *google_protobuf3.BoolValue `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	// Set the username on the account at register. Must be unique.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AuthenticateSteamRequest) Reset()                    { *m = AuthenticateSteamRequest{} }
func (m *AuthenticateSteamRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateSteamRequest) ProtoMessage()               {}
func (*AuthenticateSteamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AuthenticateSteamRequest) GetAccount() *AccountSteam {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AuthenticateSteamRequest) GetCreate() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *AuthenticateSteamRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// Block one or more friends for the current user.
type BlockFriendsRequest struct {
	// The account id of a user.
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	// The account username of a user.
	Usernames []string `protobuf:"bytes,2,rep,name=usernames" json:"usernames,omitempty"`
}

func (m *BlockFriendsRequest) Reset()                    { *m = BlockFriendsRequest{} }
func (m *BlockFriendsRequest) String() string            { return proto.CompactTextString(m) }
func (*BlockFriendsRequest) ProtoMessage()               {}
func (*BlockFriendsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *BlockFriendsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *BlockFriendsRequest) GetUsernames() []string {
	if m != nil {
		return m.Usernames
	}
	return nil
}

// A message sent on a channel.
type ChannelMessage struct {
	// The channel this message belongs to.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	// The unique ID of this message.
	MessageId string `protobuf:"bytes,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	// The code representing a message type or category.
	Code *google_protobuf3.Int32Value `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
	// Message sender, usually a user ID.
	SenderId string `protobuf:"bytes,4,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	// The username of the message sender, if any.
	Username string `protobuf:"bytes,5,opt,name=username" json:"username,omitempty"`
	// The content payload.
	Content string `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	// The UNIX time when the message was created.
	CreateTime *google_protobuf2.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// The UNIX time when the message was last updated.
	UpdateTime *google_protobuf2.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	// True if the message was persisted to the channel's history, false otherwise.
	Persistent *google_protobuf3.BoolValue `protobuf:"bytes,9,opt,name=persistent" json:"persistent,omitempty"`
}

func (m *ChannelMessage) Reset()                    { *m = ChannelMessage{} }
func (m *ChannelMessage) String() string            { return proto.CompactTextString(m) }
func (*ChannelMessage) ProtoMessage()               {}
func (*ChannelMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ChannelMessage) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChannelMessage) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *ChannelMessage) GetCode() *google_protobuf3.Int32Value {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *ChannelMessage) GetSenderId() string {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *ChannelMessage) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ChannelMessage) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ChannelMessage) GetCreateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *ChannelMessage) GetUpdateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *ChannelMessage) GetPersistent() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Persistent
	}
	return nil
}

// A list of channel messages, usually a result of a list operation.
type ChannelMessageList struct {
	// A list of messages.
	Messages []*ChannelMessage `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	// The cursor to send when retireving the next page, if any.
	NextCursor string `protobuf:"bytes,2,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// The cursor to send when retrieving the previous page, if any.
	PrevCursor string `protobuf:"bytes,3,opt,name=prev_cursor,json=prevCursor" json:"prev_cursor,omitempty"`
}

func (m *ChannelMessageList) Reset()                    { *m = ChannelMessageList{} }
func (m *ChannelMessageList) String() string            { return proto.CompactTextString(m) }
func (*ChannelMessageList) ProtoMessage()               {}
func (*ChannelMessageList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ChannelMessageList) GetMessages() []*ChannelMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *ChannelMessageList) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *ChannelMessageList) GetPrevCursor() string {
	if m != nil {
		return m.PrevCursor
	}
	return ""
}

// Create a group with the current user as owner.
type CreateGroupRequest struct {
	// A unique name for the group.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// A description for the group.
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// The language expected to be a tag which follows the BCP-47 spec.
	LangTag string `protobuf:"bytes,3,opt,name=lang_tag,json=langTag" json:"lang_tag,omitempty"`
	// A URL for an avatar image.
	AvatarUrl string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	// Mark a group as open or not where only admins can accept members.
	Open bool `protobuf:"varint,5,opt,name=open" json:"open,omitempty"`
}

func (m *CreateGroupRequest) Reset()                    { *m = CreateGroupRequest{} }
func (m *CreateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupRequest) ProtoMessage()               {}
func (*CreateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CreateGroupRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateGroupRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateGroupRequest) GetLangTag() string {
	if m != nil {
		return m.LangTag
	}
	return ""
}

func (m *CreateGroupRequest) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *CreateGroupRequest) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

// Delete one or more friends for the current user.
type DeleteFriendsRequest struct {
	// The account id of a user.
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	// The account username of a user.
	Usernames []string `protobuf:"bytes,2,rep,name=usernames" json:"usernames,omitempty"`
}

func (m *DeleteFriendsRequest) Reset()                    { *m = DeleteFriendsRequest{} }
func (m *DeleteFriendsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFriendsRequest) ProtoMessage()               {}
func (*DeleteFriendsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DeleteFriendsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *DeleteFriendsRequest) GetUsernames() []string {
	if m != nil {
		return m.Usernames
	}
	return nil
}

// Delete a group the user has access to.
type DeleteGroupRequest struct {
	// The id of a group.
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *DeleteGroupRequest) Reset()                    { *m = DeleteGroupRequest{} }
func (m *DeleteGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGroupRequest) ProtoMessage()               {}
func (*DeleteGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DeleteGroupRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

// Delete a leaderboard record.
type DeleteLeaderboardRecordRequest struct {
	// The leaderboard ID to delete from.
	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId" json:"leaderboard_id,omitempty"`
}

func (m *DeleteLeaderboardRecordRequest) Reset()                    { *m = DeleteLeaderboardRecordRequest{} }
func (m *DeleteLeaderboardRecordRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteLeaderboardRecordRequest) ProtoMessage()               {}
func (*DeleteLeaderboardRecordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DeleteLeaderboardRecordRequest) GetLeaderboardId() string {
	if m != nil {
		return m.LeaderboardId
	}
	return ""
}

// Delete one or more notifications for the current user.
type DeleteNotificationsRequest struct {
	// The id of notifications.
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *DeleteNotificationsRequest) Reset()                    { *m = DeleteNotificationsRequest{} }
func (m *DeleteNotificationsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNotificationsRequest) ProtoMessage()               {}
func (*DeleteNotificationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DeleteNotificationsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

// Storage objects to delete.
type DeleteStorageObjectId struct {
	// The collection which stores the object.
	Collection string `protobuf:"bytes,1,opt,name=collection" json:"collection,omitempty"`
	// The key of the object within the collection.
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// The version hash of the object.
	Version string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteStorageObjectId) Reset()                    { *m = DeleteStorageObjectId{} }
func (m *DeleteStorageObjectId) String() string            { return proto.CompactTextString(m) }
func (*DeleteStorageObjectId) ProtoMessage()               {}
func (*DeleteStorageObjectId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *DeleteStorageObjectId) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *DeleteStorageObjectId) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DeleteStorageObjectId) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Batch delete storage objects.
type DeleteStorageObjectsRequest struct {
	// Batch of storage objects.
	ObjectIds []*DeleteStorageObjectId `protobuf:"bytes,1,rep,name=object_ids,json=objectIds" json:"object_ids,omitempty"`
}

func (m *DeleteStorageObjectsRequest) Reset()                    { *m = DeleteStorageObjectsRequest{} }
func (m *DeleteStorageObjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteStorageObjectsRequest) ProtoMessage()               {}
func (*DeleteStorageObjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *DeleteStorageObjectsRequest) GetObjectIds() []*DeleteStorageObjectId {
	if m != nil {
		return m.ObjectIds
	}
	return nil
}

// A friend of a user.
type Friend struct {
	// The user object.
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	// The friend status.
	State int32 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
}

func (m *Friend) Reset()                    { *m = Friend{} }
func (m *Friend) String() string            { return proto.CompactTextString(m) }
func (*Friend) ProtoMessage()               {}
func (*Friend) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *Friend) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Friend) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

// A collection of zero or more friends of the user.
type Friends struct {
	// The Friend objects.
	Friends []*Friend `protobuf:"bytes,1,rep,name=friends" json:"friends,omitempty"`
}

func (m *Friends) Reset()                    { *m = Friends{} }
func (m *Friends) String() string            { return proto.CompactTextString(m) }
func (*Friends) ProtoMessage()               {}
func (*Friends) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *Friends) GetFriends() []*Friend {
	if m != nil {
		return m.Friends
	}
	return nil
}

// Fetch a batch of zero or more users from the server.
type GetUsersRequest struct {
	// The account id of a user.
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	// The account username of a user.
	Usernames []string `protobuf:"bytes,2,rep,name=usernames" json:"usernames,omitempty"`
	// The Facebook ID of a user.
	FacebookIds []string `protobuf:"bytes,3,rep,name=facebook_ids,json=facebookIds" json:"facebook_ids,omitempty"`
}

func (m *GetUsersRequest) Reset()                    { *m = GetUsersRequest{} }
func (m *GetUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUsersRequest) ProtoMessage()               {}
func (*GetUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetUsersRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *GetUsersRequest) GetUsernames() []string {
	if m != nil {
		return m.Usernames
	}
	return nil
}

func (m *GetUsersRequest) GetFacebookIds() []string {
	if m != nil {
		return m.FacebookIds
	}
	return nil
}

// A group in the server.
type Group struct {
	// The id of a group.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The id of the user who created the group.
	CreatorId string `protobuf:"bytes,2,opt,name=creator_id,json=creatorId" json:"creator_id,omitempty"`
	// The unique name of the group.
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// A description for the group.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The language expected to be a tag which follows the BCP-47 spec.
	LangTag string `protobuf:"bytes,5,opt,name=lang_tag,json=langTag" json:"lang_tag,omitempty"`
	// Additional information stored as a JSON object.
	Metadata string `protobuf:"bytes,6,opt,name=metadata" json:"metadata,omitempty"`
	// A URL for an avatar image.
	AvatarUrl string `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	// Anyone can join open groups, otherwise only admins can accept members.
	Open *google_protobuf3.BoolValue `protobuf:"bytes,8,opt,name=open" json:"open,omitempty"`
	// The current count of all members in the group.
	EdgeCount int32 `protobuf:"varint,9,opt,name=edge_count,json=edgeCount" json:"edge_count,omitempty"`
	// The maximum number of members allowed.
	MaxCount int32 `protobuf:"varint,10,opt,name=max_count,json=maxCount" json:"max_count,omitempty"`
	// The UNIX time when the group was created.
	CreateTime *google_protobuf2.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// The UNIX time when the group was last updated.
	UpdateTime *google_protobuf2.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *Group) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Group) GetCreatorId() string {
	if m != nil {
		return m.CreatorId
	}
	return ""
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Group) GetLangTag() string {
	if m != nil {
		return m.LangTag
	}
	return ""
}

func (m *Group) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *Group) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *Group) GetOpen() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Open
	}
	return nil
}

func (m *Group) GetEdgeCount() int32 {
	if m != nil {
		return m.EdgeCount
	}
	return 0
}

func (m *Group) GetMaxCount() int32 {
	if m != nil {
		return m.MaxCount
	}
	return 0
}

func (m *Group) GetCreateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Group) GetUpdateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// A list of users belonging to a group, along with their role.
type GroupUserList struct {
	// User-role pairs for a group.
	GroupUsers []*GroupUserList_GroupUser `protobuf:"bytes,1,rep,name=group_users,json=groupUsers" json:"group_users,omitempty"`
}

func (m *GroupUserList) Reset()                    { *m = GroupUserList{} }
func (m *GroupUserList) String() string            { return proto.CompactTextString(m) }
func (*GroupUserList) ProtoMessage()               {}
func (*GroupUserList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GroupUserList) GetGroupUsers() []*GroupUserList_GroupUser {
	if m != nil {
		return m.GroupUsers
	}
	return nil
}

// A single user-role pair.
type GroupUserList_GroupUser struct {
	// User.
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	// Their relationship to the group.
	State int32 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
}

func (m *GroupUserList_GroupUser) Reset()                    { *m = GroupUserList_GroupUser{} }
func (m *GroupUserList_GroupUser) String() string            { return proto.CompactTextString(m) }
func (*GroupUserList_GroupUser) ProtoMessage()               {}
func (*GroupUserList_GroupUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31, 0} }

func (m *GroupUserList_GroupUser) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GroupUserList_GroupUser) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

// Import Facebook friends into the current user's account.
type ImportFacebookFriendsRequest struct {
	// The Facebook account details.
	Account *AccountFacebook `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Reset the current user's friends list.
	Reset_ *google_protobuf3.BoolValue `protobuf:"bytes,2,opt,name=reset" json:"reset,omitempty"`
}

func (m *ImportFacebookFriendsRequest) Reset()                    { *m = ImportFacebookFriendsRequest{} }
func (m *ImportFacebookFriendsRequest) String() string            { return proto.CompactTextString(m) }
func (*ImportFacebookFriendsRequest) ProtoMessage()               {}
func (*ImportFacebookFriendsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ImportFacebookFriendsRequest) GetAccount() *AccountFacebook {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *ImportFacebookFriendsRequest) GetReset_() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Reset_
	}
	return nil
}

// Immediately join an open group, or request to join a closed one.
type JoinGroupRequest struct {
	// The group ID to join.
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *JoinGroupRequest) Reset()                    { *m = JoinGroupRequest{} }
func (m *JoinGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*JoinGroupRequest) ProtoMessage()               {}
func (*JoinGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *JoinGroupRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

// Kick a set of users from a group.
type KickGroupUsersRequest struct {
	// The group ID to kick from.
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	// The users to kick.
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (m *KickGroupUsersRequest) Reset()                    { *m = KickGroupUsersRequest{} }
func (m *KickGroupUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*KickGroupUsersRequest) ProtoMessage()               {}
func (*KickGroupUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *KickGroupUsersRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *KickGroupUsersRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

// Represents a complete leaderboard record with all scores and associated metadata.
type LeaderboardRecord struct {
	// The ID of the leaderboard this score belongs to.
	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId" json:"leaderboard_id,omitempty"`
	// The ID of the score owner, usually a user or group.
	OwnerId string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId" json:"owner_id,omitempty"`
	// The username of the score owner, if the owner is a user.
	Username *google_protobuf3.StringValue `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	// The score value.
	Score int64 `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	// An optional subscore value.
	Subscore int64 `protobuf:"varint,5,opt,name=subscore" json:"subscore,omitempty"`
	// The number of submissions to this score record.
	NumScore int32 `protobuf:"varint,6,opt,name=num_score,json=numScore" json:"num_score,omitempty"`
	// Metadata.
	Metadata string `protobuf:"bytes,7,opt,name=metadata" json:"metadata,omitempty"`
	// The UNIX time when the leaderboard record was created.
	CreateTime *google_protobuf2.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// The UNIX time when the leaderboard record was updated.
	UpdateTime *google_protobuf2.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
	// The UNIX time when the leaderboard record expires.
	ExpiryTime *google_protobuf2.Timestamp `protobuf:"bytes,10,opt,name=expiry_time,json=expiryTime" json:"expiry_time,omitempty"`
	// The rank of this record.
	Rank int64 `protobuf:"varint,11,opt,name=rank" json:"rank,omitempty"`
}

func (m *LeaderboardRecord) Reset()                    { *m = LeaderboardRecord{} }
func (m *LeaderboardRecord) String() string            { return proto.CompactTextString(m) }
func (*LeaderboardRecord) ProtoMessage()               {}
func (*LeaderboardRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *LeaderboardRecord) GetLeaderboardId() string {
	if m != nil {
		return m.LeaderboardId
	}
	return ""
}

func (m *LeaderboardRecord) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *LeaderboardRecord) GetUsername() *google_protobuf3.StringValue {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *LeaderboardRecord) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *LeaderboardRecord) GetSubscore() int64 {
	if m != nil {
		return m.Subscore
	}
	return 0
}

func (m *LeaderboardRecord) GetNumScore() int32 {
	if m != nil {
		return m.NumScore
	}
	return 0
}

func (m *LeaderboardRecord) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *LeaderboardRecord) GetCreateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *LeaderboardRecord) GetUpdateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *LeaderboardRecord) GetExpiryTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.ExpiryTime
	}
	return nil
}

func (m *LeaderboardRecord) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

// A set of leaderboard records, may be part of a leaderboard records page or a batch of individual records.
type LeaderboardRecordList struct {
	// A list of leaderboard records.
	Records []*LeaderboardRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
	// A batched set of leaderobard records belonging to specified owners.
	OwnerRecords []*LeaderboardRecord `protobuf:"bytes,2,rep,name=owner_records,json=ownerRecords" json:"owner_records,omitempty"`
	// The cursor to send when retireving the next page, if any.
	NextCursor string `protobuf:"bytes,3,opt,name=next_cursor,json=nextCursor" json:"next_cursor,omitempty"`
	// The cursor to send when retrieving the previous page, if any.
	PrevCursor string `protobuf:"bytes,4,opt,name=prev_cursor,json=prevCursor" json:"prev_cursor,omitempty"`
}

func (m *LeaderboardRecordList) Reset()                    { *m = LeaderboardRecordList{} }
func (m *LeaderboardRecordList) String() string            { return proto.CompactTextString(m) }
func (*LeaderboardRecordList) ProtoMessage()               {}
func (*LeaderboardRecordList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *LeaderboardRecordList) GetRecords() []*LeaderboardRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *LeaderboardRecordList) GetOwnerRecords() []*LeaderboardRecord {
	if m != nil {
		return m.OwnerRecords
	}
	return nil
}

func (m *LeaderboardRecordList) GetNextCursor() string {
	if m != nil {
		return m.NextCursor
	}
	return ""
}

func (m *LeaderboardRecordList) GetPrevCursor() string {
	if m != nil {
		return m.PrevCursor
	}
	return ""
}

// Leave a group.
type LeaveGroupRequest struct {
	// The group ID to leave.
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *LeaveGroupRequest) Reset()                    { *m = LeaveGroupRequest{} }
func (m *LeaveGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*LeaveGroupRequest) ProtoMessage()               {}
func (*LeaveGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *LeaveGroupRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

// Link Facebook to the current user's account.
type LinkFacebookRequest struct {
	// The Facebook account details.
	Account *AccountFacebook `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// Import Facebook friends for the user.
	Import *google_protobuf3.BoolValue `protobuf:"bytes,4,opt,name=import" json:"import,omitempty"`
}

func (m *LinkFacebookRequest) Reset()                    { *m = LinkFacebookRequest{} }
func (m *LinkFacebookRequest) String() string            { return proto.CompactTextString(m) }
func (*LinkFacebookRequest) ProtoMessage()               {}
func (*LinkFacebookRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *LinkFacebookRequest) GetAccount() *AccountFacebook {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *LinkFacebookRequest) GetImport() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Import
	}
	return nil
}

// List a channel's message history.
type ListChannelMessagesRequest struct {
	// The channel ID to list from.
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	// Max number of records to return. Between 1 and 100.
	Limit *google_protobuf3.Int32Value `protobuf:"bytes,2,opt,name=limit" json:"limit,omitempty"`
	// True if listing should be older messages to newer, false if reverse.
	Forward *google_protobuf3.BoolValue `protobuf:"bytes,3,opt,name=forward" json:"forward,omitempty"`
	// A pagination cursor, if any.
	Cursor string `protobuf:"bytes,4,opt,name=cursor" json:"cursor,omitempty"`
}

func (m *ListChannelMessagesRequest) Reset()                    { *m = ListChannelMessagesRequest{} }
func (m *ListChannelMessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListChannelMessagesRequest) ProtoMessage()               {}
func (*ListChannelMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ListChannelMessagesRequest) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ListChannelMessagesRequest) GetLimit() *google_protobuf3.Int32Value {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *ListChannelMessagesRequest) GetForward() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Forward
	}
	return nil
}

func (m *ListChannelMessagesRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

// List all users that are part of a group.
type ListGroupUsersRequest struct {
	// The group ID to list from.
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *ListGroupUsersRequest) Reset()                    { *m = ListGroupUsersRequest{} }
func (m *ListGroupUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGroupUsersRequest) ProtoMessage()               {}
func (*ListGroupUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *ListGroupUsersRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

// List leaderboard records from a given leaderboard.
type ListLeaderboardRecordsRequest struct {
	// The ID of the leaderboard to list for.
	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId" json:"leaderboard_id,omitempty"`
	// One or more owners to retrieve records for.
	OwnerIds []string `protobuf:"bytes,2,rep,name=owner_ids,json=ownerIds" json:"owner_ids,omitempty"`
	// Max number of records to return. Between 1 and 100.
	Limit *google_protobuf3.Int32Value `protobuf:"bytes,3,opt,name=limit" json:"limit,omitempty"`
	// A next or previous page cursor.
	Cursor string `protobuf:"bytes,4,opt,name=cursor" json:"cursor,omitempty"`
}

func (m *ListLeaderboardRecordsRequest) Reset()                    { *m = ListLeaderboardRecordsRequest{} }
func (m *ListLeaderboardRecordsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListLeaderboardRecordsRequest) ProtoMessage()               {}
func (*ListLeaderboardRecordsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *ListLeaderboardRecordsRequest) GetLeaderboardId() string {
	if m != nil {
		return m.LeaderboardId
	}
	return ""
}

func (m *ListLeaderboardRecordsRequest) GetOwnerIds() []string {
	if m != nil {
		return m.OwnerIds
	}
	return nil
}

func (m *ListLeaderboardRecordsRequest) GetLimit() *google_protobuf3.Int32Value {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *ListLeaderboardRecordsRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

// List realtime matches.
type ListMatchesRequest struct {
	// Limit the number of returned matches.
	Limit *google_protobuf3.Int32Value `protobuf:"bytes,1,opt,name=limit" json:"limit,omitempty"`
	// Authoritative or relayed matches.
	Authoritative *google_protobuf3.BoolValue `protobuf:"bytes,2,opt,name=authoritative" json:"authoritative,omitempty"`
	// Label filter.
	Label *google_protobuf3.StringValue `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
	// Minimum user count.
	MinSize *google_protobuf3.Int32Value `protobuf:"bytes,4,opt,name=min_size,json=minSize" json:"min_size,omitempty"`
	// Maximum user count.
	MaxSize *google_protobuf3.Int32Value `protobuf:"bytes,5,opt,name=max_size,json=maxSize" json:"max_size,omitempty"`
}

func (m *ListMatchesRequest) Reset()                    { *m = ListMatchesRequest{} }
func (m *ListMatchesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListMatchesRequest) ProtoMessage()               {}
func (*ListMatchesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *ListMatchesRequest) GetLimit() *google_protobuf3.Int32Value {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *ListMatchesRequest) GetAuthoritative() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Authoritative
	}
	return nil
}

func (m *ListMatchesRequest) GetLabel() *google_protobuf3.StringValue {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *ListMatchesRequest) GetMinSize() *google_protobuf3.Int32Value {
	if m != nil {
		return m.MinSize
	}
	return nil
}

func (m *ListMatchesRequest) GetMaxSize() *google_protobuf3.Int32Value {
	if m != nil {
		return m.MaxSize
	}
	return nil
}

// Get a list of unexpired notifications.
type ListNotificationsRequest struct {
	// The number of notifications to get. Between 1 and 100.
	Limit *google_protobuf3.Int32Value `protobuf:"bytes,1,opt,name=limit" json:"limit,omitempty"`
	// A cursor to page through notifications. May be cached by clients to get from point in time forwards.
	CacheableCursor string `protobuf:"bytes,2,opt,name=cacheable_cursor,json=cacheableCursor" json:"cacheable_cursor,omitempty"`
}

func (m *ListNotificationsRequest) Reset()                    { *m = ListNotificationsRequest{} }
func (m *ListNotificationsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNotificationsRequest) ProtoMessage()               {}
func (*ListNotificationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ListNotificationsRequest) GetLimit() *google_protobuf3.Int32Value {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *ListNotificationsRequest) GetCacheableCursor() string {
	if m != nil {
		return m.CacheableCursor
	}
	return ""
}

// List publicly readable storage objects in a given collection.
type ListStorageObjectsRequest struct {
	// ID of the user.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// The collection which stores the object.
	Collection string `protobuf:"bytes,2,opt,name=collection" json:"collection,omitempty"`
	// The number of storage objects to list. Between 1 and 100.
	Limit *google_protobuf3.Int32Value `protobuf:"bytes,3,opt,name=limit" json:"limit,omitempty"`
	// The cursor to page through results from.
	Cursor string `protobuf:"bytes,4,opt,name=cursor" json:"cursor,omitempty"`
}

func (m *ListStorageObjectsRequest) Reset()                    { *m = ListStorageObjectsRequest{} }
func (m *ListStorageObjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListStorageObjectsRequest) ProtoMessage()               {}
func (*ListStorageObjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ListStorageObjectsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ListStorageObjectsRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *ListStorageObjectsRequest) GetLimit() *google_protobuf3.Int32Value {
	if m != nil {
		return m.Limit
	}
	return nil
}

func (m *ListStorageObjectsRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

// List the groups a user is part of, and their relationship to each.
type ListUserGroupsRequest struct {
	// ID of the user.
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ListUserGroupsRequest) Reset()                    { *m = ListUserGroupsRequest{} }
func (m *ListUserGroupsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUserGroupsRequest) ProtoMessage()               {}
func (*ListUserGroupsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ListUserGroupsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// Represents a realtime match.
type Match struct {
	// The ID of the match, can be used to join.
	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	// True if it's an server-managed authoritative match, false otherwise.
	Authoritative bool `protobuf:"varint,2,opt,name=authoritative" json:"authoritative,omitempty"`
	// Match label, if any.
	Label *google_protobuf3.StringValue `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
	// Current number of users in the match.
	Size int32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *Match) Reset()                    { *m = Match{} }
func (m *Match) String() string            { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()               {}
func (*Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *Match) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *Match) GetAuthoritative() bool {
	if m != nil {
		return m.Authoritative
	}
	return false
}

func (m *Match) GetLabel() *google_protobuf3.StringValue {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *Match) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

// A list of realtime matches.
type MatchList struct {
	// A number of matches corresponding to a list operation.
	Matches []*Match `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (m *MatchList) Reset()                    { *m = MatchList{} }
func (m *MatchList) String() string            { return proto.CompactTextString(m) }
func (*MatchList) ProtoMessage()               {}
func (*MatchList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *MatchList) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

// A notification in the server.
type Notification struct {
	// ID of the Notification.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Subject of the notification.
	Subject string `protobuf:"bytes,2,opt,name=subject" json:"subject,omitempty"`
	// Content of the notification in JSON.
	Content string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	// Category code for this notification.
	Code int32 `protobuf:"varint,4,opt,name=code" json:"code,omitempty"`
	// ID of the sender, if a user. Otherwise 'null'.
	SenderId string `protobuf:"bytes,5,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	// The UNIX time when the notification was created.
	CreateTime *google_protobuf2.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// True if this notification was persisted to the database.
	Persistent bool `protobuf:"varint,7,opt,name=persistent" json:"persistent,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *Notification) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Notification) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Notification) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Notification) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Notification) GetSenderId() string {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *Notification) GetCreateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Notification) GetPersistent() bool {
	if m != nil {
		return m.Persistent
	}
	return false
}

// A collection of zero or more notifications.
type NotificationList struct {
	// Collection of notifications.
	Notifications []*Notification `protobuf:"bytes,1,rep,name=notifications" json:"notifications,omitempty"`
	// Use this cursor to paginate notifications. Cache this to catch up to new notifications.
	CacheableCursor string `protobuf:"bytes,2,opt,name=cacheable_cursor,json=cacheableCursor" json:"cacheable_cursor,omitempty"`
}

func (m *NotificationList) Reset()                    { *m = NotificationList{} }
func (m *NotificationList) String() string            { return proto.CompactTextString(m) }
func (*NotificationList) ProtoMessage()               {}
func (*NotificationList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *NotificationList) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *NotificationList) GetCacheableCursor() string {
	if m != nil {
		return m.CacheableCursor
	}
	return ""
}

// Promote a set of users in a group to the next role up.
type PromoteGroupUsersRequest struct {
	// The group ID to promote in.
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	// The users to promote.
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (m *PromoteGroupUsersRequest) Reset()                    { *m = PromoteGroupUsersRequest{} }
func (m *PromoteGroupUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*PromoteGroupUsersRequest) ProtoMessage()               {}
func (*PromoteGroupUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *PromoteGroupUsersRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *PromoteGroupUsersRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

// Storage objects to get.
type ReadStorageObjectId struct {
	// The collection which stores the object.
	Collection string `protobuf:"bytes,1,opt,name=collection" json:"collection,omitempty"`
	// The key of the object within the collection.
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// The user owner of the object.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *ReadStorageObjectId) Reset()                    { *m = ReadStorageObjectId{} }
func (m *ReadStorageObjectId) String() string            { return proto.CompactTextString(m) }
func (*ReadStorageObjectId) ProtoMessage()               {}
func (*ReadStorageObjectId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *ReadStorageObjectId) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *ReadStorageObjectId) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReadStorageObjectId) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// Batch get storage objects.
type ReadStorageObjectsRequest struct {
	// Batch of storage objects.
	ObjectIds []*ReadStorageObjectId `protobuf:"bytes,1,rep,name=object_ids,json=objectIds" json:"object_ids,omitempty"`
}

func (m *ReadStorageObjectsRequest) Reset()                    { *m = ReadStorageObjectsRequest{} }
func (m *ReadStorageObjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadStorageObjectsRequest) ProtoMessage()               {}
func (*ReadStorageObjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *ReadStorageObjectsRequest) GetObjectIds() []*ReadStorageObjectId {
	if m != nil {
		return m.ObjectIds
	}
	return nil
}

// Execute an Lua function on the server.
type Rpc struct {
	// The identifier of the function.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The payload of the function which must be a JSON object.
	Payload string `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	// The authentication key used when executed as a non-client HTTP request.
	HttpKey string `protobuf:"bytes,3,opt,name=http_key,json=httpKey" json:"http_key,omitempty"`
}

func (m *Rpc) Reset()                    { *m = Rpc{} }
func (m *Rpc) String() string            { return proto.CompactTextString(m) }
func (*Rpc) ProtoMessage()               {}
func (*Rpc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *Rpc) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Rpc) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *Rpc) GetHttpKey() string {
	if m != nil {
		return m.HttpKey
	}
	return ""
}

// A user's session used to authenticate messages.
type Session struct {
	// True if the corresponding account was just created, false otherwise.
	Created bool `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
	// Authentication credentials.
	Token string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	// rUDP specific authentication credentials.
	UdpToken string `protobuf:"bytes,3,opt,name=udp_token,json=udpToken" json:"udp_token,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *Session) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

func (m *Session) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Session) GetUdpToken() string {
	if m != nil {
		return m.UdpToken
	}
	return ""
}

// An object within the storage engine.
type StorageObject struct {
	// The collection which stores the object.
	Collection string `protobuf:"bytes,1,opt,name=collection" json:"collection,omitempty"`
	// The key of the object within the collection.
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// The user owner of the object.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// The value of the object.
	Value string `protobuf:"bytes,4,opt,name=value" json:"value,omitempty"`
	// The version hash of the object.
	Version string `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
	// The read access permissions for the object.
	PermissionRead int32 `protobuf:"varint,6,opt,name=permission_read,json=permissionRead" json:"permission_read,omitempty"`
	// The write access permissions for the object.
	PermissionWrite int32 `protobuf:"varint,7,opt,name=permission_write,json=permissionWrite" json:"permission_write,omitempty"`
	// The UNIX time when the object was created.
	CreateTime *google_protobuf2.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// The UNIX time when the object was last updated.
	UpdateTime *google_protobuf2.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *StorageObject) Reset()                    { *m = StorageObject{} }
func (m *StorageObject) String() string            { return proto.CompactTextString(m) }
func (*StorageObject) ProtoMessage()               {}
func (*StorageObject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *StorageObject) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *StorageObject) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StorageObject) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *StorageObject) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *StorageObject) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *StorageObject) GetPermissionRead() int32 {
	if m != nil {
		return m.PermissionRead
	}
	return 0
}

func (m *StorageObject) GetPermissionWrite() int32 {
	if m != nil {
		return m.PermissionWrite
	}
	return 0
}

func (m *StorageObject) GetCreateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *StorageObject) GetUpdateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// A storage acknowledgement.
type StorageObjectAck struct {
	// The collection which stores the object.
	Collection string `protobuf:"bytes,1,opt,name=collection" json:"collection,omitempty"`
	// The key of the object within the collection.
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// The version hash of the object.
	Version string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	// The owner of the object.
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *StorageObjectAck) Reset()                    { *m = StorageObjectAck{} }
func (m *StorageObjectAck) String() string            { return proto.CompactTextString(m) }
func (*StorageObjectAck) ProtoMessage()               {}
func (*StorageObjectAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *StorageObjectAck) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *StorageObjectAck) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StorageObjectAck) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *StorageObjectAck) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// Batch of acknowledgements for the storage object write.
type StorageObjectAcks struct {
	// Batch of storage write acknowledgements.
	Acks []*StorageObjectAck `protobuf:"bytes,1,rep,name=acks" json:"acks,omitempty"`
}

func (m *StorageObjectAcks) Reset()                    { *m = StorageObjectAcks{} }
func (m *StorageObjectAcks) String() string            { return proto.CompactTextString(m) }
func (*StorageObjectAcks) ProtoMessage()               {}
func (*StorageObjectAcks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *StorageObjectAcks) GetAcks() []*StorageObjectAck {
	if m != nil {
		return m.Acks
	}
	return nil
}

// Batch of storage objects.
type StorageObjects struct {
	// The batch of storage objects.
	Objects []*StorageObject `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty"`
}

func (m *StorageObjects) Reset()                    { *m = StorageObjects{} }
func (m *StorageObjects) String() string            { return proto.CompactTextString(m) }
func (*StorageObjects) ProtoMessage()               {}
func (*StorageObjects) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *StorageObjects) GetObjects() []*StorageObject {
	if m != nil {
		return m.Objects
	}
	return nil
}

// List of storage objects.
type StorageObjectList struct {
	// The list of storage objects.
	Objects []*StorageObject `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty"`
	// The cursor associated with the query a page of results.
	Cursor string `protobuf:"bytes,2,opt,name=cursor" json:"cursor,omitempty"`
}

func (m *StorageObjectList) Reset()                    { *m = StorageObjectList{} }
func (m *StorageObjectList) String() string            { return proto.CompactTextString(m) }
func (*StorageObjectList) ProtoMessage()               {}
func (*StorageObjectList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *StorageObjectList) GetObjects() []*StorageObject {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *StorageObjectList) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

// Update a user's account details.
type UpdateAccountRequest struct {
	// The username of the user's account.
	Username *google_protobuf3.StringValue `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// The display name of the user.
	DisplayName *google_protobuf3.StringValue `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// A URL for an avatar image.
	AvatarUrl *google_protobuf3.StringValue `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	// The language expected to be a tag which follows the BCP-47 spec.
	LangTag *google_protobuf3.StringValue `protobuf:"bytes,4,opt,name=lang_tag,json=langTag" json:"lang_tag,omitempty"`
	// The location set by the user.
	Location *google_protobuf3.StringValue `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	// The timezone set by the user.
	Timezone *google_protobuf3.StringValue `protobuf:"bytes,6,opt,name=timezone" json:"timezone,omitempty"`
}

func (m *UpdateAccountRequest) Reset()                    { *m = UpdateAccountRequest{} }
func (m *UpdateAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAccountRequest) ProtoMessage()               {}
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *UpdateAccountRequest) GetUsername() *google_protobuf3.StringValue {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *UpdateAccountRequest) GetDisplayName() *google_protobuf3.StringValue {
	if m != nil {
		return m.DisplayName
	}
	return nil
}

func (m *UpdateAccountRequest) GetAvatarUrl() *google_protobuf3.StringValue {
	if m != nil {
		return m.AvatarUrl
	}
	return nil
}

func (m *UpdateAccountRequest) GetLangTag() *google_protobuf3.StringValue {
	if m != nil {
		return m.LangTag
	}
	return nil
}

func (m *UpdateAccountRequest) GetLocation() *google_protobuf3.StringValue {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *UpdateAccountRequest) GetTimezone() *google_protobuf3.StringValue {
	if m != nil {
		return m.Timezone
	}
	return nil
}

// Update fields in a given group.
type UpdateGroupRequest struct {
	// The ID of the group to update.
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	// Name.
	Name *google_protobuf3.StringValue `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Description string.
	Description *google_protobuf3.StringValue `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Lang tag.
	LangTag *google_protobuf3.StringValue `protobuf:"bytes,4,opt,name=lang_tag,json=langTag" json:"lang_tag,omitempty"`
	// Avatar URL.
	AvatarUrl *google_protobuf3.StringValue `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	// Open is true if anyone should be allowed to join, or false if joins must be approved by a group admin.
	Open *google_protobuf3.BoolValue `protobuf:"bytes,6,opt,name=open" json:"open,omitempty"`
}

func (m *UpdateGroupRequest) Reset()                    { *m = UpdateGroupRequest{} }
func (m *UpdateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupRequest) ProtoMessage()               {}
func (*UpdateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *UpdateGroupRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *UpdateGroupRequest) GetName() *google_protobuf3.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *UpdateGroupRequest) GetDescription() *google_protobuf3.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *UpdateGroupRequest) GetLangTag() *google_protobuf3.StringValue {
	if m != nil {
		return m.LangTag
	}
	return nil
}

func (m *UpdateGroupRequest) GetAvatarUrl() *google_protobuf3.StringValue {
	if m != nil {
		return m.AvatarUrl
	}
	return nil
}

func (m *UpdateGroupRequest) GetOpen() *google_protobuf3.BoolValue {
	if m != nil {
		return m.Open
	}
	return nil
}

// A user in the server.
type User struct {
	// The id of the user's account.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The username of the user's account.
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	// The display name of the user.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// A URL for an avatar image.
	AvatarUrl string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl" json:"avatar_url,omitempty"`
	// The language expected to be a tag which follows the BCP-47 spec.
	LangTag string `protobuf:"bytes,5,opt,name=lang_tag,json=langTag" json:"lang_tag,omitempty"`
	// The location set by the user.
	Location string `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	// The timezone set by the user.
	Timezone string `protobuf:"bytes,7,opt,name=timezone" json:"timezone,omitempty"`
	// Additional information stored as a JSON object.
	Metadata string `protobuf:"bytes,8,opt,name=metadata" json:"metadata,omitempty"`
	// The Facebook id in the user's account.
	FacebookId string `protobuf:"bytes,9,opt,name=facebook_id,json=facebookId" json:"facebook_id,omitempty"`
	// The Google id in the user's account.
	GoogleId string `protobuf:"bytes,10,opt,name=google_id,json=googleId" json:"google_id,omitempty"`
	// The Apple Game Center in of the user's account.
	GamecenterId string `protobuf:"bytes,11,opt,name=gamecenter_id,json=gamecenterId" json:"gamecenter_id,omitempty"`
	// The Steam id in the user's account.
	SteamId string `protobuf:"bytes,12,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	// Indicates whether the user is currently online.
	Online bool `protobuf:"varint,13,opt,name=online" json:"online,omitempty"`
	// Number of related edges to this user.
	EdgeCount int32 `protobuf:"varint,14,opt,name=edge_count,json=edgeCount" json:"edge_count,omitempty"`
	// The UNIX time when the user was created.
	CreateTime *google_protobuf2.Timestamp `protobuf:"bytes,15,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// The UNIX time when the user was last updated.
	UpdateTime *google_protobuf2.Timestamp `protobuf:"bytes,16,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *User) GetAvatarUrl() string {
	if m != nil {
		return m.AvatarUrl
	}
	return ""
}

func (m *User) GetLangTag() string {
	if m != nil {
		return m.LangTag
	}
	return ""
}

func (m *User) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *User) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *User) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *User) GetFacebookId() string {
	if m != nil {
		return m.FacebookId
	}
	return ""
}

func (m *User) GetGoogleId() string {
	if m != nil {
		return m.GoogleId
	}
	return ""
}

func (m *User) GetGamecenterId() string {
	if m != nil {
		return m.GamecenterId
	}
	return ""
}

func (m *User) GetSteamId() string {
	if m != nil {
		return m.SteamId
	}
	return ""
}

func (m *User) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func (m *User) GetEdgeCount() int32 {
	if m != nil {
		return m.EdgeCount
	}
	return 0
}

func (m *User) GetCreateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *User) GetUpdateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// A list of groups belonging to a user, along with the user's role in each group.
type UserGroupList struct {
	// Group-role pairs for a user.
	UserGroups []*UserGroupList_UserGroup `protobuf:"bytes,1,rep,name=user_groups,json=userGroups" json:"user_groups,omitempty"`
}

func (m *UserGroupList) Reset()                    { *m = UserGroupList{} }
func (m *UserGroupList) String() string            { return proto.CompactTextString(m) }
func (*UserGroupList) ProtoMessage()               {}
func (*UserGroupList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *UserGroupList) GetUserGroups() []*UserGroupList_UserGroup {
	if m != nil {
		return m.UserGroups
	}
	return nil
}

// A single group-role pair.
type UserGroupList_UserGroup struct {
	// Group.
	Group *Group `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	// The user's relationship to the group.
	State int32 `protobuf:"varint,2,opt,name=state" json:"state,omitempty"`
}

func (m *UserGroupList_UserGroup) Reset()                    { *m = UserGroupList_UserGroup{} }
func (m *UserGroupList_UserGroup) String() string            { return proto.CompactTextString(m) }
func (*UserGroupList_UserGroup) ProtoMessage()               {}
func (*UserGroupList_UserGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63, 0} }

func (m *UserGroupList_UserGroup) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *UserGroupList_UserGroup) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

// A collection of zero or more users.
type Users struct {
	// The User objects.
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *Users) Reset()                    { *m = Users{} }
func (m *Users) String() string            { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()               {}
func (*Users) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *Users) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

// A request to submit a score to a leaderboard.
type WriteLeaderboardRecordRequest struct {
	// The ID of the leaderboard to write to.
	LeaderboardId string `protobuf:"bytes,1,opt,name=leaderboard_id,json=leaderboardId" json:"leaderboard_id,omitempty"`
	// Record data.
	Record *WriteLeaderboardRecordRequest_LeaderboardRecordWrite `protobuf:"bytes,2,opt,name=record" json:"record,omitempty"`
}

func (m *WriteLeaderboardRecordRequest) Reset()                    { *m = WriteLeaderboardRecordRequest{} }
func (m *WriteLeaderboardRecordRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteLeaderboardRecordRequest) ProtoMessage()               {}
func (*WriteLeaderboardRecordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *WriteLeaderboardRecordRequest) GetLeaderboardId() string {
	if m != nil {
		return m.LeaderboardId
	}
	return ""
}

func (m *WriteLeaderboardRecordRequest) GetRecord() *WriteLeaderboardRecordRequest_LeaderboardRecordWrite {
	if m != nil {
		return m.Record
	}
	return nil
}

// Record values to write.
type WriteLeaderboardRecordRequest_LeaderboardRecordWrite struct {
	// The score value to submit.
	Score int64 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	// An optional secondary value.
	Subscore int64 `protobuf:"varint,2,opt,name=subscore" json:"subscore,omitempty"`
	// Optional record metadata.
	Metadata string `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *WriteLeaderboardRecordRequest_LeaderboardRecordWrite) Reset() {
	*m = WriteLeaderboardRecordRequest_LeaderboardRecordWrite{}
}
func (m *WriteLeaderboardRecordRequest_LeaderboardRecordWrite) String() string {
	return proto.CompactTextString(m)
}
func (*WriteLeaderboardRecordRequest_LeaderboardRecordWrite) ProtoMessage() {}
func (*WriteLeaderboardRecordRequest_LeaderboardRecordWrite) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{65, 0}
}

func (m *WriteLeaderboardRecordRequest_LeaderboardRecordWrite) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *WriteLeaderboardRecordRequest_LeaderboardRecordWrite) GetSubscore() int64 {
	if m != nil {
		return m.Subscore
	}
	return 0
}

func (m *WriteLeaderboardRecordRequest_LeaderboardRecordWrite) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

// The object to store.
type WriteStorageObject struct {
	// The collection to store the object.
	Collection string `protobuf:"bytes,1,opt,name=collection" json:"collection,omitempty"`
	// The key for the object within the collection.
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// The value of the object.
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	// The version hash of the object to check. Possible values are: ["", "*", "#hash#"].
	Version string `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
	// The read access permissions for the object.
	PermissionRead *google_protobuf3.Int32Value `protobuf:"bytes,5,opt,name=permission_read,json=permissionRead" json:"permission_read,omitempty"`
	// The write access permissions for the object.
	PermissionWrite *google_protobuf3.Int32Value `protobuf:"bytes,6,opt,name=permission_write,json=permissionWrite" json:"permission_write,omitempty"`
}

func (m *WriteStorageObject) Reset()                    { *m = WriteStorageObject{} }
func (m *WriteStorageObject) String() string            { return proto.CompactTextString(m) }
func (*WriteStorageObject) ProtoMessage()               {}
func (*WriteStorageObject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *WriteStorageObject) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *WriteStorageObject) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *WriteStorageObject) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *WriteStorageObject) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *WriteStorageObject) GetPermissionRead() *google_protobuf3.Int32Value {
	if m != nil {
		return m.PermissionRead
	}
	return nil
}

func (m *WriteStorageObject) GetPermissionWrite() *google_protobuf3.Int32Value {
	if m != nil {
		return m.PermissionWrite
	}
	return nil
}

// Write objects to the storage engine.
type WriteStorageObjectsRequest struct {
	// The objects to store on the server.
	Objects []*WriteStorageObject `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty"`
}

func (m *WriteStorageObjectsRequest) Reset()                    { *m = WriteStorageObjectsRequest{} }
func (m *WriteStorageObjectsRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteStorageObjectsRequest) ProtoMessage()               {}
func (*WriteStorageObjectsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *WriteStorageObjectsRequest) GetObjects() []*WriteStorageObject {
	if m != nil {
		return m.Objects
	}
	return nil
}

func init() {
	proto.RegisterType((*Account)(nil), "nakama.api.Account")
	proto.RegisterType((*AccountCustom)(nil), "nakama.api.AccountCustom")
	proto.RegisterType((*AccountDevice)(nil), "nakama.api.AccountDevice")
	proto.RegisterType((*AccountEmail)(nil), "nakama.api.AccountEmail")
	proto.RegisterType((*AccountFacebook)(nil), "nakama.api.AccountFacebook")
	proto.RegisterType((*AccountGameCenter)(nil), "nakama.api.AccountGameCenter")
	proto.RegisterType((*AccountGoogle)(nil), "nakama.api.AccountGoogle")
	proto.RegisterType((*AccountSteam)(nil), "nakama.api.AccountSteam")
	proto.RegisterType((*AddFriendsRequest)(nil), "nakama.api.AddFriendsRequest")
	proto.RegisterType((*AddGroupUsersRequest)(nil), "nakama.api.AddGroupUsersRequest")
	proto.RegisterType((*AuthenticateCustomRequest)(nil), "nakama.api.AuthenticateCustomRequest")
	proto.RegisterType((*AuthenticateDeviceRequest)(nil), "nakama.api.AuthenticateDeviceRequest")
	proto.RegisterType((*AuthenticateEmailRequest)(nil), "nakama.api.AuthenticateEmailRequest")
	proto.RegisterType((*AuthenticateFacebookRequest)(nil), "nakama.api.AuthenticateFacebookRequest")
	proto.RegisterType((*AuthenticateGameCenterRequest)(nil), "nakama.api.AuthenticateGameCenterRequest")
	proto.RegisterType((*AuthenticateGoogleRequest)(nil), "nakama.api.AuthenticateGoogleRequest")
	proto.RegisterType((*AuthenticateSteamRequest)(nil), "nakama.api.AuthenticateSteamRequest")
	proto.RegisterType((*BlockFriendsRequest)(nil), "nakama.api.BlockFriendsRequest")
	proto.RegisterType((*ChannelMessage)(nil), "nakama.api.ChannelMessage")
	proto.RegisterType((*ChannelMessageList)(nil), "nakama.api.ChannelMessageList")
	proto.RegisterType((*CreateGroupRequest)(nil), "nakama.api.CreateGroupRequest")
	proto.RegisterType((*DeleteFriendsRequest)(nil), "nakama.api.DeleteFriendsRequest")
	proto.RegisterType((*DeleteGroupRequest)(nil), "nakama.api.DeleteGroupRequest")
	proto.RegisterType((*DeleteLeaderboardRecordRequest)(nil), "nakama.api.DeleteLeaderboardRecordRequest")
	proto.RegisterType((*DeleteNotificationsRequest)(nil), "nakama.api.DeleteNotificationsRequest")
	proto.RegisterType((*DeleteStorageObjectId)(nil), "nakama.api.DeleteStorageObjectId")
	proto.RegisterType((*DeleteStorageObjectsRequest)(nil), "nakama.api.DeleteStorageObjectsRequest")
	proto.RegisterType((*Friend)(nil), "nakama.api.Friend")
	proto.RegisterType((*Friends)(nil), "nakama.api.Friends")
	proto.RegisterType((*GetUsersRequest)(nil), "nakama.api.GetUsersRequest")
	proto.RegisterType((*Group)(nil), "nakama.api.Group")
	proto.RegisterType((*GroupUserList)(nil), "nakama.api.GroupUserList")
	proto.RegisterType((*GroupUserList_GroupUser)(nil), "nakama.api.GroupUserList.GroupUser")
	proto.RegisterType((*ImportFacebookFriendsRequest)(nil), "nakama.api.ImportFacebookFriendsRequest")
	proto.RegisterType((*JoinGroupRequest)(nil), "nakama.api.JoinGroupRequest")
	proto.RegisterType((*KickGroupUsersRequest)(nil), "nakama.api.KickGroupUsersRequest")
	proto.RegisterType((*LeaderboardRecord)(nil), "nakama.api.LeaderboardRecord")
	proto.RegisterType((*LeaderboardRecordList)(nil), "nakama.api.LeaderboardRecordList")
	proto.RegisterType((*LeaveGroupRequest)(nil), "nakama.api.LeaveGroupRequest")
	proto.RegisterType((*LinkFacebookRequest)(nil), "nakama.api.LinkFacebookRequest")
	proto.RegisterType((*ListChannelMessagesRequest)(nil), "nakama.api.ListChannelMessagesRequest")
	proto.RegisterType((*ListGroupUsersRequest)(nil), "nakama.api.ListGroupUsersRequest")
	proto.RegisterType((*ListLeaderboardRecordsRequest)(nil), "nakama.api.ListLeaderboardRecordsRequest")
	proto.RegisterType((*ListMatchesRequest)(nil), "nakama.api.ListMatchesRequest")
	proto.RegisterType((*ListNotificationsRequest)(nil), "nakama.api.ListNotificationsRequest")
	proto.RegisterType((*ListStorageObjectsRequest)(nil), "nakama.api.ListStorageObjectsRequest")
	proto.RegisterType((*ListUserGroupsRequest)(nil), "nakama.api.ListUserGroupsRequest")
	proto.RegisterType((*Match)(nil), "nakama.api.Match")
	proto.RegisterType((*MatchList)(nil), "nakama.api.MatchList")
	proto.RegisterType((*Notification)(nil), "nakama.api.Notification")
	proto.RegisterType((*NotificationList)(nil), "nakama.api.NotificationList")
	proto.RegisterType((*PromoteGroupUsersRequest)(nil), "nakama.api.PromoteGroupUsersRequest")
	proto.RegisterType((*ReadStorageObjectId)(nil), "nakama.api.ReadStorageObjectId")
	proto.RegisterType((*ReadStorageObjectsRequest)(nil), "nakama.api.ReadStorageObjectsRequest")
	proto.RegisterType((*Rpc)(nil), "nakama.api.Rpc")
	proto.RegisterType((*Session)(nil), "nakama.api.Session")
	proto.RegisterType((*StorageObject)(nil), "nakama.api.StorageObject")
	proto.RegisterType((*StorageObjectAck)(nil), "nakama.api.StorageObjectAck")
	proto.RegisterType((*StorageObjectAcks)(nil), "nakama.api.StorageObjectAcks")
	proto.RegisterType((*StorageObjects)(nil), "nakama.api.StorageObjects")
	proto.RegisterType((*StorageObjectList)(nil), "nakama.api.StorageObjectList")
	proto.RegisterType((*UpdateAccountRequest)(nil), "nakama.api.UpdateAccountRequest")
	proto.RegisterType((*UpdateGroupRequest)(nil), "nakama.api.UpdateGroupRequest")
	proto.RegisterType((*User)(nil), "nakama.api.User")
	proto.RegisterType((*UserGroupList)(nil), "nakama.api.UserGroupList")
	proto.RegisterType((*UserGroupList_UserGroup)(nil), "nakama.api.UserGroupList.UserGroup")
	proto.RegisterType((*Users)(nil), "nakama.api.Users")
	proto.RegisterType((*WriteLeaderboardRecordRequest)(nil), "nakama.api.WriteLeaderboardRecordRequest")
	proto.RegisterType((*WriteLeaderboardRecordRequest_LeaderboardRecordWrite)(nil), "nakama.api.WriteLeaderboardRecordRequest.LeaderboardRecordWrite")
	proto.RegisterType((*WriteStorageObject)(nil), "nakama.api.WriteStorageObject")
	proto.RegisterType((*WriteStorageObjectsRequest)(nil), "nakama.api.WriteStorageObjectsRequest")
	proto.RegisterEnum("nakama.api.Friend_State", Friend_State_name, Friend_State_value)
	proto.RegisterEnum("nakama.api.GroupUserList_GroupUser_State", GroupUserList_GroupUser_State_name, GroupUserList_GroupUser_State_value)
	proto.RegisterEnum("nakama.api.UserGroupList_UserGroup_State", UserGroupList_UserGroup_State_name, UserGroupList_UserGroup_State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Nakama service

type NakamaClient interface {
	// Add friends by ID or username to a user's account.
	AddFriends(ctx context.Context, in *AddFriendsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add users to a group.
	AddGroupUsers(ctx context.Context, in *AddGroupUsersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Authenticate a user with a custom id against the server.
	AuthenticateCustom(ctx context.Context, in *AuthenticateCustomRequest, opts ...grpc.CallOption) (*Session, error)
	// Authenticate a user with a device id against the server.
	AuthenticateDevice(ctx context.Context, in *AuthenticateDeviceRequest, opts ...grpc.CallOption) (*Session, error)
	// Authenticate a user with an email+password against the server.
	AuthenticateEmail(ctx context.Context, in *AuthenticateEmailRequest, opts ...grpc.CallOption) (*Session, error)
	// Authenticate a user with a Facebook OAuth token against the server.
	AuthenticateFacebook(ctx context.Context, in *AuthenticateFacebookRequest, opts ...grpc.CallOption) (*Session, error)
	// Authenticate a user with Apple's GameCenter against the server.
	AuthenticateGameCenter(ctx context.Context, in *AuthenticateGameCenterRequest, opts ...grpc.CallOption) (*Session, error)
	// Authenticate a user with Google against the server.
	AuthenticateGoogle(ctx context.Context, in *AuthenticateGoogleRequest, opts ...grpc.CallOption) (*Session, error)
	// Authenticate a user with Steam against the server.
	AuthenticateSteam(ctx context.Context, in *AuthenticateSteamRequest, opts ...grpc.CallOption) (*Session, error)
	// Block one or more users by ID or username.
	BlockFriends(ctx context.Context, in *BlockFriendsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Create a new group with the current user as the owner.
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error)
	// Delete one or more users by ID or username.
	DeleteFriends(ctx context.Context, in *DeleteFriendsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Delete one or more groups by ID.
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Delete a leaderboard record.
	DeleteLeaderboardRecord(ctx context.Context, in *DeleteLeaderboardRecordRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Delete one or more users by ID or username.
	DeleteNotifications(ctx context.Context, in *DeleteNotificationsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Delete one or more objects by ID or username.
	DeleteStorageObjects(ctx context.Context, in *DeleteStorageObjectsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Fetch the current user's account.
	GetAccount(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Account, error)
	// Fetch zero or more users by ID and/or username.
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*Users, error)
	// A healthcheck which load balancers can use to check the service.
	Healthcheck(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Import Facebook friends and add them to a user's account.
	ImportFacebookFriends(ctx context.Context, in *ImportFacebookFriendsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Immediately join an open group, or request to join a closed one.
	JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Kick a set of users from a group.
	KickGroupUsers(ctx context.Context, in *KickGroupUsersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Leave a group the user is a member of.
	LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add a custom ID to the social profiles on the current user's account.
	LinkCustom(ctx context.Context, in *AccountCustom, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add a device ID to the social profiles on the current user's account.
	LinkDevice(ctx context.Context, in *AccountDevice, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add an email+password to the social profiles on the current user's account.
	LinkEmail(ctx context.Context, in *AccountEmail, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add Facebook to the social profiles on the current user's account.
	LinkFacebook(ctx context.Context, in *LinkFacebookRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add Apple's GameCenter to the social profiles on the current user's account.
	LinkGameCenter(ctx context.Context, in *AccountGameCenter, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add Google to the social profiles on the current user's account.
	LinkGoogle(ctx context.Context, in *AccountGoogle, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Add Steam to the social profiles on the current user's account.
	LinkSteam(ctx context.Context, in *AccountSteam, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// List a channel's message history.
	ListChannelMessages(ctx context.Context, in *ListChannelMessagesRequest, opts ...grpc.CallOption) (*ChannelMessageList, error)
	// List all friends for the current user.
	ListFriends(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Friends, error)
	// List all users that are part of a group.
	ListGroupUsers(ctx context.Context, in *ListGroupUsersRequest, opts ...grpc.CallOption) (*GroupUserList, error)
	// List leaderboard records
	ListLeaderboardRecords(ctx context.Context, in *ListLeaderboardRecordsRequest, opts ...grpc.CallOption) (*LeaderboardRecordList, error)
	// Fetch list of running matches.
	ListMatches(ctx context.Context, in *ListMatchesRequest, opts ...grpc.CallOption) (*MatchList, error)
	// Fetch list of notifications.
	ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*NotificationList, error)
	// List publicly readable storage objects in a given collection.
	ListStorageObjects(ctx context.Context, in *ListStorageObjectsRequest, opts ...grpc.CallOption) (*StorageObjectList, error)
	// List groups the current user belongs to.
	ListUserGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*UserGroupList, error)
	// Promote a set of users in a group to the next role up.
	PromoteGroupUsers(ctx context.Context, in *PromoteGroupUsersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get storage objects.
	ReadStorageObjects(ctx context.Context, in *ReadStorageObjectsRequest, opts ...grpc.CallOption) (*StorageObjects, error)
	// Execute a Lua function on the server.
	RpcFunc(ctx context.Context, in *Rpc, opts ...grpc.CallOption) (*Rpc, error)
	// Remove the custom ID from the social profiles on the current user's account.
	UnlinkCustom(ctx context.Context, in *AccountCustom, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Remove the device ID from the social profiles on the current user's account.
	UnlinkDevice(ctx context.Context, in *AccountDevice, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Remove the email+password from the social profiles on the current user's account.
	UnlinkEmail(ctx context.Context, in *AccountEmail, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Remove Facebook from the social profiles on the current user's account.
	UnlinkFacebook(ctx context.Context, in *AccountFacebook, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Remove Apple's GameCenter from the social profiles on the current user's account.
	UnlinkGameCenter(ctx context.Context, in *AccountGameCenter, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Remove Google from the social profiles on the current user's account.
	UnlinkGoogle(ctx context.Context, in *AccountGoogle, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Remove Steam from the social profiles on the current user's account.
	UnlinkSteam(ctx context.Context, in *AccountSteam, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Update fields in the current user's account.
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Update fields in a given group.
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Write a record to a leaderboard.
	WriteLeaderboardRecord(ctx context.Context, in *WriteLeaderboardRecordRequest, opts ...grpc.CallOption) (*LeaderboardRecord, error)
	// Write objects into the storage engine.
	WriteStorageObjects(ctx context.Context, in *WriteStorageObjectsRequest, opts ...grpc.CallOption) (*StorageObjectAcks, error)
}

type nakamaClient struct {
	cc *grpc.ClientConn
}

func NewNakamaClient(cc *grpc.ClientConn) NakamaClient {
	return &nakamaClient{cc}
}

func (c *nakamaClient) AddFriends(ctx context.Context, in *AddFriendsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AddFriends", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AddGroupUsers(ctx context.Context, in *AddGroupUsersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AddGroupUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateCustom(ctx context.Context, in *AuthenticateCustomRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateCustom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateDevice(ctx context.Context, in *AuthenticateDeviceRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateEmail(ctx context.Context, in *AuthenticateEmailRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateFacebook(ctx context.Context, in *AuthenticateFacebookRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateFacebook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateGameCenter(ctx context.Context, in *AuthenticateGameCenterRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateGameCenter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateGoogle(ctx context.Context, in *AuthenticateGoogleRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateGoogle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) AuthenticateSteam(ctx context.Context, in *AuthenticateSteamRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/AuthenticateSteam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) BlockFriends(ctx context.Context, in *BlockFriendsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/BlockFriends", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) DeleteFriends(ctx context.Context, in *DeleteFriendsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/DeleteFriends", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/DeleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) DeleteLeaderboardRecord(ctx context.Context, in *DeleteLeaderboardRecordRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/DeleteLeaderboardRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) DeleteNotifications(ctx context.Context, in *DeleteNotificationsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/DeleteNotifications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) DeleteStorageObjects(ctx context.Context, in *DeleteStorageObjectsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/DeleteStorageObjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) GetAccount(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/GetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/GetUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) Healthcheck(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/Healthcheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) ImportFacebookFriends(ctx context.Context, in *ImportFacebookFriendsRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/ImportFacebookFriends", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) JoinGroup(ctx context.Context, in *JoinGroupRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/JoinGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) KickGroupUsers(ctx context.Context, in *KickGroupUsersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/KickGroupUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LeaveGroup(ctx context.Context, in *LeaveGroupRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LeaveGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkCustom(ctx context.Context, in *AccountCustom, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkCustom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkDevice(ctx context.Context, in *AccountDevice, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkEmail(ctx context.Context, in *AccountEmail, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkFacebook(ctx context.Context, in *LinkFacebookRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkFacebook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkGameCenter(ctx context.Context, in *AccountGameCenter, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkGameCenter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkGoogle(ctx context.Context, in *AccountGoogle, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkGoogle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) LinkSteam(ctx context.Context, in *AccountSteam, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/LinkSteam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) ListChannelMessages(ctx context.Context, in *ListChannelMessagesRequest, opts ...grpc.CallOption) (*ChannelMessageList, error) {
	out := new(ChannelMessageList)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/ListChannelMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) ListFriends(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Friends, error) {
	out := new(Friends)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/ListFriends", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) ListGroupUsers(ctx context.Context, in *ListGroupUsersRequest, opts ...grpc.CallOption) (*GroupUserList, error) {
	out := new(GroupUserList)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/ListGroupUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) ListLeaderboardRecords(ctx context.Context, in *ListLeaderboardRecordsRequest, opts ...grpc.CallOption) (*LeaderboardRecordList, error) {
	out := new(LeaderboardRecordList)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/ListLeaderboardRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) ListMatches(ctx context.Context, in *ListMatchesRequest, opts ...grpc.CallOption) (*MatchList, error) {
	out := new(MatchList)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/ListMatches", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) ListNotifications(ctx context.Context, in *ListNotificationsRequest, opts ...grpc.CallOption) (*NotificationList, error) {
	out := new(NotificationList)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/ListNotifications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) ListStorageObjects(ctx context.Context, in *ListStorageObjectsRequest, opts ...grpc.CallOption) (*StorageObjectList, error) {
	out := new(StorageObjectList)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/ListStorageObjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) ListUserGroups(ctx context.Context, in *ListUserGroupsRequest, opts ...grpc.CallOption) (*UserGroupList, error) {
	out := new(UserGroupList)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/ListUserGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) PromoteGroupUsers(ctx context.Context, in *PromoteGroupUsersRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/PromoteGroupUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) ReadStorageObjects(ctx context.Context, in *ReadStorageObjectsRequest, opts ...grpc.CallOption) (*StorageObjects, error) {
	out := new(StorageObjects)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/ReadStorageObjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) RpcFunc(ctx context.Context, in *Rpc, opts ...grpc.CallOption) (*Rpc, error) {
	out := new(Rpc)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/RpcFunc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkCustom(ctx context.Context, in *AccountCustom, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkCustom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkDevice(ctx context.Context, in *AccountDevice, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkEmail(ctx context.Context, in *AccountEmail, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkFacebook(ctx context.Context, in *AccountFacebook, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkFacebook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkGameCenter(ctx context.Context, in *AccountGameCenter, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkGameCenter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkGoogle(ctx context.Context, in *AccountGoogle, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkGoogle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UnlinkSteam(ctx context.Context, in *AccountSteam, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UnlinkSteam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UpdateAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/UpdateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) WriteLeaderboardRecord(ctx context.Context, in *WriteLeaderboardRecordRequest, opts ...grpc.CallOption) (*LeaderboardRecord, error) {
	out := new(LeaderboardRecord)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/WriteLeaderboardRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nakamaClient) WriteStorageObjects(ctx context.Context, in *WriteStorageObjectsRequest, opts ...grpc.CallOption) (*StorageObjectAcks, error) {
	out := new(StorageObjectAcks)
	err := grpc.Invoke(ctx, "/nakama.api.Nakama/WriteStorageObjects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nakama service

type NakamaServer interface {
	// Add friends by ID or username to a user's account.
	AddFriends(context.Context, *AddFriendsRequest) (*google_protobuf1.Empty, error)
	// Add users to a group.
	AddGroupUsers(context.Context, *AddGroupUsersRequest) (*google_protobuf1.Empty, error)
	// Authenticate a user with a custom id against the server.
	AuthenticateCustom(context.Context, *AuthenticateCustomRequest) (*Session, error)
	// Authenticate a user with a device id against the server.
	AuthenticateDevice(context.Context, *AuthenticateDeviceRequest) (*Session, error)
	// Authenticate a user with an email+password against the server.
	AuthenticateEmail(context.Context, *AuthenticateEmailRequest) (*Session, error)
	// Authenticate a user with a Facebook OAuth token against the server.
	AuthenticateFacebook(context.Context, *AuthenticateFacebookRequest) (*Session, error)
	// Authenticate a user with Apple's GameCenter against the server.
	AuthenticateGameCenter(context.Context, *AuthenticateGameCenterRequest) (*Session, error)
	// Authenticate a user with Google against the server.
	AuthenticateGoogle(context.Context, *AuthenticateGoogleRequest) (*Session, error)
	// Authenticate a user with Steam against the server.
	AuthenticateSteam(context.Context, *AuthenticateSteamRequest) (*Session, error)
	// Block one or more users by ID or username.
	BlockFriends(context.Context, *BlockFriendsRequest) (*google_protobuf1.Empty, error)
	// Create a new group with the current user as the owner.
	CreateGroup(context.Context, *CreateGroupRequest) (*Group, error)
	// Delete one or more users by ID or username.
	DeleteFriends(context.Context, *DeleteFriendsRequest) (*google_protobuf1.Empty, error)
	// Delete one or more groups by ID.
	DeleteGroup(context.Context, *DeleteGroupRequest) (*google_protobuf1.Empty, error)
	// Delete a leaderboard record.
	DeleteLeaderboardRecord(context.Context, *DeleteLeaderboardRecordRequest) (*google_protobuf1.Empty, error)
	// Delete one or more users by ID or username.
	DeleteNotifications(context.Context, *DeleteNotificationsRequest) (*google_protobuf1.Empty, error)
	// Delete one or more objects by ID or username.
	DeleteStorageObjects(context.Context, *DeleteStorageObjectsRequest) (*google_protobuf1.Empty, error)
	// Fetch the current user's account.
	GetAccount(context.Context, *google_protobuf1.Empty) (*Account, error)
	// Fetch zero or more users by ID and/or username.
	GetUsers(context.Context, *GetUsersRequest) (*Users, error)
	// A healthcheck which load balancers can use to check the service.
	Healthcheck(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
	// Import Facebook friends and add them to a user's account.
	ImportFacebookFriends(context.Context, *ImportFacebookFriendsRequest) (*google_protobuf1.Empty, error)
	// Immediately join an open group, or request to join a closed one.
	JoinGroup(context.Context, *JoinGroupRequest) (*google_protobuf1.Empty, error)
	// Kick a set of users from a group.
	KickGroupUsers(context.Context, *KickGroupUsersRequest) (*google_protobuf1.Empty, error)
	// Leave a group the user is a member of.
	LeaveGroup(context.Context, *LeaveGroupRequest) (*google_protobuf1.Empty, error)
	// Add a custom ID to the social profiles on the current user's account.
	LinkCustom(context.Context, *AccountCustom) (*google_protobuf1.Empty, error)
	// Add a device ID to the social profiles on the current user's account.
	LinkDevice(context.Context, *AccountDevice) (*google_protobuf1.Empty, error)
	// Add an email+password to the social profiles on the current user's account.
	LinkEmail(context.Context, *AccountEmail) (*google_protobuf1.Empty, error)
	// Add Facebook to the social profiles on the current user's account.
	LinkFacebook(context.Context, *LinkFacebookRequest) (*google_protobuf1.Empty, error)
	// Add Apple's GameCenter to the social profiles on the current user's account.
	LinkGameCenter(context.Context, *AccountGameCenter) (*google_protobuf1.Empty, error)
	// Add Google to the social profiles on the current user's account.
	LinkGoogle(context.Context, *AccountGoogle) (*google_protobuf1.Empty, error)
	// Add Steam to the social profiles on the current user's account.
	LinkSteam(context.Context, *AccountSteam) (*google_protobuf1.Empty, error)
	// List a channel's message history.
	ListChannelMessages(context.Context, *ListChannelMessagesRequest) (*ChannelMessageList, error)
	// List all friends for the current user.
	ListFriends(context.Context, *google_protobuf1.Empty) (*Friends, error)
	// List all users that are part of a group.
	ListGroupUsers(context.Context, *ListGroupUsersRequest) (*GroupUserList, error)
	// List leaderboard records
	ListLeaderboardRecords(context.Context, *ListLeaderboardRecordsRequest) (*LeaderboardRecordList, error)
	// Fetch list of running matches.
	ListMatches(context.Context, *ListMatchesRequest) (*MatchList, error)
	// Fetch list of notifications.
	ListNotifications(context.Context, *ListNotificationsRequest) (*NotificationList, error)
	// List publicly readable storage objects in a given collection.
	ListStorageObjects(context.Context, *ListStorageObjectsRequest) (*StorageObjectList, error)
	// List groups the current user belongs to.
	ListUserGroups(context.Context, *ListUserGroupsRequest) (*UserGroupList, error)
	// Promote a set of users in a group to the next role up.
	PromoteGroupUsers(context.Context, *PromoteGroupUsersRequest) (*google_protobuf1.Empty, error)
	// Get storage objects.
	ReadStorageObjects(context.Context, *ReadStorageObjectsRequest) (*StorageObjects, error)
	// Execute a Lua function on the server.
	RpcFunc(context.Context, *Rpc) (*Rpc, error)
	// Remove the custom ID from the social profiles on the current user's account.
	UnlinkCustom(context.Context, *AccountCustom) (*google_protobuf1.Empty, error)
	// Remove the device ID from the social profiles on the current user's account.
	UnlinkDevice(context.Context, *AccountDevice) (*google_protobuf1.Empty, error)
	// Remove the email+password from the social profiles on the current user's account.
	UnlinkEmail(context.Context, *AccountEmail) (*google_protobuf1.Empty, error)
	// Remove Facebook from the social profiles on the current user's account.
	UnlinkFacebook(context.Context, *AccountFacebook) (*google_protobuf1.Empty, error)
	// Remove Apple's GameCenter from the social profiles on the current user's account.
	UnlinkGameCenter(context.Context, *AccountGameCenter) (*google_protobuf1.Empty, error)
	// Remove Google from the social profiles on the current user's account.
	UnlinkGoogle(context.Context, *AccountGoogle) (*google_protobuf1.Empty, error)
	// Remove Steam from the social profiles on the current user's account.
	UnlinkSteam(context.Context, *AccountSteam) (*google_protobuf1.Empty, error)
	// Update fields in the current user's account.
	UpdateAccount(context.Context, *UpdateAccountRequest) (*google_protobuf1.Empty, error)
	// Update fields in a given group.
	UpdateGroup(context.Context, *UpdateGroupRequest) (*google_protobuf1.Empty, error)
	// Write a record to a leaderboard.
	WriteLeaderboardRecord(context.Context, *WriteLeaderboardRecordRequest) (*LeaderboardRecord, error)
	// Write objects into the storage engine.
	WriteStorageObjects(context.Context, *WriteStorageObjectsRequest) (*StorageObjectAcks, error)
}

func RegisterNakamaServer(s *grpc.Server, srv NakamaServer) {
	s.RegisterService(&_Nakama_serviceDesc, srv)
}

func _Nakama_AddFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AddFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AddFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AddFriends(ctx, req.(*AddFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AddGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AddGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AddGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AddGroupUsers(ctx, req.(*AddGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateCustom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateCustom(ctx, req.(*AuthenticateCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateDevice(ctx, req.(*AuthenticateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateEmail(ctx, req.(*AuthenticateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateFacebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateFacebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateFacebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateFacebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateFacebook(ctx, req.(*AuthenticateFacebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateGameCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateGameCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateGameCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateGameCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateGameCenter(ctx, req.(*AuthenticateGameCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateGoogleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateGoogle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateGoogle(ctx, req.(*AuthenticateGoogleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_AuthenticateSteam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateSteamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).AuthenticateSteam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/AuthenticateSteam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).AuthenticateSteam(ctx, req.(*AuthenticateSteamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_BlockFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).BlockFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/BlockFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).BlockFriends(ctx, req.(*BlockFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_DeleteFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).DeleteFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/DeleteFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).DeleteFriends(ctx, req.(*DeleteFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_DeleteLeaderboardRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeaderboardRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).DeleteLeaderboardRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/DeleteLeaderboardRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).DeleteLeaderboardRecord(ctx, req.(*DeleteLeaderboardRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_DeleteNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).DeleteNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/DeleteNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).DeleteNotifications(ctx, req.(*DeleteNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_DeleteStorageObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStorageObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).DeleteStorageObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/DeleteStorageObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).DeleteStorageObjects(ctx, req.(*DeleteStorageObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).GetAccount(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/Healthcheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).Healthcheck(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_ImportFacebookFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportFacebookFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).ImportFacebookFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/ImportFacebookFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).ImportFacebookFriends(ctx, req.(*ImportFacebookFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).JoinGroup(ctx, req.(*JoinGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_KickGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).KickGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/KickGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).KickGroupUsers(ctx, req.(*KickGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LeaveGroup(ctx, req.(*LeaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCustom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkCustom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkCustom(ctx, req.(*AccountCustom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkDevice(ctx, req.(*AccountDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkEmail(ctx, req.(*AccountEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkFacebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkFacebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkFacebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkFacebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkFacebook(ctx, req.(*LinkFacebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkGameCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGameCenter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkGameCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkGameCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkGameCenter(ctx, req.(*AccountGameCenter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGoogle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkGoogle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkGoogle(ctx, req.(*AccountGoogle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_LinkSteam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountSteam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).LinkSteam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/LinkSteam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).LinkSteam(ctx, req.(*AccountSteam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_ListChannelMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChannelMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).ListChannelMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/ListChannelMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).ListChannelMessages(ctx, req.(*ListChannelMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_ListFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).ListFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/ListFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).ListFriends(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_ListGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).ListGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/ListGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).ListGroupUsers(ctx, req.(*ListGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_ListLeaderboardRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeaderboardRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).ListLeaderboardRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/ListLeaderboardRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).ListLeaderboardRecords(ctx, req.(*ListLeaderboardRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_ListMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).ListMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/ListMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).ListMatches(ctx, req.(*ListMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_ListNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).ListNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/ListNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).ListNotifications(ctx, req.(*ListNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_ListStorageObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStorageObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).ListStorageObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/ListStorageObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).ListStorageObjects(ctx, req.(*ListStorageObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_ListUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).ListUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/ListUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).ListUserGroups(ctx, req.(*ListUserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_PromoteGroupUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteGroupUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).PromoteGroupUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/PromoteGroupUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).PromoteGroupUsers(ctx, req.(*PromoteGroupUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_ReadStorageObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStorageObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).ReadStorageObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/ReadStorageObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).ReadStorageObjects(ctx, req.(*ReadStorageObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_RpcFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).RpcFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/RpcFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).RpcFunc(ctx, req.(*Rpc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCustom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkCustom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkCustom(ctx, req.(*AccountCustom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkDevice(ctx, req.(*AccountDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkEmail(ctx, req.(*AccountEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkFacebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountFacebook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkFacebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkFacebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkFacebook(ctx, req.(*AccountFacebook))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkGameCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGameCenter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkGameCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkGameCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkGameCenter(ctx, req.(*AccountGameCenter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGoogle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkGoogle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkGoogle(ctx, req.(*AccountGoogle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UnlinkSteam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountSteam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UnlinkSteam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UnlinkSteam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UnlinkSteam(ctx, req.(*AccountSteam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_WriteLeaderboardRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteLeaderboardRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).WriteLeaderboardRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/WriteLeaderboardRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).WriteLeaderboardRecord(ctx, req.(*WriteLeaderboardRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nakama_WriteStorageObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteStorageObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NakamaServer).WriteStorageObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.api.Nakama/WriteStorageObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NakamaServer).WriteStorageObjects(ctx, req.(*WriteStorageObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nakama_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.api.Nakama",
	HandlerType: (*NakamaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFriends",
			Handler:    _Nakama_AddFriends_Handler,
		},
		{
			MethodName: "AddGroupUsers",
			Handler:    _Nakama_AddGroupUsers_Handler,
		},
		{
			MethodName: "AuthenticateCustom",
			Handler:    _Nakama_AuthenticateCustom_Handler,
		},
		{
			MethodName: "AuthenticateDevice",
			Handler:    _Nakama_AuthenticateDevice_Handler,
		},
		{
			MethodName: "AuthenticateEmail",
			Handler:    _Nakama_AuthenticateEmail_Handler,
		},
		{
			MethodName: "AuthenticateFacebook",
			Handler:    _Nakama_AuthenticateFacebook_Handler,
		},
		{
			MethodName: "AuthenticateGameCenter",
			Handler:    _Nakama_AuthenticateGameCenter_Handler,
		},
		{
			MethodName: "AuthenticateGoogle",
			Handler:    _Nakama_AuthenticateGoogle_Handler,
		},
		{
			MethodName: "AuthenticateSteam",
			Handler:    _Nakama_AuthenticateSteam_Handler,
		},
		{
			MethodName: "BlockFriends",
			Handler:    _Nakama_BlockFriends_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Nakama_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteFriends",
			Handler:    _Nakama_DeleteFriends_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Nakama_DeleteGroup_Handler,
		},
		{
			MethodName: "DeleteLeaderboardRecord",
			Handler:    _Nakama_DeleteLeaderboardRecord_Handler,
		},
		{
			MethodName: "DeleteNotifications",
			Handler:    _Nakama_DeleteNotifications_Handler,
		},
		{
			MethodName: "DeleteStorageObjects",
			Handler:    _Nakama_DeleteStorageObjects_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Nakama_GetAccount_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Nakama_GetUsers_Handler,
		},
		{
			MethodName: "Healthcheck",
			Handler:    _Nakama_Healthcheck_Handler,
		},
		{
			MethodName: "ImportFacebookFriends",
			Handler:    _Nakama_ImportFacebookFriends_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _Nakama_JoinGroup_Handler,
		},
		{
			MethodName: "KickGroupUsers",
			Handler:    _Nakama_KickGroupUsers_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _Nakama_LeaveGroup_Handler,
		},
		{
			MethodName: "LinkCustom",
			Handler:    _Nakama_LinkCustom_Handler,
		},
		{
			MethodName: "LinkDevice",
			Handler:    _Nakama_LinkDevice_Handler,
		},
		{
			MethodName: "LinkEmail",
			Handler:    _Nakama_LinkEmail_Handler,
		},
		{
			MethodName: "LinkFacebook",
			Handler:    _Nakama_LinkFacebook_Handler,
		},
		{
			MethodName: "LinkGameCenter",
			Handler:    _Nakama_LinkGameCenter_Handler,
		},
		{
			MethodName: "LinkGoogle",
			Handler:    _Nakama_LinkGoogle_Handler,
		},
		{
			MethodName: "LinkSteam",
			Handler:    _Nakama_LinkSteam_Handler,
		},
		{
			MethodName: "ListChannelMessages",
			Handler:    _Nakama_ListChannelMessages_Handler,
		},
		{
			MethodName: "ListFriends",
			Handler:    _Nakama_ListFriends_Handler,
		},
		{
			MethodName: "ListGroupUsers",
			Handler:    _Nakama_ListGroupUsers_Handler,
		},
		{
			MethodName: "ListLeaderboardRecords",
			Handler:    _Nakama_ListLeaderboardRecords_Handler,
		},
		{
			MethodName: "ListMatches",
			Handler:    _Nakama_ListMatches_Handler,
		},
		{
			MethodName: "ListNotifications",
			Handler:    _Nakama_ListNotifications_Handler,
		},
		{
			MethodName: "ListStorageObjects",
			Handler:    _Nakama_ListStorageObjects_Handler,
		},
		{
			MethodName: "ListUserGroups",
			Handler:    _Nakama_ListUserGroups_Handler,
		},
		{
			MethodName: "PromoteGroupUsers",
			Handler:    _Nakama_PromoteGroupUsers_Handler,
		},
		{
			MethodName: "ReadStorageObjects",
			Handler:    _Nakama_ReadStorageObjects_Handler,
		},
		{
			MethodName: "RpcFunc",
			Handler:    _Nakama_RpcFunc_Handler,
		},
		{
			MethodName: "UnlinkCustom",
			Handler:    _Nakama_UnlinkCustom_Handler,
		},
		{
			MethodName: "UnlinkDevice",
			Handler:    _Nakama_UnlinkDevice_Handler,
		},
		{
			MethodName: "UnlinkEmail",
			Handler:    _Nakama_UnlinkEmail_Handler,
		},
		{
			MethodName: "UnlinkFacebook",
			Handler:    _Nakama_UnlinkFacebook_Handler,
		},
		{
			MethodName: "UnlinkGameCenter",
			Handler:    _Nakama_UnlinkGameCenter_Handler,
		},
		{
			MethodName: "UnlinkGoogle",
			Handler:    _Nakama_UnlinkGoogle_Handler,
		},
		{
			MethodName: "UnlinkSteam",
			Handler:    _Nakama_UnlinkSteam_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Nakama_UpdateAccount_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Nakama_UpdateGroup_Handler,
		},
		{
			MethodName: "WriteLeaderboardRecord",
			Handler:    _Nakama_WriteLeaderboardRecord_Handler,
		},
		{
			MethodName: "WriteStorageObjects",
			Handler:    _Nakama_WriteStorageObjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 4244 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x3b, 0x4d, 0x6f, 0x1c, 0x47,
	0x76, 0xe9, 0xf9, 0xe0, 0xcc, 0xbc, 0x21, 0xa9, 0x61, 0x51, 0xa2, 0x87, 0x43, 0x52, 0xa2, 0xda,
	0x92, 0x25, 0x73, 0x2d, 0x8e, 0x42, 0x6d, 0x62, 0x43, 0x0b, 0x38, 0xa2, 0xc8, 0x91, 0x32, 0x96,
	0x44, 0x2b, 0x4d, 0x4a, 0x0e, 0x1c, 0x2c, 0xc6, 0xcd, 0xee, 0xd2, 0xb0, 0x3d, 0x3d, 0xdd, 0xed,
	0xee, 0x1e, 0x4a, 0xb4, 0x20, 0x38, 0x58, 0x04, 0x58, 0x9f, 0x16, 0x8b, 0x4d, 0x0e, 0x01, 0x02,
	0x24, 0x8b, 0xdd, 0xcb, 0x22, 0x40, 0xf2, 0x0b, 0x72, 0x0d, 0x72, 0xc8, 0x2d, 0x01, 0x82, 0x45,
	0x4e, 0x39, 0xe4, 0x98, 0x1f, 0x10, 0x60, 0x2f, 0x41, 0x7d, 0x74, 0x77, 0xf5, 0xd7, 0xcc, 0x90,
	0x94, 0x9d, 0x8b, 0x34, 0x55, 0xf5, 0xea, 0xbd, 0xd7, 0xaf, 0xde, 0x57, 0xbd, 0x7a, 0x84, 0x39,
	0xd5, 0x31, 0xda, 0xaa, 0x63, 0x6c, 0x3a, 0xae, 0xed, 0xdb, 0x08, 0x2c, 0x75, 0xa0, 0x0e, 0xd5,
	0x4d, 0xd5, 0x31, 0x5a, 0xab, 0x7d, 0xdb, 0xee, 0x9b, 0xb8, 0x4d, 0x21, 0x2c, 0xcb, 0xf6, 0x55,
	0xdf, 0xb0, 0x2d, 0x8f, 0x41, 0xb6, 0x56, 0xf8, 0x2a, 0x1d, 0x1d, 0x8e, 0x5e, 0xb4, 0xf1, 0xd0,
	0xf1, 0x4f, 0xf8, 0xe2, 0x95, 0xe4, 0xa2, 0x6f, 0x0c, 0xb1, 0xe7, 0xab, 0x43, 0x87, 0x03, 0x5c,
	0x4e, 0x02, 0xbc, 0x74, 0x55, 0xc7, 0xc1, 0x6e, 0x80, 0xfd, 0x03, 0xfa, 0x9f, 0x76, 0xab, 0x8f,
	0xad, 0x5b, 0xde, 0x4b, 0xb5, 0xdf, 0xc7, 0x6e, 0xdb, 0x76, 0x28, 0xfd, 0x34, 0x2f, 0xf2, 0xff,
	0x48, 0x50, 0xd9, 0xd6, 0x34, 0x7b, 0x64, 0xf9, 0xe8, 0x1a, 0x94, 0x46, 0x1e, 0x76, 0x9b, 0xd2,
	0xba, 0x74, 0xb3, 0xbe, 0xd5, 0xd8, 0x8c, 0x3e, 0x68, 0xf3, 0x99, 0x87, 0x5d, 0x85, 0xae, 0xa2,
	0x25, 0x98, 0x79, 0xa9, 0x9a, 0x26, 0xf6, 0x9b, 0x85, 0x75, 0xe9, 0x66, 0x4d, 0xe1, 0x23, 0x74,
	0x11, 0xca, 0x78, 0xa8, 0x1a, 0x66, 0xb3, 0x48, 0xa7, 0xd9, 0x00, 0xdd, 0x81, 0x8a, 0x8e, 0x8f,
	0x0d, 0x0d, 0x7b, 0xcd, 0xd2, 0x7a, 0xf1, 0x66, 0x7d, 0x6b, 0x59, 0x44, 0xcb, 0x29, 0xef, 0x52,
	0x08, 0x25, 0x80, 0x44, 0x2b, 0x50, 0xd3, 0x46, 0x9e, 0x6f, 0x0f, 0x7b, 0x86, 0xde, 0x2c, 0x53,
	0x74, 0x55, 0x36, 0xd1, 0xd5, 0xd1, 0x8f, 0xa0, 0x7e, 0x8c, 0x5d, 0xe3, 0xc5, 0x49, 0x8f, 0x48,
	0xa6, 0x39, 0x43, 0x99, 0x6d, 0x6d, 0x32, 0xa9, 0x6c, 0x06, 0x52, 0xd9, 0x3c, 0x08, 0xc4, 0xa6,
	0x00, 0x03, 0x27, 0x13, 0xf2, 0x15, 0x98, 0xe3, 0x34, 0x77, 0x28, 0x3e, 0x34, 0x0f, 0x05, 0x43,
	0xa7, 0x5f, 0x5c, 0x53, 0x0a, 0x86, 0x2e, 0x00, 0x30, 0xa6, 0x52, 0x00, 0xf7, 0x60, 0x96, 0x03,
	0x74, 0xe8, 0x07, 0x86, 0x9f, 0x2d, 0x89, 0x9f, 0xdd, 0x82, 0xaa, 0xa3, 0x7a, 0xde, 0x4b, 0xdb,
	0xd5, 0xb9, 0x98, 0xc2, 0xb1, 0x7c, 0x03, 0x2e, 0x70, 0x0c, 0x0f, 0x54, 0x0d, 0x1f, 0xda, 0xf6,
	0x80, 0x20, 0xf1, 0xed, 0x01, 0xb6, 0x02, 0x24, 0x74, 0x20, 0xff, 0x9b, 0x04, 0x0b, 0x1c, 0xf2,
	0xa1, 0x3a, 0xc4, 0x3b, 0xd8, 0xf2, 0xb1, 0x4b, 0x84, 0xe3, 0x98, 0xea, 0x09, 0x76, 0x7b, 0x21,
	0x5f, 0x55, 0x36, 0xd1, 0xd5, 0xc9, 0xe2, 0xe1, 0xc8, 0xd2, 0x4d, 0x4c, 0x16, 0x39, 0x61, 0x36,
	0xd1, 0xd5, 0xd1, 0x0f, 0x60, 0x21, 0x54, 0xa6, 0x9e, 0x87, 0x35, 0xdb, 0xd2, 0x3d, 0x7a, 0x5a,
	0x45, 0xa5, 0x11, 0x2e, 0xec, 0xb3, 0x79, 0x84, 0xa0, 0xe4, 0xa9, 0xa6, 0xdf, 0x2c, 0x51, 0x24,
	0xf4, 0x37, 0x5a, 0x85, 0x9a, 0x67, 0xf4, 0x2d, 0xd5, 0x1f, 0xb9, 0x98, 0x9f, 0x4b, 0x34, 0x81,
	0xae, 0xc1, 0xbc, 0x33, 0x3a, 0x34, 0x0d, 0xad, 0x37, 0xc0, 0x27, 0xbd, 0x91, 0x6b, 0xd2, 0xb3,
	0xa9, 0x29, 0xb3, 0x6c, 0xf6, 0x11, 0x3e, 0x79, 0xe6, 0x9a, 0xf2, 0xf5, 0x50, 0xc0, 0x0f, 0xe9,
	0x89, 0xe5, 0x7c, 0xfb, 0xb5, 0x50, 0xcc, 0xfb, 0x3e, 0x56, 0x87, 0x39, 0x50, 0x3b, 0xb0, 0xb0,
	0xad, 0xeb, 0x0f, 0x5c, 0x03, 0x5b, 0xba, 0xa7, 0xe0, 0xaf, 0x46, 0xd8, 0xf3, 0x51, 0x03, 0x8a,
	0x86, 0xee, 0x35, 0xa5, 0xf5, 0xe2, 0xcd, 0x9a, 0x42, 0x7e, 0x12, 0xbe, 0x89, 0xea, 0x5a, 0xea,
	0x10, 0x7b, 0xcd, 0x02, 0x9d, 0x8f, 0x26, 0xe4, 0xc7, 0x70, 0x71, 0x5b, 0xd7, 0x1f, 0xba, 0xf6,
	0xc8, 0x21, 0x6a, 0x1e, 0xe2, 0x59, 0x86, 0x6a, 0x9f, 0x4c, 0x46, 0x72, 0xae, 0xd0, 0x71, 0x57,
	0x27, 0x4b, 0x64, 0x7f, 0x8f, 0xd0, 0x61, 0xf8, 0x2a, 0x64, 0xdc, 0xd5, 0x3d, 0xf9, 0x97, 0x12,
	0x2c, 0x6f, 0x8f, 0xfc, 0x23, 0x6c, 0xf9, 0x86, 0xa6, 0xfa, 0x98, 0xe9, 0x59, 0x80, 0xf3, 0x0e,
	0x54, 0x54, 0xf6, 0x59, 0xdc, 0xca, 0xb2, 0xcc, 0x81, 0x6f, 0x09, 0x20, 0xd1, 0x16, 0xcc, 0x68,
	0x2e, 0x56, 0x7d, 0x4c, 0x4f, 0x34, 0x4b, 0xd9, 0xef, 0xdb, 0xb6, 0xf9, 0x5c, 0x35, 0x47, 0x58,
	0xe1, 0x90, 0x44, 0x01, 0x83, 0x2f, 0xe4, 0x06, 0x19, 0x8e, 0x53, 0x2c, 0x72, 0xf3, 0x3b, 0x0d,
	0x8b, 0x81, 0xc5, 0x7e, 0x57, 0x2c, 0xfe, 0xad, 0x04, 0x4d, 0x91, 0x45, 0x6a, 0x6b, 0x01, 0x87,
	0x5b, 0x49, 0x0e, 0x9b, 0x19, 0x1c, 0xb2, 0x1d, 0xdf, 0x19, 0x83, 0xbf, 0x95, 0x60, 0x45, 0x64,
	0x30, 0x30, 0xe5, 0x80, 0xc7, 0x3f, 0x48, 0xf2, 0xb8, 0x92, 0xc1, 0x63, 0xb8, 0xe9, 0xbb, 0x62,
	0x93, 0xe0, 0x33, 0x86, 0x8e, 0xed, 0x32, 0x3b, 0x9e, 0x80, 0x8f, 0x41, 0xca, 0xbf, 0x91, 0x60,
	0x4d, 0xfc, 0xb4, 0xc8, 0xf7, 0x04, 0x1f, 0xf7, 0x61, 0xf2, 0xe3, 0xd6, 0x32, 0x3e, 0x4e, 0xd8,
	0xf6, 0xbd, 0x69, 0x32, 0x73, 0x29, 0xa7, 0xd2, 0x64, 0xbe, 0xe5, 0x7b, 0xd3, 0x64, 0xea, 0xce,
	0x4e, 0xa5, 0xc9, 0x6c, 0xc7, 0x77, 0xc6, 0x60, 0x07, 0x16, 0xef, 0x9b, 0xb6, 0x36, 0x38, 0xa7,
	0x17, 0xfd, 0xb6, 0x08, 0xf3, 0x3b, 0x47, 0xaa, 0x65, 0x61, 0xf3, 0x09, 0xf6, 0x3c, 0xb5, 0x8f,
	0xd1, 0x1a, 0x80, 0xc6, 0x66, 0x22, 0x17, 0x5a, 0xe3, 0x33, 0x5d, 0x9d, 0x2c, 0x0f, 0x19, 0x64,
	0x14, 0xac, 0x6a, 0x7c, 0xa6, 0xab, 0xa3, 0x36, 0x94, 0x34, 0x5b, 0x67, 0xfc, 0x12, 0xf3, 0x49,
	0x7e, 0x65, 0xd7, 0xf2, 0xef, 0x6c, 0xb1, 0xcf, 0xa4, 0x80, 0x24, 0xf6, 0x79, 0xd8, 0xd2, 0x59,
	0x60, 0x64, 0x61, 0xab, 0xca, 0x26, 0xba, 0x7a, 0x4c, 0x02, 0xe5, 0x84, 0x91, 0x34, 0xa1, 0xa2,
	0xd9, 0x96, 0x8f, 0x2d, 0x9f, 0x47, 0xac, 0x60, 0x48, 0x72, 0x0d, 0x26, 0x41, 0x96, 0x6b, 0x54,
	0x26, 0xe7, 0x1a, 0x0c, 0x9c, 0x4c, 0x90, 0xcd, 0x23, 0x47, 0x0f, 0x37, 0x57, 0x27, 0x6f, 0x66,
	0xe0, 0x74, 0xf3, 0x5d, 0x00, 0x92, 0xd3, 0x19, 0x1e, 0x65, 0xab, 0x36, 0xf1, 0xa4, 0x05, 0x68,
	0xf9, 0x67, 0x12, 0xa0, 0xf8, 0x51, 0x3c, 0x36, 0x3c, 0x1f, 0xfd, 0x21, 0x54, 0xb9, 0x74, 0xd9,
	0xb1, 0x12, 0x84, 0x82, 0xb6, 0xc5, 0x77, 0x28, 0x21, 0x2c, 0xba, 0x02, 0x75, 0x0b, 0xbf, 0xf2,
	0x7b, 0xda, 0xc8, 0xf5, 0x6c, 0x97, 0x1f, 0x14, 0x90, 0xa9, 0x1d, 0x3a, 0x43, 0x00, 0x1c, 0x17,
	0x1f, 0x07, 0x00, 0x4c, 0xc1, 0x80, 0x4c, 0x31, 0x00, 0xf9, 0xaf, 0x09, 0x43, 0x54, 0x30, 0x34,
	0xca, 0x06, 0x2a, 0x86, 0xa0, 0x44, 0xcf, 0x83, 0x69, 0x06, 0xfd, 0x8d, 0xd6, 0xa1, 0xae, 0x63,
	0x4f, 0x73, 0x0d, 0x9a, 0xb1, 0x72, 0x62, 0xe2, 0x14, 0x89, 0xbd, 0xa6, 0x6a, 0xf5, 0x7b, 0xbe,
	0xda, 0xe7, 0xa4, 0x2a, 0x64, 0x7c, 0xa0, 0xf6, 0x89, 0x46, 0xa9, 0xc7, 0xaa, 0xaf, 0xba, 0x34,
	0xfb, 0x60, 0x2a, 0x50, 0x63, 0x33, 0xcf, 0x5c, 0x93, 0xd0, 0xb3, 0x1d, 0x6c, 0xd1, 0xf3, 0xaf,
	0x2a, 0xf4, 0xb7, 0xfc, 0x00, 0x2e, 0xee, 0x62, 0x13, 0xfb, 0xf8, 0x9c, 0xea, 0xdf, 0x06, 0xc4,
	0xf0, 0xc4, 0xbe, 0x30, 0x3f, 0x85, 0x90, 0x1f, 0xc2, 0x65, 0xb6, 0xe1, 0x31, 0x56, 0x75, 0xec,
	0x1e, 0xda, 0xaa, 0xab, 0x2b, 0x58, 0xb3, 0xc9, 0xbf, 0x6c, 0xf3, 0x75, 0x98, 0x37, 0xa3, 0xb5,
	0x08, 0xc5, 0x9c, 0x30, 0xdb, 0xd5, 0xe5, 0x4d, 0x68, 0x31, 0x44, 0x7b, 0xb6, 0x6f, 0xbc, 0x20,
	0x3e, 0x86, 0xa4, 0xf7, 0xb9, 0xdf, 0x21, 0x6b, 0x70, 0x89, 0xc1, 0xef, 0xfb, 0xb6, 0xab, 0xf6,
	0xf1, 0xa7, 0x87, 0x5f, 0x62, 0xcd, 0xef, 0xea, 0xe8, 0x32, 0x80, 0x66, 0x9b, 0x26, 0xd6, 0xa8,
	0xe4, 0x19, 0x2d, 0x61, 0x86, 0xa0, 0x1a, 0xe0, 0x13, 0x7e, 0x24, 0xe4, 0x27, 0x31, 0x9c, 0x63,
	0xa2, 0x76, 0xb6, 0x15, 0x9c, 0x04, 0x1f, 0xca, 0x3d, 0x58, 0xc9, 0x20, 0x12, 0x72, 0x75, 0x0f,
	0xc0, 0xa6, 0x33, 0xbd, 0x80, 0xb9, 0xfa, 0xd6, 0x55, 0x51, 0x19, 0x33, 0x39, 0x54, 0x6a, 0x36,
	0xff, 0xe5, 0xc9, 0xbf, 0x96, 0x60, 0x86, 0x1d, 0xd9, 0x94, 0xd7, 0x96, 0x8b, 0x50, 0xf6, 0xfc,
	0xc0, 0x6b, 0x96, 0x15, 0x36, 0x90, 0x7f, 0x0c, 0xe5, 0x7d, 0xf2, 0x03, 0x5d, 0x82, 0x85, 0xfd,
	0x83, 0xed, 0x83, 0x4e, 0xef, 0xd9, 0xde, 0xfe, 0xd3, 0xce, 0x4e, 0xf7, 0x41, 0xb7, 0xb3, 0xdb,
	0xf8, 0x3d, 0x04, 0x30, 0xf3, 0x40, 0xe9, 0x76, 0xf6, 0x76, 0x1b, 0x12, 0xba, 0x00, 0xf5, 0xee,
	0xde, 0xf3, 0xee, 0x41, 0xa7, 0xb7, 0xdf, 0xd9, 0x3b, 0x68, 0x14, 0xd0, 0x22, 0x5c, 0xe0, 0x13,
	0x4a, 0x67, 0xa7, 0xd3, 0x7d, 0xde, 0xd9, 0x6d, 0x14, 0x51, 0x1d, 0x2a, 0xf7, 0x1f, 0x7f, 0xba,
	0xf3, 0xa8, 0xb3, 0xdb, 0x28, 0xc9, 0x1f, 0x42, 0x85, 0xeb, 0x15, 0xfa, 0x00, 0x2a, 0x2f, 0xd8,
	0x4f, 0xfe, 0xbd, 0x48, 0x64, 0x94, 0x41, 0x29, 0x01, 0x88, 0xac, 0xc3, 0x85, 0x87, 0xd8, 0x8f,
	0xa5, 0xa3, 0xa7, 0xd4, 0x48, 0x74, 0x15, 0x66, 0x5f, 0xf0, 0xfc, 0x82, 0x4a, 0xb9, 0x48, 0x01,
	0xea, 0xc1, 0x1c, 0x11, 0xe2, 0x6f, 0x8a, 0x50, 0xa6, 0xfa, 0x9a, 0xbc, 0xe5, 0x50, 0xd7, 0x4d,
	0x0c, 0xd6, 0x76, 0x05, 0xdf, 0xcc, 0x67, 0xba, 0x7a, 0x68, 0xb9, 0xc5, 0x7c, 0xcb, 0x2d, 0x8d,
	0xb7, 0xdc, 0x72, 0xdc, 0x72, 0x5b, 0xc4, 0x37, 0xf9, 0xaa, 0xae, 0xfa, 0x2a, 0xf7, 0xc1, 0xe1,
	0x38, 0x61, 0xd5, 0x95, 0xa4, 0x55, 0x6f, 0x72, 0xab, 0xae, 0x4e, 0xf4, 0x91, 0x14, 0x8e, 0xa0,
	0xc3, 0x7a, 0x1f, 0xf7, 0x58, 0xd8, 0xad, 0x51, 0x6d, 0xa8, 0x91, 0x99, 0x1d, 0x1a, 0x5e, 0x57,
	0xa0, 0x36, 0x54, 0x5f, 0xf1, 0x55, 0xa0, 0xab, 0xd5, 0xa1, 0xfa, 0x8a, 0x2d, 0x26, 0xe2, 0x41,
	0xfd, 0x3c, 0xf1, 0x60, 0xf6, 0x34, 0xf1, 0x40, 0xfe, 0x5f, 0x09, 0xe6, 0xc2, 0x2b, 0x0a, 0x75,
	0xe7, 0xbb, 0x50, 0x67, 0xbe, 0x85, 0x1c, 0x79, 0xa0, 0x54, 0xef, 0x8a, 0x4a, 0x15, 0x83, 0x8f,
	0x46, 0x0a, 0xf4, 0xc3, 0xbb, 0x4e, 0xeb, 0x97, 0x12, 0xd4, 0xc2, 0x95, 0x73, 0x99, 0xd2, 0x67,
	0x13, 0x4c, 0x69, 0x1e, 0x60, 0xff, 0xd9, 0xd3, 0x8e, 0xb2, 0xbd, 0xfb, 0xa4, 0xbb, 0xd7, 0x90,
	0x50, 0x0d, 0xca, 0xec, 0x67, 0x81, 0x58, 0xd9, 0x93, 0xce, 0x93, 0xfb, 0x1d, 0xa5, 0x51, 0x44,
	0x0d, 0x98, 0xfd, 0xe4, 0xd3, 0xee, 0x5e, 0x4f, 0xe9, 0xfc, 0xc9, 0xb3, 0xce, 0xfe, 0x41, 0xa3,
	0x24, 0xff, 0x54, 0x82, 0xd5, 0x2e, 0x4d, 0x4d, 0x83, 0x7c, 0x39, 0xe1, 0xab, 0xcf, 0x98, 0x6b,
	0xdf, 0x86, 0xb2, 0x8b, 0x3d, 0x5e, 0xc7, 0x18, 0xaf, 0x39, 0x0c, 0x50, 0xbe, 0x05, 0x8d, 0x4f,
	0x6c, 0xc3, 0x9a, 0xd6, 0xc5, 0x3f, 0x81, 0x4b, 0x8f, 0x0c, 0x6d, 0xf0, 0xb6, 0x6e, 0x96, 0xff,
	0x5c, 0x84, 0x85, 0x54, 0xb0, 0x98, 0x32, 0x4a, 0x10, 0xbc, 0xf6, 0x4b, 0x0b, 0x0b, 0xe6, 0x5c,
	0xa1, 0xe3, 0xae, 0x8e, 0x3e, 0x4a, 0x24, 0x87, 0xf5, 0xad, 0xd5, 0x94, 0x28, 0xf6, 0x7d, 0xd7,
	0xb0, 0xfa, 0x4c, 0x18, 0x51, 0xe2, 0x44, 0x14, 0x41, 0xb3, 0x5d, 0x4c, 0x8d, 0xbd, 0xa8, 0xb0,
	0x01, 0xb1, 0x65, 0x6f, 0x74, 0xc8, 0x16, 0xca, 0x74, 0x21, 0x1c, 0x13, 0xeb, 0xb2, 0x46, 0xc3,
	0x1e, 0x5b, 0x9c, 0x61, 0xd6, 0x65, 0x8d, 0x86, 0xfb, 0xc1, 0xc6, 0xd0, 0x09, 0x54, 0x12, 0x4e,
	0x20, 0x61, 0x79, 0xd5, 0xf3, 0x58, 0x5e, 0xed, 0x54, 0x99, 0xd8, 0x8f, 0xa0, 0x8e, 0x5f, 0x39,
	0x86, 0xcb, 0xeb, 0x4d, 0x30, 0x79, 0x33, 0x03, 0xa7, 0x9b, 0x11, 0x94, 0x5c, 0xd5, 0x1a, 0x50,
	0x4f, 0x51, 0x54, 0xe8, 0x6f, 0xf9, 0x3f, 0x24, 0xb8, 0x94, 0x3a, 0x47, 0x6a, 0xd2, 0x1f, 0x42,
	0xc5, 0xa5, 0xa3, 0xc0, 0x9c, 0x63, 0xf7, 0xaa, 0x74, 0xa2, 0x10, 0x40, 0xa3, 0xfb, 0x30, 0xc7,
	0x4e, 0x37, 0xd8, 0x5e, 0x98, 0x66, 0xfb, 0x2c, 0xdd, 0xa3, 0x70, 0x1c, 0x89, 0x34, 0xaf, 0x38,
	0x29, 0xcd, 0x2b, 0xa5, 0xd2, 0xbc, 0x4d, 0xaa, 0x9f, 0xc7, 0x53, 0xa7, 0x40, 0x7f, 0x2e, 0xc1,
	0xe2, 0x63, 0xc3, 0x1a, 0xbc, 0xbd, 0xbb, 0xf3, 0xa9, 0xef, 0xba, 0xff, 0x24, 0x41, 0x8b, 0x88,
	0x3e, 0x9e, 0xfc, 0x86, 0x86, 0x3a, 0xe1, 0x06, 0xf3, 0xfb, 0x50, 0x36, 0x8d, 0xa1, 0x11, 0x78,
	0x90, 0xb1, 0x77, 0x14, 0x06, 0x89, 0x7e, 0x08, 0x95, 0x17, 0xb6, 0xfb, 0x52, 0x75, 0x75, 0x6e,
	0x6b, 0xe3, 0xb8, 0x0c, 0x40, 0xd1, 0x12, 0xcc, 0xc4, 0xa4, 0xce, 0x47, 0xf2, 0x16, 0x5c, 0x22,
	0xdc, 0x9f, 0xc6, 0xc3, 0xc8, 0xff, 0x28, 0xc1, 0x1a, 0xd9, 0x94, 0xd2, 0x07, 0xef, 0x74, 0x89,
	0x27, 0xb1, 0xe5, 0xc0, 0xa5, 0x04, 0xbe, 0xaa, 0xca, 0x7d, 0x8a, 0x17, 0x89, 0xa6, 0x38, 0xb5,
	0x68, 0xf2, 0x3e, 0xf2, 0x1f, 0x0a, 0x80, 0x08, 0xc3, 0x4f, 0x54, 0x5f, 0x3b, 0x8a, 0xce, 0x26,
	0xa4, 0x20, 0x4d, 0x4d, 0xe1, 0x1e, 0xcc, 0xa9, 0x23, 0xff, 0xc8, 0x76, 0x0d, 0x5f, 0xf5, 0x8d,
	0xe3, 0x69, 0x6e, 0xd0, 0xf1, 0x0d, 0x68, 0x0b, 0xca, 0xa6, 0x7a, 0x88, 0xcd, 0xa9, 0x1c, 0x25,
	0x03, 0xa5, 0xf7, 0x2e, 0xc3, 0xea, 0x79, 0xc6, 0xd7, 0x98, 0x6b, 0xe6, 0x58, 0x5e, 0x2b, 0x43,
	0xc3, 0xda, 0x37, 0xbe, 0xc6, 0x74, 0x9f, 0xfa, 0x8a, 0xed, 0x2b, 0x4f, 0xb3, 0x4f, 0x7d, 0x45,
	0xf6, 0xc9, 0xaf, 0xa0, 0x49, 0xc4, 0x95, 0x79, 0x1d, 0x38, 0x83, 0xd0, 0xde, 0x87, 0x86, 0xa6,
	0x6a, 0x47, 0x58, 0x3d, 0x34, 0x71, 0xfc, 0x0e, 0x78, 0x21, 0x9c, 0xe7, 0x0e, 0xe0, 0xef, 0x24,
	0x58, 0x26, 0xa4, 0xb3, 0x93, 0xfe, 0x77, 0xa0, 0xc2, 0x43, 0x1b, 0xd7, 0xa7, 0x19, 0x16, 0xd9,
	0x12, 0x17, 0x8f, 0x42, 0xea, 0xe2, 0xf1, 0x16, 0x75, 0xe9, 0x36, 0x33, 0x18, 0x62, 0x2b, 0xd4,
	0x68, 0x26, 0x32, 0x27, 0xff, 0x5c, 0x82, 0x32, 0xd5, 0x3c, 0x62, 0x53, 0x43, 0xf2, 0x43, 0xb0,
	0x29, 0x3a, 0xee, 0x92, 0x2b, 0x48, 0x86, 0x62, 0x55, 0xdf, 0x86, 0xf2, 0x20, 0x28, 0x85, 0x8a,
	0x53, 0x56, 0xe8, 0x6f, 0xf9, 0x23, 0xa8, 0x51, 0x8e, 0x68, 0xcc, 0xf8, 0x01, 0x30, 0x2e, 0xc2,
	0x4b, 0xfd, 0x82, 0xe8, 0x2c, 0x29, 0x9c, 0x12, 0x40, 0xc8, 0xff, 0x25, 0xc1, 0xac, 0xa8, 0x17,
	0xa9, 0xbc, 0xbf, 0x09, 0x15, 0x6f, 0x44, 0x8f, 0x2d, 0xc8, 0x12, 0xf8, 0x50, 0x2c, 0x92, 0x14,
	0xe3, 0x45, 0x12, 0xc4, 0x0b, 0x35, 0x9c, 0xc5, 0x74, 0x2d, 0xa6, 0x9c, 0xa8, 0xc5, 0x24, 0x62,
	0xf9, 0xcc, 0xa9, 0x62, 0xf9, 0xe5, 0x58, 0x61, 0xa4, 0x42, 0xe5, 0x2c, 0x16, 0x3f, 0xde, 0x40,
	0x43, 0xfc, 0x42, 0x2a, 0xa3, 0x8f, 0x61, 0xce, 0x12, 0xad, 0x81, 0x4b, 0x2a, 0x56, 0x6c, 0x13,
	0x37, 0x29, 0x71, 0xf0, 0xd3, 0x98, 0xc0, 0x53, 0x68, 0x3e, 0x75, 0xed, 0xa1, 0xcd, 0x0b, 0x01,
	0x6f, 0x21, 0xed, 0xfb, 0x02, 0x16, 0x15, 0xac, 0xea, 0xe7, 0xbf, 0xad, 0x0b, 0x2a, 0x5e, 0x8c,
	0xa9, 0xf8, 0x9f, 0xc1, 0x72, 0x8a, 0x42, 0xc8, 0xf4, 0xc7, 0x19, 0x57, 0xf5, 0x2b, 0xa2, 0xe0,
	0x32, 0x98, 0x13, 0x2f, 0xea, 0x9f, 0x40, 0x51, 0x71, 0xb4, 0x2c, 0x45, 0x73, 0xd4, 0x13, 0xd3,
	0x56, 0xc3, 0x74, 0x94, 0x0f, 0x89, 0x28, 0x8e, 0x7c, 0xdf, 0xe9, 0x11, 0xee, 0xb9, 0xa6, 0x91,
	0xf1, 0x23, 0x7c, 0x22, 0x3f, 0x87, 0xca, 0x3e, 0xf6, 0x3c, 0xf2, 0x79, 0x44, 0x1d, 0xa9, 0x52,
	0x30, 0xa4, 0x55, 0x25, 0x18, 0x46, 0x2f, 0x45, 0x05, 0xe1, 0xa5, 0x88, 0x28, 0xe4, 0x48, 0x77,
	0x7a, 0x6c, 0x25, 0x28, 0x81, 0xea, 0xce, 0x01, 0x7d, 0x46, 0xfa, 0x6d, 0x01, 0xe6, 0x62, 0x9f,
	0xf0, 0x16, 0xa5, 0x4b, 0xf8, 0x39, 0x26, 0x16, 0xcd, 0x3d, 0x11, 0x1b, 0x88, 0xa5, 0x93, 0x72,
	0xac, 0x74, 0x82, 0x6e, 0xc0, 0x05, 0x07, 0xbb, 0x43, 0x83, 0x7e, 0x67, 0xcf, 0xc5, 0xaa, 0xce,
	0x13, 0xe5, 0xf9, 0x68, 0x9a, 0xc8, 0x9c, 0x68, 0xa5, 0x00, 0xf8, 0xd2, 0x35, 0x7c, 0x56, 0xa1,
	0x2c, 0x2b, 0x02, 0x82, 0xcf, 0xc8, 0xf4, 0xff, 0x5f, 0xf6, 0x2c, 0xbf, 0x84, 0x46, 0x4c, 0xb2,
	0xdb, 0xda, 0xe0, 0x6d, 0x16, 0x9a, 0x44, 0xb1, 0x97, 0x62, 0x4a, 0xdd, 0x81, 0x85, 0x24, 0x61,
	0x0f, 0xdd, 0x86, 0x92, 0xaa, 0x0d, 0x02, 0x35, 0x5e, 0x15, 0xd5, 0x38, 0x09, 0xac, 0x50, 0x48,
	0xb9, 0x03, 0xf3, 0x71, 0xbb, 0x40, 0x77, 0xa0, 0xc2, 0xb4, 0x3b, 0x40, 0xb3, 0x9c, 0x8b, 0x46,
	0x09, 0x20, 0xe5, 0x2f, 0x12, 0xdc, 0x50, 0xb7, 0x74, 0x16, 0x4c, 0x42, 0x64, 0x2b, 0xc4, 0x22,
	0xdb, 0xef, 0x0a, 0x70, 0xf1, 0x19, 0x95, 0x3b, 0x4f, 0x90, 0x03, 0x03, 0x16, 0xaf, 0x77, 0xd2,
	0xa9, 0xae, 0x77, 0x7f, 0x04, 0xb3, 0xba, 0xe1, 0x39, 0xa6, 0x7a, 0xd2, 0xa3, 0xbb, 0x0b, 0x53,
	0xec, 0xae, 0xf3, 0x1d, 0x7b, 0x2a, 0xd5, 0x1c, 0xb1, 0x72, 0x33, 0x4d, 0xd4, 0x13, 0xea, 0x3a,
	0x1f, 0x0a, 0xd5, 0xa2, 0xd2, 0x14, 0x5b, 0xc3, 0x5a, 0xd2, 0x47, 0x50, 0x35, 0x6d, 0xe6, 0xba,
	0x79, 0xde, 0x34, 0xe1, 0x83, 0x03, 0x68, 0xb2, 0x93, 0xa8, 0xf8, 0xd7, 0xb6, 0x15, 0x44, 0xa5,
	0x09, 0x3b, 0x03, 0x68, 0xf9, 0x5f, 0x0a, 0x80, 0x98, 0xf4, 0xa7, 0xbc, 0xfc, 0x10, 0x55, 0x9c,
	0x5a, 0xa8, 0xac, 0xc0, 0xf6, 0x71, 0xbc, 0xc0, 0x56, 0x9c, 0xea, 0x34, 0x84, 0xf2, 0xdb, 0x99,
	0x05, 0x1a, 0x3f, 0xc6, 0xf2, 0xe9, 0x8e, 0x31, 0x28, 0xcf, 0xcd, 0x4c, 0x57, 0x9e, 0x93, 0x7f,
	0x51, 0x82, 0x12, 0xad, 0x45, 0x25, 0x23, 0x86, 0xf8, 0x82, 0x53, 0x48, 0xbc, 0xe0, 0x5c, 0x4d,
	0x68, 0x6a, 0x91, 0x17, 0x1f, 0x05, 0x5d, 0x9c, 0xf0, 0x36, 0x30, 0xbe, 0x36, 0x19, 0xea, 0x13,
	0xaf, 0x4d, 0x86, 0x1a, 0xd3, 0x12, 0x34, 0x86, 0x97, 0x2c, 0x82, 0x71, 0xac, 0x9c, 0x51, 0x4d,
	0x94, 0x33, 0xae, 0x40, 0x5d, 0x28, 0xce, 0x52, 0x9f, 0x5a, 0x53, 0x20, 0xaa, 0xcd, 0x92, 0x78,
	0xc5, 0x24, 0x45, 0x96, 0x81, 0xed, 0x66, 0x13, 0x5d, 0x1d, 0xbd, 0x0b, 0x73, 0x7d, 0x75, 0x88,
	0x35, 0xfa, 0xba, 0x4a, 0x00, 0xea, 0xac, 0xd1, 0x22, 0x9a, 0x64, 0x29, 0x85, 0xe7, 0x63, 0x95,
	0xf6, 0xd0, 0xcc, 0xf2, 0x5c, 0x8e, 0x8c, 0xbb, 0xf4, 0x3a, 0x69, 0x5b, 0xa6, 0x61, 0xe1, 0xe6,
	0x1c, 0x8d, 0x9d, 0x7c, 0x94, 0x28, 0x8d, 0xce, 0x27, 0x4b, 0xa3, 0x89, 0x28, 0x72, 0xe1, 0x3c,
	0x51, 0xa4, 0x71, 0xaa, 0x28, 0xf2, 0x3b, 0x09, 0xe6, 0xc2, 0x9c, 0x3d, 0xa8, 0x7e, 0x52, 0xbf,
	0x4f, 0xcd, 0x29, 0xb3, 0xfa, 0x19, 0x83, 0x8f, 0x46, 0x0a, 0x8c, 0xc2, 0xe4, 0xbf, 0xf5, 0x6b,
	0x09, 0x6a, 0xe1, 0x0a, 0xba, 0x01, 0x65, 0x8a, 0x8e, 0xbb, 0xc9, 0x85, 0x54, 0x2d, 0x55, 0x61,
	0xeb, 0xdf, 0x77, 0x01, 0xb4, 0x0d, 0x65, 0x9a, 0x47, 0xa2, 0xf7, 0xa0, 0x2c, 0x16, 0x7b, 0xd3,
	0xf5, 0x59, 0xb6, 0x2c, 0x7f, 0x5b, 0x80, 0x35, 0x1a, 0xf8, 0xcf, 0xf9, 0xb6, 0x84, 0xfe, 0x14,
	0x66, 0x58, 0x45, 0x89, 0xbb, 0xa9, 0x7b, 0x22, 0xc5, 0xb1, 0x14, 0xd2, 0xe5, 0x26, 0x0a, 0xae,
	0x70, 0x7c, 0xad, 0x17, 0xb0, 0x94, 0x0d, 0x11, 0x15, 0x15, 0xa5, 0xbc, 0xa2, 0x62, 0x21, 0x51,
	0x54, 0x14, 0x0d, 0xad, 0x18, 0x37, 0x34, 0xf9, 0x2f, 0x0a, 0x80, 0x28, 0xde, 0xf3, 0xe6, 0x77,
	0x61, 0x1a, 0x57, 0xcc, 0x49, 0xe3, 0x4a, 0xf1, 0xc4, 0x64, 0x37, 0x9d, 0xc6, 0x4d, 0x71, 0x89,
	0x4f, 0xe6, 0x78, 0x0f, 0x32, 0x72, 0xbc, 0x99, 0xc9, 0x68, 0x92, 0x09, 0xa0, 0xfc, 0x1c, 0x5a,
	0x69, 0x29, 0x78, 0x51, 0x8a, 0x90, 0x48, 0x44, 0x2e, 0xa7, 0xce, 0x39, 0x3b, 0x1b, 0xd9, 0xfa,
	0xd7, 0x5b, 0x30, 0xb3, 0x47, 0x41, 0xd1, 0x67, 0x00, 0x51, 0x2f, 0x16, 0x8a, 0x77, 0x84, 0x24,
	0x7b, 0xb4, 0x5a, 0x4b, 0x29, 0xee, 0x3b, 0x43, 0xc7, 0x3f, 0x91, 0xd1, 0x4f, 0xfe, 0xfd, 0xbf,
	0xff, 0xb2, 0x30, 0x2b, 0x43, 0xfb, 0x78, 0xab, 0xcd, 0x1e, 0xc3, 0x90, 0x05, 0x73, 0xb1, 0xfe,
	0x2c, 0xb4, 0x9e, 0xc0, 0x9d, 0xba, 0x69, 0xe5, 0xa2, 0x7f, 0x97, 0xa2, 0x5f, 0x93, 0x9b, 0x04,
	0x3d, 0xb5, 0xe5, 0xf6, 0xeb, 0x20, 0x40, 0xbf, 0x69, 0xab, 0xba, 0x7e, 0x57, 0xda, 0x40, 0x3f,
	0x91, 0x00, 0xa5, 0x3b, 0xb8, 0xd0, 0xf5, 0x18, 0xd5, 0xbc, 0x0e, 0xaf, 0xd6, 0x62, 0x2c, 0x87,
	0x63, 0xb7, 0x15, 0xf9, 0x36, 0xa5, 0xbb, 0x21, 0x5f, 0x21, 0x74, 0x79, 0xbd, 0xb2, 0xad, 0x0a,
	0x38, 0xda, 0xac, 0xbd, 0xf1, 0x6e, 0x58, 0xcc, 0x4c, 0x32, 0xc1, 0xbb, 0x11, 0x73, 0x99, 0x88,
	0xf5, 0x70, 0x9d, 0x95, 0x09, 0xd6, 0x7f, 0x19, 0x31, 0xf1, 0x0d, 0x2c, 0xa4, 0x9a, 0xb0, 0xd0,
	0xb5, 0x3c, 0x16, 0xc4, 0x1e, 0xad, 0x6c, 0x0e, 0xda, 0x94, 0x83, 0xf7, 0xe5, 0xcb, 0xb9, 0x1c,
	0xd0, 0xee, 0xc9, 0x88, 0x81, 0x6f, 0x25, 0xb8, 0x98, 0xd5, 0x65, 0x85, 0x6e, 0xe4, 0x31, 0x91,
	0xa8, 0x25, 0x67, 0xf3, 0xb1, 0x45, 0xf9, 0xf8, 0x40, 0xbe, 0x9a, 0xcb, 0x47, 0x10, 0x89, 0x23,
	0x56, 0x7e, 0x26, 0xc1, 0x52, 0x76, 0x57, 0x14, 0x7a, 0x3f, 0x8f, 0x99, 0x54, 0xe7, 0x54, 0x36,
	0x3b, 0x3f, 0xa4, 0xec, 0x6c, 0xca, 0xef, 0xe6, 0xb2, 0x13, 0x05, 0xf6, 0x7c, 0x0d, 0xe1, 0xed,
	0x94, 0xb9, 0x1a, 0x12, 0xeb, 0x8d, 0x3a, 0xab, 0x86, 0x30, 0xb3, 0xca, 0xd5, 0x10, 0xd6, 0xab,
	0x99, 0xab, 0x21, 0x62, 0xef, 0xd3, 0x59, 0x35, 0x84, 0xe6, 0x30, 0x11, 0x03, 0x2a, 0xcc, 0x8a,
	0xdd, 0x4b, 0x28, 0x56, 0x9a, 0xc8, 0xe8, 0x6b, 0xca, 0x75, 0x0d, 0x4d, 0x4a, 0x19, 0xc9, 0x8d,
	0xc8, 0xf3, 0xb4, 0x0f, 0xc9, 0x7e, 0xf4, 0x1c, 0xea, 0x42, 0xf3, 0x0a, 0x8a, 0xf9, 0xc6, 0x74,
	0x57, 0x4b, 0x2b, 0x9d, 0x36, 0xc8, 0x17, 0x29, 0xee, 0x79, 0xb9, 0x16, 0xba, 0x1d, 0xe2, 0x67,
	0x7e, 0x0c, 0x73, 0xb1, 0xd6, 0x93, 0xb8, 0x5f, 0xcb, 0xea, 0x4a, 0x99, 0xe4, 0x36, 0x37, 0x44,
	0xb7, 0xa9, 0x41, 0x5d, 0xe8, 0x48, 0x89, 0xb3, 0x9d, 0x6e, 0x55, 0xc9, 0x45, 0xbd, 0x4a, 0x51,
	0x2f, 0x6d, 0x5c, 0xcc, 0x72, 0x99, 0xe8, 0xa7, 0x12, 0xbc, 0x93, 0xd3, 0xc6, 0x82, 0x36, 0xd2,
	0x14, 0xf3, 0xb2, 0x85, 0x5c, 0xea, 0x37, 0x29, 0x75, 0x79, 0x63, 0x9d, 0x50, 0x17, 0x72, 0x93,
	0xf6, 0xeb, 0x78, 0xfa, 0xf2, 0x06, 0xd9, 0xb0, 0x98, 0xd1, 0x06, 0x83, 0xde, 0x4b, 0x33, 0x91,
	0x55, 0x18, 0x9f, 0xa4, 0x16, 0x1b, 0x54, 0x2d, 0xc4, 0xaa, 0x20, 0x3a, 0x0e, 0x3a, 0x87, 0x12,
	0xf5, 0x81, 0x1b, 0x13, 0xfa, 0x58, 0x26, 0x92, 0x5c, 0xa3, 0x24, 0xdf, 0x69, 0x21, 0x42, 0xd2,
	0x63, 0x5b, 0xdb, 0x3a, 0x45, 0x44, 0xd4, 0x66, 0x0f, 0xe0, 0x21, 0xf6, 0x83, 0x9e, 0xfd, 0x1c,
	0x24, 0x71, 0xeb, 0xe2, 0xc0, 0xf2, 0x22, 0xc5, 0x3c, 0x87, 0xea, 0x82, 0x75, 0xa1, 0xc7, 0x50,
	0x0d, 0x5a, 0x4d, 0x50, 0xec, 0xa1, 0x2d, 0xd1, 0x80, 0x12, 0x57, 0x6c, 0xba, 0x22, 0x37, 0x28,
	0x42, 0x40, 0x55, 0x82, 0x90, 0xf6, 0x06, 0xec, 0x43, 0xfd, 0x8f, 0xb1, 0x6a, 0xfa, 0x47, 0xda,
	0x11, 0xd6, 0x06, 0xb9, 0xec, 0xe5, 0x7d, 0x3b, 0xb7, 0x14, 0x34, 0xdb, 0x3e, 0x12, 0xb0, 0x7c,
	0x03, 0x97, 0x32, 0x1b, 0x00, 0xd0, 0x4d, 0x91, 0xa5, 0x71, 0x3d, 0x02, 0xb9, 0x04, 0xaf, 0x51,
	0x82, 0x97, 0xe5, 0x45, 0xc1, 0xec, 0xd3, 0xce, 0xbf, 0x0f, 0xb5, 0xf0, 0xe1, 0x1f, 0xc5, 0xca,
	0x46, 0xc9, 0x7e, 0x80, 0x89, 0x84, 0x96, 0x33, 0x53, 0x8f, 0x2f, 0x6d, 0xc3, 0x22, 0x87, 0xfb,
	0x15, 0xcc, 0xc7, 0x5b, 0x06, 0x50, 0xac, 0x2d, 0x2a, 0xb3, 0x9d, 0xe0, 0x8c, 0x24, 0x07, 0x86,
	0x36, 0x20, 0x24, 0xbf, 0x04, 0x88, 0x5e, 0x6d, 0x51, 0xf2, 0xc9, 0xf8, 0x78, 0x3a, 0x2f, 0x71,
	0x9d, 0x92, 0xba, 0x22, 0xb7, 0x32, 0x49, 0x99, 0x04, 0x0f, 0xa1, 0xa5, 0x01, 0x3c, 0x36, 0xac,
	0x01, 0xcf, 0xa8, 0xf2, 0x7b, 0xdf, 0x73, 0xe9, 0xc8, 0x94, 0xce, 0xaa, 0xfc, 0x8e, 0x18, 0x1f,
	0x4c, 0xc3, 0x1a, 0x04, 0x09, 0x54, 0x44, 0x84, 0x67, 0x4c, 0xf9, 0xdd, 0xeb, 0x67, 0x20, 0xc2,
	0x13, 0x24, 0x69, 0x03, 0x7d, 0x01, 0x35, 0x42, 0x84, 0xa5, 0x44, 0xb9, 0xfd, 0xe7, 0xb9, 0x24,
	0xae, 0x52, 0x12, 0x2b, 0xf2, 0x52, 0x8a, 0x04, 0xcb, 0x80, 0xa4, 0x0d, 0xe4, 0xc1, 0xac, 0xf8,
	0x38, 0x1e, 0x8f, 0x6c, 0x19, 0xcf, 0xe6, 0xb9, 0xb4, 0x36, 0x28, 0xad, 0x6b, 0x4c, 0x0d, 0x62,
	0xb4, 0xd2, 0x8a, 0x6e, 0xc3, 0x3c, 0x41, 0x2d, 0x24, 0x37, 0xe3, 0x5b, 0xbb, 0x73, 0x89, 0xbe,
	0x47, 0x89, 0xae, 0xcb, 0x2b, 0x29, 0xa2, 0x42, 0x2e, 0x13, 0x1d, 0x16, 0x4f, 0x5e, 0xf2, 0x1b,
	0xb4, 0xcf, 0x70, 0x58, 0x3c, 0x57, 0x89, 0x0e, 0x8b, 0x65, 0x27, 0xb9, 0x2d, 0xd6, 0x67, 0x38,
	0x2c, 0x96, 0x8c, 0x48, 0x1b, 0xe8, 0x1b, 0x58, 0xcc, 0x68, 0x23, 0x88, 0x47, 0x9f, 0xfc, 0x3e,
	0x83, 0xd6, 0xe5, 0xfc, 0x46, 0x5c, 0xb2, 0x4b, 0x5e, 0xa7, 0x1c, 0xb4, 0x10, 0xbd, 0xb7, 0xf0,
	0xfe, 0x83, 0xf6, 0xeb, 0xa8, 0x35, 0xe1, 0x0d, 0xda, 0x83, 0x3a, 0x81, 0x0c, 0x1c, 0xe3, 0x54,
	0x61, 0x81, 0x03, 0x07, 0xd9, 0x03, 0x12, 0xb3, 0x87, 0xaf, 0x88, 0x22, 0x88, 0x9d, 0x05, 0x71,
	0x47, 0x94, 0xd9, 0x75, 0xd0, 0x5a, 0xce, 0xed, 0x3e, 0x0b, 0x64, 0x88, 0xb2, 0x7d, 0x11, 0x0d,
	0x1d, 0x3f, 0x97, 0x60, 0x29, 0xbb, 0x31, 0x21, 0x9e, 0x61, 0x8f, 0x6d, 0x5e, 0x68, 0x5d, 0x1d,
	0xdb, 0xf3, 0x42, 0x79, 0xe1, 0x49, 0x05, 0x9a, 0x9c, 0x54, 0x7c, 0xc6, 0xa4, 0xca, 0x3b, 0x0f,
	0xe2, 0x39, 0x54, 0xba, 0x25, 0xa1, 0x75, 0x29, 0xf5, 0xf4, 0x4a, 0xe9, 0x2d, 0x50, 0x7a, 0x75,
	0x44, 0xd3, 0x3f, 0xfa, 0x14, 0x8b, 0xbe, 0x82, 0x85, 0xd4, 0x1b, 0x7d, 0x3c, 0x6f, 0xce, 0x7b,
	0xc2, 0x6f, 0xad, 0xe6, 0xbd, 0x5a, 0x52, 0x5a, 0x3c, 0x5f, 0x41, 0xe9, 0x7c, 0xe5, 0x57, 0x12,
	0x6b, 0xa3, 0x48, 0xa4, 0x2b, 0xd7, 0x93, 0x44, 0xb3, 0x93, 0x95, 0xb5, 0xdc, 0xa7, 0x09, 0x4a,
	0xf6, 0x01, 0x25, 0x7b, 0x8f, 0x29, 0x68, 0x90, 0xb3, 0xbc, 0x8e, 0x0a, 0x2a, 0x6f, 0x3e, 0xbf,
	0x86, 0xe4, 0xbc, 0xb5, 0xf6, 0x6b, 0xfe, 0x84, 0xf3, 0x06, 0x39, 0x4c, 0xed, 0xa2, 0xf7, 0xf9,
	0xb4, 0xda, 0xa5, 0xde, 0xee, 0xe3, 0x6a, 0x17, 0x2b, 0xfb, 0xc5, 0x0d, 0x87, 0x50, 0x89, 0x68,
	0x31, 0x2d, 0x44, 0x5f, 0xc3, 0x42, 0xea, 0xc1, 0x36, 0x7e, 0x12, 0x79, 0xef, 0xb9, 0xb9, 0xfe,
	0xe2, 0x06, 0x25, 0x7a, 0x55, 0x5e, 0xcd, 0xd4, 0x75, 0x87, 0xa1, 0x23, 0x5e, 0xc3, 0x06, 0x94,
	0x7e, 0x78, 0x8d, 0x9f, 0x48, 0xee, 0xc3, 0x6c, 0xab, 0x95, 0x7b, 0x22, 0x9e, 0xbc, 0x44, 0x39,
	0x68, 0xc8, 0x75, 0x41, 0xe4, 0x84, 0xe0, 0xe7, 0x50, 0x51, 0x1c, 0xed, 0xc1, 0xc8, 0xd2, 0xd0,
	0x85, 0x18, 0x15, 0x47, 0x6b, 0x25, 0x27, 0xe4, 0x5b, 0x14, 0xc9, 0x0d, 0x79, 0x96, 0x20, 0x71,
	0x1d, 0xad, 0xfd, 0xda, 0xd0, 0xdf, 0xdc, 0x0d, 0xde, 0x69, 0x3f, 0x27, 0x49, 0x9a, 0xb0, 0x80,
	0xfa, 0x30, 0xfb, 0xcc, 0x32, 0xcf, 0x15, 0xdd, 0x63, 0x09, 0x4b, 0xe0, 0x68, 0x47, 0x56, 0x22,
	0xbe, 0x87, 0x84, 0xce, 0x1e, 0xe1, 0xc7, 0x11, 0x8a, 0x62, 0xbc, 0x0e, 0x75, 0x46, 0xe8, 0xac,
	0x51, 0x3e, 0x56, 0x6e, 0x4a, 0x90, 0x09, 0xe3, 0xfc, 0x10, 0xe6, 0x19, 0x95, 0x30, 0xd2, 0x8f,
	0x6b, 0x77, 0x3b, 0x5d, 0xc0, 0xe5, 0xb4, 0xc2, 0x38, 0x4f, 0xd3, 0x8a, 0x06, 0x23, 0x77, 0xfe,
	0x18, 0xcf, 0xfd, 0xa8, 0xbc, 0x96, 0x41, 0x32, 0x1e, 0xe5, 0xc3, 0x23, 0x3b, 0x7b, 0x9c, 0x1f,
	0x77, 0x64, 0x51, 0xa4, 0x0f, 0x8f, 0xec, 0xac, 0xb1, 0x7e, 0xdc, 0x91, 0x85, 0xd1, 0x5e, 0x85,
	0xb9, 0xd8, 0x53, 0x6b, 0xfc, 0xe6, 0x9e, 0xf5, 0x0a, 0x9b, 0x4b, 0x8f, 0x5b, 0x6a, 0x4b, 0xbc,
	0x92, 0x11, 0x12, 0x2f, 0xa0, 0x2e, 0xbc, 0x27, 0xc6, 0x23, 0x4f, 0xfa, 0xa1, 0x31, 0x17, 0xfd,
	0x15, 0x8a, 0x7e, 0xb9, 0x95, 0x79, 0x7b, 0x27, 0x74, 0xfe, 0x4a, 0x82, 0xa5, 0xec, 0x42, 0x7e,
	0x3c, 0xe8, 0x8e, 0x2d, 0xf6, 0xb7, 0xc6, 0x37, 0x9a, 0x86, 0x75, 0xa5, 0x89, 0x01, 0xf7, 0x2e,
	0x7f, 0x1e, 0x40, 0x3e, 0x2c, 0x66, 0xd4, 0xab, 0xe3, 0xf9, 0x54, 0x7e, 0x41, 0x7b, 0x4c, 0xb4,
	0xda, 0xd6, 0x06, 0x5e, 0x5c, 0xe8, 0x91, 0x7b, 0xbc, 0xff, 0x37, 0x85, 0x5f, 0x6c, 0xff, 0xa7,
	0x84, 0x46, 0x30, 0xc7, 0x6a, 0xda, 0xeb, 0xdb, 0x4f, 0xbb, 0xeb, 0xc7, 0x5b, 0x72, 0x0f, 0xae,
	0x1e, 0x1c, 0xe1, 0xf5, 0x60, 0x92, 0x36, 0x75, 0x79, 0xeb, 0xef, 0xad, 0xef, 0xd8, 0x96, 0xef,
	0x1a, 0x87, 0x23, 0xdf, 0x26, 0x31, 0xe3, 0xc8, 0xf7, 0x1d, 0xef, 0x6e, 0xbb, 0xdd, 0x37, 0xfc,
	0xa3, 0xd1, 0xe1, 0xa6, 0x66, 0x0f, 0xdb, 0x47, 0xd8, 0xb5, 0x0d, 0xcd, 0x54, 0x0f, 0xbd, 0x36,
	0x63, 0xa8, 0x75, 0xf1, 0x08, 0x9b, 0xa6, 0x7d, 0x2f, 0x5a, 0x20, 0x70, 0x5b, 0xc5, 0xad, 0xcd,
	0xdb, 0x1b, 0x92, 0xb4, 0xd5, 0x50, 0x1d, 0xc7, 0xe4, 0x01, 0xbb, 0xfd, 0xa5, 0x67, 0x5b, 0x77,
	0x53, 0x33, 0xee, 0x5d, 0x58, 0xe1, 0x8c, 0x78, 0xd8, 0x3d, 0xc6, 0xee, 0xba, 0x6e, 0x6b, 0xa3,
	0x21, 0xb6, 0xd8, 0xdf, 0xf5, 0xa3, 0x95, 0x80, 0x8d, 0x38, 0x89, 0xb6, 0x6e, 0x6b, 0x1e, 0x2c,
	0x6b, 0xf6, 0x70, 0x53, 0x58, 0x88, 0xa4, 0x74, 0xbf, 0xc6, 0x90, 0x6e, 0x3b, 0xc6, 0x53, 0xe9,
	0xf3, 0xa2, 0xea, 0x18, 0xbf, 0x2a, 0x94, 0xf6, 0x1e, 0x3d, 0xbd, 0xff, 0xf7, 0x05, 0x5e, 0xe0,
	0x3f, 0x9c, 0xa1, 0xba, 0x75, 0xe7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xbc, 0x66, 0x2e,
	0xf8, 0x40, 0x00, 0x00,
}
