// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package migrate

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("./sql", "20180103142001_initial_schema.sql", "\"\"")
	packr.PackJSONBytes("./sql", "20180805174141-tournaments.sql", "\"LyoKICogQ29weXJpZ2h0IDIwMTggVGhlIE5ha2FtYSBBdXRob3JzCiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogKgogKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAogKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICovCgotLSBOT1RFOiBUaGlzIG1pZ3JhdGlvbiBtYW51YWxseSBjb21taXRzIGluIHNlcGFyYXRlIHRyYW5zYWN0aW9ucyB0byBlbnN1cmUKLS0gdGhlIHNjaGVtYSB1cGRhdGVzIGFyZSBzZXF1ZW5jZWQgYmVjYXVzZSBjb2Nrcm9hY2hkYiBkb2VzIG5vdCBzdXBwb3J0Ci0tIGFkZGluZyBDSEVDSyBjb25zdHJhaW50cyB2aWEgIkFMVEVSIFRBQkxFIC4uLiBBREQgQ09MVU1OIiBzdGF0ZW1lbnRzLgoKLS0gK21pZ3JhdGUgVXAgbm90cmFuc2FjdGlvbgpCRUdJTjsKQUxURVIgVEFCTEUgbGVhZGVyYm9hcmQKICBBREQgQ09MVU1OIGNhdGVnb3J5ICAgICAgU01BTExJTlQgICAgIERFRkFVTFQgMCBOT1QgTlVMTCwKICBBREQgQ09MVU1OIGRlc2NyaXB0aW9uICAgVkFSQ0hBUigyNTUpIERFRkFVTFQgJycgTk9UIE5VTEwsCiAgQUREIENPTFVNTiBkdXJhdGlvbiAgICAgIElOVCAgICAgICAgICBERUZBVUxUIDAgTk9UIE5VTEwsIC0tIGluIHNlY29uZHMuCiAgQUREIENPTFVNTiBlbmRfdGltZSAgICAgIFRJTUVTVEFNUFRaICBERUZBVUxUICcxOTcwLTAxLTAxIDAwOjAwOjAwIFVUQycgTk9UIE5VTEwsCiAgQUREIENPTFVNTiBqb2luX3JlcXVpcmVkIEJPT0xFQU4gICAgICBERUZBVUxUIEZBTFNFIE5PVCBOVUxMLAogIEFERCBDT0xVTU4gbWF4X3NpemUgICAgICBJTlQgICAgICAgICAgREVGQVVMVCAxMDAwMDAwMDAgTk9UIE5VTEwsCiAgQUREIENPTFVNTiBtYXhfbnVtX3Njb3JlIElOVCAgICAgICAgICBERUZBVUxUIDEwMDAwMDAgTk9UIE5VTEwsIC0tIG1heCBhbGxvd2VkIHNjb3JlIGF0dGVtcHRzLgogIEFERCBDT0xVTU4gdGl0bGUgICAgICAgICBWQVJDSEFSKDI1NSkgREVGQVVMVCAnJyBOT1QgTlVMTCwKICBBREQgQ09MVU1OIHNpemUgICAgICAgICAgSU5UICAgICAgICAgIERFRkFVTFQgMCBOT1QgTlVMTCwKICBBREQgQ09MVU1OIHN0YXJ0X3RpbWUgICAgVElNRVNUQU1QVFogIERFRkFVTFQgbm93KCkgTk9UIE5VTEw7CgpBTFRFUiBUQUJMRSBsZWFkZXJib2FyZF9yZWNvcmQKICBBREQgQ09MVU1OIG1heF9udW1fc2NvcmUgSU5UIERFRkFVTFQgMTAwMDAwMCBOT1QgTlVMTDsKQ09NTUlUOwoKQkVHSU47CkFMVEVSIFRBQkxFIGxlYWRlcmJvYXJkCiAgQUREIENPTlNUUkFJTlQgY2hlY2tfY2F0ZWdvcnkgQ0hFQ0sgKGNhdGVnb3J5ID49IDApLAogIEFERCBDT05TVFJBSU5UIGNoZWNrX2R1cmF0aW9uIENIRUNLIChkdXJhdGlvbiA+PSAwKSwKICBBREQgQ09OU1RSQUlOVCBjaGVja19tYXhfc2l6ZSBDSEVDSyAobWF4X3NpemUgPiAwKSwKICBBREQgQ09OU1RSQUlOVCBjaGVja19tYXhfbnVtX3Njb3JlIENIRUNLIChtYXhfbnVtX3Njb3JlID4gMCk7CgpDUkVBVEUgSU5ERVggSUYgTk9UIEVYSVNUUyBkdXJhdGlvbl9zdGFydF90aW1lX2VuZF90aW1lX2NhdGVnb3J5X2lkeCBPTiBsZWFkZXJib2FyZCAoZHVyYXRpb24sIHN0YXJ0X3RpbWUsIGVuZF90aW1lIERFU0MsIGNhdGVnb3J5KTsKCkNSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTIG93bmVyX2lkX2V4cGlyeV90aW1lX2xlYWRlcmJvYXJkX2lkX2lkeCBPTiBsZWFkZXJib2FyZF9yZWNvcmQgKG93bmVyX2lkLCBleHBpcnlfdGltZSwgbGVhZGVyYm9hcmRfaWQpOwoKQUxURVIgVEFCTEUgbGVhZGVyYm9hcmRfcmVjb3JkCiAgQUREIENPTlNUUkFJTlQgY2hlY2tfbWF4X251bV9zY29yZSBDSEVDSyAobWF4X251bV9zY29yZSA+IDApOwpDT01NSVQ7CgpBTFRFUiBUQUJMRSBsZWFkZXJib2FyZAogIFZBTElEQVRFIENPTlNUUkFJTlQgY2hlY2tfY2F0ZWdvcnksCiAgVkFMSURBVEUgQ09OU1RSQUlOVCBjaGVja19kdXJhdGlvbiwKICBWQUxJREFURSBDT05TVFJBSU5UIGNoZWNrX21heF9zaXplLAogIFZBTElEQVRFIENPTlNUUkFJTlQgY2hlY2tfbWF4X251bV9zY29yZTsKCkFMVEVSIFRBQkxFIGxlYWRlcmJvYXJkX3JlY29yZAogIFZBTElEQVRFIENPTlNUUkFJTlQgY2hlY2tfbWF4X251bV9zY29yZTsKCi0tICttaWdyYXRlIERvd24KRFJPUCBJTkRFWCBJRiBFWElTVFMgZHVyYXRpb25fc3RhcnRfdGltZV9lbmRfdGltZV9jYXRlZ29yeV9pZHg7CkFMVEVSIFRBQkxFIElGIEVYSVNUUyBsZWFkZXJib2FyZAogIERST1AgQ09MVU1OIElGIEVYSVNUUyBjYXRlZ29yeSwKICBEUk9QIENPTFVNTiBJRiBFWElTVFMgZGVzY3JpcHRpb24sCiAgRFJPUCBDT0xVTU4gSUYgRVhJU1RTIGR1cmF0aW9uLAogIERST1AgQ09MVU1OIElGIEVYSVNUUyBlbmRfdGltZSwKICBEUk9QIENPTFVNTiBJRiBFWElTVFMgam9pbl9yZXF1aXJlZCwKICBEUk9QIENPTFVNTiBJRiBFWElTVFMgbWF4X3NpemUsCiAgRFJPUCBDT0xVTU4gSUYgRVhJU1RTIG1heF9udW1fc2NvcmUsCiAgRFJPUCBDT0xVTU4gSUYgRVhJU1RTIHRpdGxlLAogIERST1AgQ09MVU1OIElGIEVYSVNUUyBzaXplLAogIERST1AgQ09MVU1OIElGIEVYSVNUUyBzdGFydF90aW1lOwoKRFJPUCBJTkRFWCBJRiBFWElTVFMgb3duZXJfaWRfZXhwaXJ5X3RpbWVfbGVhZGVyYm9hcmRfaWRfaWR4OwoKQUxURVIgVEFCTEUgSUYgRVhJU1RTIGxlYWRlcmJvYXJkX3JlY29yZAogIERST1AgQ09MVU1OIElGIEVYSVNUUyBtYXhfbnVtX3Njb3JlOwo=\"")
}
