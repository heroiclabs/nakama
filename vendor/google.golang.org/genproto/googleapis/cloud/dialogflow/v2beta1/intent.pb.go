// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/dialogflow/v2beta1/intent.proto

package dialogflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_longrunning "google.golang.org/genproto/googleapis/longrunning"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf3 "google.golang.org/genproto/protobuf/field_mask"
import google_protobuf4 "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Represents the options for views of an intent.
// An intent can be a sizable object. Therefore, we provide a resource view that
// does not return training phrases in the response by default.
type IntentView int32

const (
	// Training phrases field is not populated in the response.
	IntentView_INTENT_VIEW_UNSPECIFIED IntentView = 0
	// All fields are populated.
	IntentView_INTENT_VIEW_FULL IntentView = 1
)

var IntentView_name = map[int32]string{
	0: "INTENT_VIEW_UNSPECIFIED",
	1: "INTENT_VIEW_FULL",
}
var IntentView_value = map[string]int32{
	"INTENT_VIEW_UNSPECIFIED": 0,
	"INTENT_VIEW_FULL":        1,
}

func (x IntentView) String() string {
	return proto.EnumName(IntentView_name, int32(x))
}
func (IntentView) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

// Represents the different states that webhooks can be in.
type Intent_WebhookState int32

const (
	// Webhook is disabled in the agent and in the intent.
	Intent_WEBHOOK_STATE_UNSPECIFIED Intent_WebhookState = 0
	// Webhook is enabled in the agent and in the intent.
	Intent_WEBHOOK_STATE_ENABLED Intent_WebhookState = 1
	// Webhook is enabled in the agent and in the intent. Also, each slot
	// filling prompt is forwarded to the webhook.
	Intent_WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING Intent_WebhookState = 2
)

var Intent_WebhookState_name = map[int32]string{
	0: "WEBHOOK_STATE_UNSPECIFIED",
	1: "WEBHOOK_STATE_ENABLED",
	2: "WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING",
}
var Intent_WebhookState_value = map[string]int32{
	"WEBHOOK_STATE_UNSPECIFIED":              0,
	"WEBHOOK_STATE_ENABLED":                  1,
	"WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING": 2,
}

func (x Intent_WebhookState) String() string {
	return proto.EnumName(Intent_WebhookState_name, int32(x))
}
func (Intent_WebhookState) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

// Represents different types of training phrases.
type Intent_TrainingPhrase_Type int32

const (
	// Not specified. This value should never be used.
	Intent_TrainingPhrase_TYPE_UNSPECIFIED Intent_TrainingPhrase_Type = 0
	// Examples do not contain @-prefixed entity type names, but example parts
	// can be annotated with entity types.
	Intent_TrainingPhrase_EXAMPLE Intent_TrainingPhrase_Type = 1
	// Templates are not annotated with entity types, but they can contain
	// @-prefixed entity type names as substrings.
	Intent_TrainingPhrase_TEMPLATE Intent_TrainingPhrase_Type = 2
)

var Intent_TrainingPhrase_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "EXAMPLE",
	2: "TEMPLATE",
}
var Intent_TrainingPhrase_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED": 0,
	"EXAMPLE":          1,
	"TEMPLATE":         2,
}

func (x Intent_TrainingPhrase_Type) String() string {
	return proto.EnumName(Intent_TrainingPhrase_Type_name, int32(x))
}
func (Intent_TrainingPhrase_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 0, 0}
}

// Represents different platforms that a rich message can be intended for.
type Intent_Message_Platform int32

const (
	// Not specified.
	Intent_Message_PLATFORM_UNSPECIFIED Intent_Message_Platform = 0
	// Facebook.
	Intent_Message_FACEBOOK Intent_Message_Platform = 1
	// Slack.
	Intent_Message_SLACK Intent_Message_Platform = 2
	// Telegram.
	Intent_Message_TELEGRAM Intent_Message_Platform = 3
	// Kik.
	Intent_Message_KIK Intent_Message_Platform = 4
	// Skype.
	Intent_Message_SKYPE Intent_Message_Platform = 5
	// Line.
	Intent_Message_LINE Intent_Message_Platform = 6
	// Viber.
	Intent_Message_VIBER Intent_Message_Platform = 7
	// Actions on Google.
	Intent_Message_ACTIONS_ON_GOOGLE Intent_Message_Platform = 8
)

var Intent_Message_Platform_name = map[int32]string{
	0: "PLATFORM_UNSPECIFIED",
	1: "FACEBOOK",
	2: "SLACK",
	3: "TELEGRAM",
	4: "KIK",
	5: "SKYPE",
	6: "LINE",
	7: "VIBER",
	8: "ACTIONS_ON_GOOGLE",
}
var Intent_Message_Platform_value = map[string]int32{
	"PLATFORM_UNSPECIFIED": 0,
	"FACEBOOK":             1,
	"SLACK":                2,
	"TELEGRAM":             3,
	"KIK":                  4,
	"SKYPE":                5,
	"LINE":                 6,
	"VIBER":                7,
	"ACTIONS_ON_GOOGLE":    8,
}

func (x Intent_Message_Platform) String() string {
	return proto.EnumName(Intent_Message_Platform_name, int32(x))
}
func (Intent_Message_Platform) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 0}
}

// Represents an intent.
// Intents convert a number of user expressions or patterns into an action. An
// action is an extraction of a user command or sentence semantics.
type Intent struct {
	// Required for all methods except `create` (`create` populates the name
	// automatically.
	// The unique identifier of this intent.
	// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Required. The name of this intent.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// Required. Indicates whether webhooks are enabled for the intent.
	WebhookState Intent_WebhookState `protobuf:"varint,6,opt,name=webhook_state,json=webhookState,enum=google.cloud.dialogflow.v2beta1.Intent_WebhookState" json:"webhook_state,omitempty"`
	// Optional. The priority of this intent. Higher numbers represent higher
	// priorities. Zero or negative numbers mean that the intent is disabled.
	Priority int32 `protobuf:"varint,3,opt,name=priority" json:"priority,omitempty"`
	// Optional. Indicates whether this is a fallback intent.
	IsFallback bool `protobuf:"varint,4,opt,name=is_fallback,json=isFallback" json:"is_fallback,omitempty"`
	// Optional. Indicates whether Machine Learning is enabled for the intent.
	// Note: If `ml_enabled` setting is set to false, then this intent is not
	// taken into account during inference in `ML ONLY` match mode. Also,
	// auto-markup in the UI is turned off.
	MlEnabled bool `protobuf:"varint,5,opt,name=ml_enabled,json=mlEnabled" json:"ml_enabled,omitempty"`
	// Optional. The list of context names required for this intent to be
	// triggered.
	// Format: `projects/<Project ID>/agent/sessions/-/contexts/<Context ID>`.
	InputContextNames []string `protobuf:"bytes,7,rep,name=input_context_names,json=inputContextNames" json:"input_context_names,omitempty"`
	// Optional. The collection of event names that trigger the intent.
	// If the collection of input contexts is not empty, all of the contexts must
	// be present in the active user session for an event to trigger this intent.
	Events []string `protobuf:"bytes,8,rep,name=events" json:"events,omitempty"`
	// Optional. The collection of examples/templates that the agent is
	// trained on.
	TrainingPhrases []*Intent_TrainingPhrase `protobuf:"bytes,9,rep,name=training_phrases,json=trainingPhrases" json:"training_phrases,omitempty"`
	// Optional. The name of the action associated with the intent.
	Action string `protobuf:"bytes,10,opt,name=action" json:"action,omitempty"`
	// Optional. The collection of contexts that are activated when the intent
	// is matched. Context messages in this collection should not set the
	// parameters field. Setting the `lifespan_count` to 0 will reset the context
	// when the intent is matched.
	// Format: `projects/<Project ID>/agent/sessions/-/contexts/<Context ID>`.
	OutputContexts []*Context `protobuf:"bytes,11,rep,name=output_contexts,json=outputContexts" json:"output_contexts,omitempty"`
	// Optional. Indicates whether to delete all contexts in the current
	// session when this intent is matched.
	ResetContexts bool `protobuf:"varint,12,opt,name=reset_contexts,json=resetContexts" json:"reset_contexts,omitempty"`
	// Optional. The collection of parameters associated with the intent.
	Parameters []*Intent_Parameter `protobuf:"bytes,13,rep,name=parameters" json:"parameters,omitempty"`
	// Optional. The collection of rich messages corresponding to the
	// `Response` field in API.AI console.
	Messages []*Intent_Message `protobuf:"bytes,14,rep,name=messages" json:"messages,omitempty"`
	// Optional. The list of platforms for which the first response will be
	// taken from among the messages assigned to the DEFAULT_PLATFORM.
	DefaultResponsePlatforms []Intent_Message_Platform `protobuf:"varint,15,rep,packed,name=default_response_platforms,json=defaultResponsePlatforms,enum=google.cloud.dialogflow.v2beta1.Intent_Message_Platform" json:"default_response_platforms,omitempty"`
	// The unique identifier of the root intent in the chain of followup intents.
	// It identifies the correct followup intents chain for this intent.
	// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
	RootFollowupIntentName string `protobuf:"bytes,16,opt,name=root_followup_intent_name,json=rootFollowupIntentName" json:"root_followup_intent_name,omitempty"`
	// The unique identifier of the parent intent in the chain of followup
	// intents.
	// It identifies the parent followup intent.
	// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
	ParentFollowupIntentName string `protobuf:"bytes,17,opt,name=parent_followup_intent_name,json=parentFollowupIntentName" json:"parent_followup_intent_name,omitempty"`
	// Optional. Collection of information about all followup intents that have
	// name of this intent as a root_name.
	FollowupIntentInfo []*Intent_FollowupIntentInfo `protobuf:"bytes,18,rep,name=followup_intent_info,json=followupIntentInfo" json:"followup_intent_info,omitempty"`
}

func (m *Intent) Reset()                    { *m = Intent{} }
func (m *Intent) String() string            { return proto.CompactTextString(m) }
func (*Intent) ProtoMessage()               {}
func (*Intent) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Intent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Intent) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Intent) GetWebhookState() Intent_WebhookState {
	if m != nil {
		return m.WebhookState
	}
	return Intent_WEBHOOK_STATE_UNSPECIFIED
}

func (m *Intent) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Intent) GetIsFallback() bool {
	if m != nil {
		return m.IsFallback
	}
	return false
}

func (m *Intent) GetMlEnabled() bool {
	if m != nil {
		return m.MlEnabled
	}
	return false
}

func (m *Intent) GetInputContextNames() []string {
	if m != nil {
		return m.InputContextNames
	}
	return nil
}

func (m *Intent) GetEvents() []string {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Intent) GetTrainingPhrases() []*Intent_TrainingPhrase {
	if m != nil {
		return m.TrainingPhrases
	}
	return nil
}

func (m *Intent) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Intent) GetOutputContexts() []*Context {
	if m != nil {
		return m.OutputContexts
	}
	return nil
}

func (m *Intent) GetResetContexts() bool {
	if m != nil {
		return m.ResetContexts
	}
	return false
}

func (m *Intent) GetParameters() []*Intent_Parameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Intent) GetMessages() []*Intent_Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *Intent) GetDefaultResponsePlatforms() []Intent_Message_Platform {
	if m != nil {
		return m.DefaultResponsePlatforms
	}
	return nil
}

func (m *Intent) GetRootFollowupIntentName() string {
	if m != nil {
		return m.RootFollowupIntentName
	}
	return ""
}

func (m *Intent) GetParentFollowupIntentName() string {
	if m != nil {
		return m.ParentFollowupIntentName
	}
	return ""
}

func (m *Intent) GetFollowupIntentInfo() []*Intent_FollowupIntentInfo {
	if m != nil {
		return m.FollowupIntentInfo
	}
	return nil
}

// Represents an example or template that the agent is trained on.
type Intent_TrainingPhrase struct {
	// Required. The unique identifier of this training phrase.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Required. The type of the training phrase.
	Type Intent_TrainingPhrase_Type `protobuf:"varint,2,opt,name=type,enum=google.cloud.dialogflow.v2beta1.Intent_TrainingPhrase_Type" json:"type,omitempty"`
	// Required. The collection of training phrase parts (can be annotated).
	// Fields: `entity_type`, `alias` and `user_defined` should be populated
	// only for the annotated parts of the training phrase.
	Parts []*Intent_TrainingPhrase_Part `protobuf:"bytes,3,rep,name=parts" json:"parts,omitempty"`
	// Optional. Indicates how many times this example or template was added to
	// the intent. Each time a developer adds an existing sample by editing an
	// intent or training, this counter is increased.
	TimesAddedCount int32 `protobuf:"varint,4,opt,name=times_added_count,json=timesAddedCount" json:"times_added_count,omitempty"`
}

func (m *Intent_TrainingPhrase) Reset()                    { *m = Intent_TrainingPhrase{} }
func (m *Intent_TrainingPhrase) String() string            { return proto.CompactTextString(m) }
func (*Intent_TrainingPhrase) ProtoMessage()               {}
func (*Intent_TrainingPhrase) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

func (m *Intent_TrainingPhrase) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Intent_TrainingPhrase) GetType() Intent_TrainingPhrase_Type {
	if m != nil {
		return m.Type
	}
	return Intent_TrainingPhrase_TYPE_UNSPECIFIED
}

func (m *Intent_TrainingPhrase) GetParts() []*Intent_TrainingPhrase_Part {
	if m != nil {
		return m.Parts
	}
	return nil
}

func (m *Intent_TrainingPhrase) GetTimesAddedCount() int32 {
	if m != nil {
		return m.TimesAddedCount
	}
	return 0
}

// Represents a part of a training phrase.
type Intent_TrainingPhrase_Part struct {
	// Required. The text corresponding to the example or template,
	// if there are no annotations. For
	// annotated examples, it is the text for one of the example's parts.
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	// Optional. The entity type name prefixed with `@`. This field is
	// required for the annotated part of the text and applies only to
	// examples.
	EntityType string `protobuf:"bytes,2,opt,name=entity_type,json=entityType" json:"entity_type,omitempty"`
	// Optional. The parameter name for the value extracted from the
	// annotated part of the example.
	Alias string `protobuf:"bytes,3,opt,name=alias" json:"alias,omitempty"`
	// Optional. Indicates whether the text was manually annotated by the
	// developer.
	UserDefined bool `protobuf:"varint,4,opt,name=user_defined,json=userDefined" json:"user_defined,omitempty"`
}

func (m *Intent_TrainingPhrase_Part) Reset()         { *m = Intent_TrainingPhrase_Part{} }
func (m *Intent_TrainingPhrase_Part) String() string { return proto.CompactTextString(m) }
func (*Intent_TrainingPhrase_Part) ProtoMessage()    {}
func (*Intent_TrainingPhrase_Part) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 0, 0}
}

func (m *Intent_TrainingPhrase_Part) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Intent_TrainingPhrase_Part) GetEntityType() string {
	if m != nil {
		return m.EntityType
	}
	return ""
}

func (m *Intent_TrainingPhrase_Part) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *Intent_TrainingPhrase_Part) GetUserDefined() bool {
	if m != nil {
		return m.UserDefined
	}
	return false
}

// Represents intent parameters.
type Intent_Parameter struct {
	// The unique identifier of this parameter.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Required. The name of the parameter.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	// Optional. The definition of the parameter value. It can be:
	// - a constant string,
	// - a parameter value defined as `$parameter_name`,
	// - an original parameter value defined as `$parameter_name.original`,
	// - a parameter value from some context defined as
	//   `#context_name.parameter_name`.
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	// Optional. The default value to use when the `value` yields an empty
	// result.
	// Default values can be extracted from contexts by using the following
	// syntax: `#context_name.parameter_name`.
	DefaultValue string `protobuf:"bytes,4,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	// Optional. The name of the entity type, prefixed with `@`, that
	// describes values of the parameter. If the parameter is
	// required, this must be provided.
	EntityTypeDisplayName string `protobuf:"bytes,5,opt,name=entity_type_display_name,json=entityTypeDisplayName" json:"entity_type_display_name,omitempty"`
	// Optional. Indicates whether the parameter is required. That is,
	// whether the intent cannot be completed without collecting the parameter
	// value.
	Mandatory bool `protobuf:"varint,6,opt,name=mandatory" json:"mandatory,omitempty"`
	// Optional. The collection of prompts that the agent can present to the
	// user in order to collect value for the parameter.
	Prompts []string `protobuf:"bytes,7,rep,name=prompts" json:"prompts,omitempty"`
	// Optional. Indicates whether the parameter represents a list of values.
	IsList bool `protobuf:"varint,8,opt,name=is_list,json=isList" json:"is_list,omitempty"`
}

func (m *Intent_Parameter) Reset()                    { *m = Intent_Parameter{} }
func (m *Intent_Parameter) String() string            { return proto.CompactTextString(m) }
func (*Intent_Parameter) ProtoMessage()               {}
func (*Intent_Parameter) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 1} }

func (m *Intent_Parameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Intent_Parameter) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Intent_Parameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Intent_Parameter) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func (m *Intent_Parameter) GetEntityTypeDisplayName() string {
	if m != nil {
		return m.EntityTypeDisplayName
	}
	return ""
}

func (m *Intent_Parameter) GetMandatory() bool {
	if m != nil {
		return m.Mandatory
	}
	return false
}

func (m *Intent_Parameter) GetPrompts() []string {
	if m != nil {
		return m.Prompts
	}
	return nil
}

func (m *Intent_Parameter) GetIsList() bool {
	if m != nil {
		return m.IsList
	}
	return false
}

// Corresponds to the `Response` field in API.AI console.
type Intent_Message struct {
	// Required. The rich response message.
	//
	// Types that are valid to be assigned to Message:
	//	*Intent_Message_Text_
	//	*Intent_Message_Image_
	//	*Intent_Message_QuickReplies_
	//	*Intent_Message_Card_
	//	*Intent_Message_Payload
	//	*Intent_Message_SimpleResponses_
	//	*Intent_Message_BasicCard_
	//	*Intent_Message_Suggestions_
	//	*Intent_Message_LinkOutSuggestion_
	//	*Intent_Message_ListSelect_
	//	*Intent_Message_CarouselSelect_
	Message isIntent_Message_Message `protobuf_oneof:"message"`
	// Optional. The platform that this message is intended for.
	Platform Intent_Message_Platform `protobuf:"varint,6,opt,name=platform,enum=google.cloud.dialogflow.v2beta1.Intent_Message_Platform" json:"platform,omitempty"`
}

func (m *Intent_Message) Reset()                    { *m = Intent_Message{} }
func (m *Intent_Message) String() string            { return proto.CompactTextString(m) }
func (*Intent_Message) ProtoMessage()               {}
func (*Intent_Message) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 2} }

type isIntent_Message_Message interface {
	isIntent_Message_Message()
}

type Intent_Message_Text_ struct {
	Text *Intent_Message_Text `protobuf:"bytes,1,opt,name=text,oneof"`
}
type Intent_Message_Image_ struct {
	Image *Intent_Message_Image `protobuf:"bytes,2,opt,name=image,oneof"`
}
type Intent_Message_QuickReplies_ struct {
	QuickReplies *Intent_Message_QuickReplies `protobuf:"bytes,3,opt,name=quick_replies,json=quickReplies,oneof"`
}
type Intent_Message_Card_ struct {
	Card *Intent_Message_Card `protobuf:"bytes,4,opt,name=card,oneof"`
}
type Intent_Message_Payload struct {
	Payload *google_protobuf4.Struct `protobuf:"bytes,5,opt,name=payload,oneof"`
}
type Intent_Message_SimpleResponses_ struct {
	SimpleResponses *Intent_Message_SimpleResponses `protobuf:"bytes,7,opt,name=simple_responses,json=simpleResponses,oneof"`
}
type Intent_Message_BasicCard_ struct {
	BasicCard *Intent_Message_BasicCard `protobuf:"bytes,8,opt,name=basic_card,json=basicCard,oneof"`
}
type Intent_Message_Suggestions_ struct {
	Suggestions *Intent_Message_Suggestions `protobuf:"bytes,9,opt,name=suggestions,oneof"`
}
type Intent_Message_LinkOutSuggestion_ struct {
	LinkOutSuggestion *Intent_Message_LinkOutSuggestion `protobuf:"bytes,10,opt,name=link_out_suggestion,json=linkOutSuggestion,oneof"`
}
type Intent_Message_ListSelect_ struct {
	ListSelect *Intent_Message_ListSelect `protobuf:"bytes,11,opt,name=list_select,json=listSelect,oneof"`
}
type Intent_Message_CarouselSelect_ struct {
	CarouselSelect *Intent_Message_CarouselSelect `protobuf:"bytes,12,opt,name=carousel_select,json=carouselSelect,oneof"`
}

func (*Intent_Message_Text_) isIntent_Message_Message()              {}
func (*Intent_Message_Image_) isIntent_Message_Message()             {}
func (*Intent_Message_QuickReplies_) isIntent_Message_Message()      {}
func (*Intent_Message_Card_) isIntent_Message_Message()              {}
func (*Intent_Message_Payload) isIntent_Message_Message()            {}
func (*Intent_Message_SimpleResponses_) isIntent_Message_Message()   {}
func (*Intent_Message_BasicCard_) isIntent_Message_Message()         {}
func (*Intent_Message_Suggestions_) isIntent_Message_Message()       {}
func (*Intent_Message_LinkOutSuggestion_) isIntent_Message_Message() {}
func (*Intent_Message_ListSelect_) isIntent_Message_Message()        {}
func (*Intent_Message_CarouselSelect_) isIntent_Message_Message()    {}

func (m *Intent_Message) GetMessage() isIntent_Message_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Intent_Message) GetText() *Intent_Message_Text {
	if x, ok := m.GetMessage().(*Intent_Message_Text_); ok {
		return x.Text
	}
	return nil
}

func (m *Intent_Message) GetImage() *Intent_Message_Image {
	if x, ok := m.GetMessage().(*Intent_Message_Image_); ok {
		return x.Image
	}
	return nil
}

func (m *Intent_Message) GetQuickReplies() *Intent_Message_QuickReplies {
	if x, ok := m.GetMessage().(*Intent_Message_QuickReplies_); ok {
		return x.QuickReplies
	}
	return nil
}

func (m *Intent_Message) GetCard() *Intent_Message_Card {
	if x, ok := m.GetMessage().(*Intent_Message_Card_); ok {
		return x.Card
	}
	return nil
}

func (m *Intent_Message) GetPayload() *google_protobuf4.Struct {
	if x, ok := m.GetMessage().(*Intent_Message_Payload); ok {
		return x.Payload
	}
	return nil
}

func (m *Intent_Message) GetSimpleResponses() *Intent_Message_SimpleResponses {
	if x, ok := m.GetMessage().(*Intent_Message_SimpleResponses_); ok {
		return x.SimpleResponses
	}
	return nil
}

func (m *Intent_Message) GetBasicCard() *Intent_Message_BasicCard {
	if x, ok := m.GetMessage().(*Intent_Message_BasicCard_); ok {
		return x.BasicCard
	}
	return nil
}

func (m *Intent_Message) GetSuggestions() *Intent_Message_Suggestions {
	if x, ok := m.GetMessage().(*Intent_Message_Suggestions_); ok {
		return x.Suggestions
	}
	return nil
}

func (m *Intent_Message) GetLinkOutSuggestion() *Intent_Message_LinkOutSuggestion {
	if x, ok := m.GetMessage().(*Intent_Message_LinkOutSuggestion_); ok {
		return x.LinkOutSuggestion
	}
	return nil
}

func (m *Intent_Message) GetListSelect() *Intent_Message_ListSelect {
	if x, ok := m.GetMessage().(*Intent_Message_ListSelect_); ok {
		return x.ListSelect
	}
	return nil
}

func (m *Intent_Message) GetCarouselSelect() *Intent_Message_CarouselSelect {
	if x, ok := m.GetMessage().(*Intent_Message_CarouselSelect_); ok {
		return x.CarouselSelect
	}
	return nil
}

func (m *Intent_Message) GetPlatform() Intent_Message_Platform {
	if m != nil {
		return m.Platform
	}
	return Intent_Message_PLATFORM_UNSPECIFIED
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Intent_Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Intent_Message_OneofMarshaler, _Intent_Message_OneofUnmarshaler, _Intent_Message_OneofSizer, []interface{}{
		(*Intent_Message_Text_)(nil),
		(*Intent_Message_Image_)(nil),
		(*Intent_Message_QuickReplies_)(nil),
		(*Intent_Message_Card_)(nil),
		(*Intent_Message_Payload)(nil),
		(*Intent_Message_SimpleResponses_)(nil),
		(*Intent_Message_BasicCard_)(nil),
		(*Intent_Message_Suggestions_)(nil),
		(*Intent_Message_LinkOutSuggestion_)(nil),
		(*Intent_Message_ListSelect_)(nil),
		(*Intent_Message_CarouselSelect_)(nil),
	}
}

func _Intent_Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Intent_Message)
	// message
	switch x := m.Message.(type) {
	case *Intent_Message_Text_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Text); err != nil {
			return err
		}
	case *Intent_Message_Image_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Image); err != nil {
			return err
		}
	case *Intent_Message_QuickReplies_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QuickReplies); err != nil {
			return err
		}
	case *Intent_Message_Card_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Card); err != nil {
			return err
		}
	case *Intent_Message_Payload:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Payload); err != nil {
			return err
		}
	case *Intent_Message_SimpleResponses_:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SimpleResponses); err != nil {
			return err
		}
	case *Intent_Message_BasicCard_:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BasicCard); err != nil {
			return err
		}
	case *Intent_Message_Suggestions_:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Suggestions); err != nil {
			return err
		}
	case *Intent_Message_LinkOutSuggestion_:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LinkOutSuggestion); err != nil {
			return err
		}
	case *Intent_Message_ListSelect_:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListSelect); err != nil {
			return err
		}
	case *Intent_Message_CarouselSelect_:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CarouselSelect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Intent_Message.Message has unexpected type %T", x)
	}
	return nil
}

func _Intent_Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Intent_Message)
	switch tag {
	case 1: // message.text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Intent_Message_Text)
		err := b.DecodeMessage(msg)
		m.Message = &Intent_Message_Text_{msg}
		return true, err
	case 2: // message.image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Intent_Message_Image)
		err := b.DecodeMessage(msg)
		m.Message = &Intent_Message_Image_{msg}
		return true, err
	case 3: // message.quick_replies
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Intent_Message_QuickReplies)
		err := b.DecodeMessage(msg)
		m.Message = &Intent_Message_QuickReplies_{msg}
		return true, err
	case 4: // message.card
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Intent_Message_Card)
		err := b.DecodeMessage(msg)
		m.Message = &Intent_Message_Card_{msg}
		return true, err
	case 5: // message.payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf4.Struct)
		err := b.DecodeMessage(msg)
		m.Message = &Intent_Message_Payload{msg}
		return true, err
	case 7: // message.simple_responses
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Intent_Message_SimpleResponses)
		err := b.DecodeMessage(msg)
		m.Message = &Intent_Message_SimpleResponses_{msg}
		return true, err
	case 8: // message.basic_card
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Intent_Message_BasicCard)
		err := b.DecodeMessage(msg)
		m.Message = &Intent_Message_BasicCard_{msg}
		return true, err
	case 9: // message.suggestions
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Intent_Message_Suggestions)
		err := b.DecodeMessage(msg)
		m.Message = &Intent_Message_Suggestions_{msg}
		return true, err
	case 10: // message.link_out_suggestion
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Intent_Message_LinkOutSuggestion)
		err := b.DecodeMessage(msg)
		m.Message = &Intent_Message_LinkOutSuggestion_{msg}
		return true, err
	case 11: // message.list_select
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Intent_Message_ListSelect)
		err := b.DecodeMessage(msg)
		m.Message = &Intent_Message_ListSelect_{msg}
		return true, err
	case 12: // message.carousel_select
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Intent_Message_CarouselSelect)
		err := b.DecodeMessage(msg)
		m.Message = &Intent_Message_CarouselSelect_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Intent_Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Intent_Message)
	// message
	switch x := m.Message.(type) {
	case *Intent_Message_Text_:
		s := proto.Size(x.Text)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Intent_Message_Image_:
		s := proto.Size(x.Image)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Intent_Message_QuickReplies_:
		s := proto.Size(x.QuickReplies)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Intent_Message_Card_:
		s := proto.Size(x.Card)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Intent_Message_Payload:
		s := proto.Size(x.Payload)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Intent_Message_SimpleResponses_:
		s := proto.Size(x.SimpleResponses)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Intent_Message_BasicCard_:
		s := proto.Size(x.BasicCard)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Intent_Message_Suggestions_:
		s := proto.Size(x.Suggestions)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Intent_Message_LinkOutSuggestion_:
		s := proto.Size(x.LinkOutSuggestion)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Intent_Message_ListSelect_:
		s := proto.Size(x.ListSelect)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Intent_Message_CarouselSelect_:
		s := proto.Size(x.CarouselSelect)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The text response message.
type Intent_Message_Text struct {
	// Optional. The collection of the agent's responses.
	Text []string `protobuf:"bytes,1,rep,name=text" json:"text,omitempty"`
}

func (m *Intent_Message_Text) Reset()                    { *m = Intent_Message_Text{} }
func (m *Intent_Message_Text) String() string            { return proto.CompactTextString(m) }
func (*Intent_Message_Text) ProtoMessage()               {}
func (*Intent_Message_Text) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 2, 0} }

func (m *Intent_Message_Text) GetText() []string {
	if m != nil {
		return m.Text
	}
	return nil
}

// The image response message.
type Intent_Message_Image struct {
	// Optional. The public URI to an image file.
	ImageUri string `protobuf:"bytes,1,opt,name=image_uri,json=imageUri" json:"image_uri,omitempty"`
}

func (m *Intent_Message_Image) Reset()                    { *m = Intent_Message_Image{} }
func (m *Intent_Message_Image) String() string            { return proto.CompactTextString(m) }
func (*Intent_Message_Image) ProtoMessage()               {}
func (*Intent_Message_Image) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 2, 1} }

func (m *Intent_Message_Image) GetImageUri() string {
	if m != nil {
		return m.ImageUri
	}
	return ""
}

// The quick replies response message.
type Intent_Message_QuickReplies struct {
	// Optional. The title of the collection of quick replies.
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	// Optional. The collection of quick replies.
	QuickReplies []string `protobuf:"bytes,2,rep,name=quick_replies,json=quickReplies" json:"quick_replies,omitempty"`
}

func (m *Intent_Message_QuickReplies) Reset()         { *m = Intent_Message_QuickReplies{} }
func (m *Intent_Message_QuickReplies) String() string { return proto.CompactTextString(m) }
func (*Intent_Message_QuickReplies) ProtoMessage()    {}
func (*Intent_Message_QuickReplies) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 2}
}

func (m *Intent_Message_QuickReplies) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Intent_Message_QuickReplies) GetQuickReplies() []string {
	if m != nil {
		return m.QuickReplies
	}
	return nil
}

// The card response message.
type Intent_Message_Card struct {
	// Optional. The title of the card.
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	// Optional. The subtitle of the card.
	Subtitle string `protobuf:"bytes,2,opt,name=subtitle" json:"subtitle,omitempty"`
	// Optional. The public URI to an image file for the card.
	ImageUri string `protobuf:"bytes,3,opt,name=image_uri,json=imageUri" json:"image_uri,omitempty"`
	// Optional. The collection of card buttons.
	Buttons []*Intent_Message_Card_Button `protobuf:"bytes,4,rep,name=buttons" json:"buttons,omitempty"`
}

func (m *Intent_Message_Card) Reset()                    { *m = Intent_Message_Card{} }
func (m *Intent_Message_Card) String() string            { return proto.CompactTextString(m) }
func (*Intent_Message_Card) ProtoMessage()               {}
func (*Intent_Message_Card) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 2, 3} }

func (m *Intent_Message_Card) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Intent_Message_Card) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *Intent_Message_Card) GetImageUri() string {
	if m != nil {
		return m.ImageUri
	}
	return ""
}

func (m *Intent_Message_Card) GetButtons() []*Intent_Message_Card_Button {
	if m != nil {
		return m.Buttons
	}
	return nil
}

// Optional. Contains information about a button.
type Intent_Message_Card_Button struct {
	// Optional. The text to show on the button.
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	// Optional. The text to send back to the Dialogflow API or a URI to
	// open.
	Postback string `protobuf:"bytes,2,opt,name=postback" json:"postback,omitempty"`
}

func (m *Intent_Message_Card_Button) Reset()         { *m = Intent_Message_Card_Button{} }
func (m *Intent_Message_Card_Button) String() string { return proto.CompactTextString(m) }
func (*Intent_Message_Card_Button) ProtoMessage()    {}
func (*Intent_Message_Card_Button) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 3, 0}
}

func (m *Intent_Message_Card_Button) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Intent_Message_Card_Button) GetPostback() string {
	if m != nil {
		return m.Postback
	}
	return ""
}

// The simple response message containing speech or text.
type Intent_Message_SimpleResponse struct {
	// One of text_to_speech or ssml must be provided. The plain text of the
	// speech output. Mutually exclusive with ssml.
	TextToSpeech string `protobuf:"bytes,1,opt,name=text_to_speech,json=textToSpeech" json:"text_to_speech,omitempty"`
	// One of text_to_speech or ssml must be provided. Structured spoken
	// response to the user in the SSML format. Mutually exclusive with
	// text_to_speech.
	Ssml string `protobuf:"bytes,2,opt,name=ssml" json:"ssml,omitempty"`
	// Optional. The text to display.
	DisplayText string `protobuf:"bytes,3,opt,name=display_text,json=displayText" json:"display_text,omitempty"`
}

func (m *Intent_Message_SimpleResponse) Reset()         { *m = Intent_Message_SimpleResponse{} }
func (m *Intent_Message_SimpleResponse) String() string { return proto.CompactTextString(m) }
func (*Intent_Message_SimpleResponse) ProtoMessage()    {}
func (*Intent_Message_SimpleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 4}
}

func (m *Intent_Message_SimpleResponse) GetTextToSpeech() string {
	if m != nil {
		return m.TextToSpeech
	}
	return ""
}

func (m *Intent_Message_SimpleResponse) GetSsml() string {
	if m != nil {
		return m.Ssml
	}
	return ""
}

func (m *Intent_Message_SimpleResponse) GetDisplayText() string {
	if m != nil {
		return m.DisplayText
	}
	return ""
}

// The collection of simple response candidates.
// This message in `QueryResult.fulfillment_messages` and
// `WebhookResponse.fulfillment_messages` should contain only one
// `SimpleResponse`.
type Intent_Message_SimpleResponses struct {
	// Required. The list of simple responses.
	SimpleResponses []*Intent_Message_SimpleResponse `protobuf:"bytes,1,rep,name=simple_responses,json=simpleResponses" json:"simple_responses,omitempty"`
}

func (m *Intent_Message_SimpleResponses) Reset()         { *m = Intent_Message_SimpleResponses{} }
func (m *Intent_Message_SimpleResponses) String() string { return proto.CompactTextString(m) }
func (*Intent_Message_SimpleResponses) ProtoMessage()    {}
func (*Intent_Message_SimpleResponses) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 5}
}

func (m *Intent_Message_SimpleResponses) GetSimpleResponses() []*Intent_Message_SimpleResponse {
	if m != nil {
		return m.SimpleResponses
	}
	return nil
}

// The basic card message. Useful for displaying information.
type Intent_Message_BasicCard struct {
	// Optional. The title of the card.
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	// Optional. The subtitle of the card.
	Subtitle string `protobuf:"bytes,2,opt,name=subtitle" json:"subtitle,omitempty"`
	// Required, unless image is present. The body text of the card.
	FormattedText string `protobuf:"bytes,3,opt,name=formatted_text,json=formattedText" json:"formatted_text,omitempty"`
	// Optional. The image for the card.
	Image *Intent_Message_Image `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	// Optional. The collection of card buttons.
	Buttons []*Intent_Message_BasicCard_Button `protobuf:"bytes,5,rep,name=buttons" json:"buttons,omitempty"`
}

func (m *Intent_Message_BasicCard) Reset()                    { *m = Intent_Message_BasicCard{} }
func (m *Intent_Message_BasicCard) String() string            { return proto.CompactTextString(m) }
func (*Intent_Message_BasicCard) ProtoMessage()               {}
func (*Intent_Message_BasicCard) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 2, 6} }

func (m *Intent_Message_BasicCard) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Intent_Message_BasicCard) GetSubtitle() string {
	if m != nil {
		return m.Subtitle
	}
	return ""
}

func (m *Intent_Message_BasicCard) GetFormattedText() string {
	if m != nil {
		return m.FormattedText
	}
	return ""
}

func (m *Intent_Message_BasicCard) GetImage() *Intent_Message_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Intent_Message_BasicCard) GetButtons() []*Intent_Message_BasicCard_Button {
	if m != nil {
		return m.Buttons
	}
	return nil
}

// The button object that appears at the bottom of a card.
type Intent_Message_BasicCard_Button struct {
	// Required. The title of the button.
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	// Required. Action to take when a user taps on the button.
	OpenUriAction *Intent_Message_BasicCard_Button_OpenUriAction `protobuf:"bytes,2,opt,name=open_uri_action,json=openUriAction" json:"open_uri_action,omitempty"`
}

func (m *Intent_Message_BasicCard_Button) Reset()         { *m = Intent_Message_BasicCard_Button{} }
func (m *Intent_Message_BasicCard_Button) String() string { return proto.CompactTextString(m) }
func (*Intent_Message_BasicCard_Button) ProtoMessage()    {}
func (*Intent_Message_BasicCard_Button) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 6, 0}
}

func (m *Intent_Message_BasicCard_Button) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Intent_Message_BasicCard_Button) GetOpenUriAction() *Intent_Message_BasicCard_Button_OpenUriAction {
	if m != nil {
		return m.OpenUriAction
	}
	return nil
}

// Opens the given URI.
type Intent_Message_BasicCard_Button_OpenUriAction struct {
	// Required. The HTTP or HTTPS scheme URI.
	Uri string `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
}

func (m *Intent_Message_BasicCard_Button_OpenUriAction) Reset() {
	*m = Intent_Message_BasicCard_Button_OpenUriAction{}
}
func (m *Intent_Message_BasicCard_Button_OpenUriAction) String() string {
	return proto.CompactTextString(m)
}
func (*Intent_Message_BasicCard_Button_OpenUriAction) ProtoMessage() {}
func (*Intent_Message_BasicCard_Button_OpenUriAction) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 6, 0, 0}
}

func (m *Intent_Message_BasicCard_Button_OpenUriAction) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// The suggestion chip message that the user can tap to quickly post a reply
// to the conversation.
type Intent_Message_Suggestion struct {
	// Required. The text shown the in the suggestion chip.
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *Intent_Message_Suggestion) Reset()                    { *m = Intent_Message_Suggestion{} }
func (m *Intent_Message_Suggestion) String() string            { return proto.CompactTextString(m) }
func (*Intent_Message_Suggestion) ProtoMessage()               {}
func (*Intent_Message_Suggestion) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 2, 7} }

func (m *Intent_Message_Suggestion) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// The collection of suggestions.
type Intent_Message_Suggestions struct {
	// Required. The list of suggested replies.
	Suggestions []*Intent_Message_Suggestion `protobuf:"bytes,1,rep,name=suggestions" json:"suggestions,omitempty"`
}

func (m *Intent_Message_Suggestions) Reset()         { *m = Intent_Message_Suggestions{} }
func (m *Intent_Message_Suggestions) String() string { return proto.CompactTextString(m) }
func (*Intent_Message_Suggestions) ProtoMessage()    {}
func (*Intent_Message_Suggestions) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 8}
}

func (m *Intent_Message_Suggestions) GetSuggestions() []*Intent_Message_Suggestion {
	if m != nil {
		return m.Suggestions
	}
	return nil
}

// The suggestion chip message that allows the user to jump out to the app
// or website associated with this agent.
type Intent_Message_LinkOutSuggestion struct {
	// Required. The name of the app or site this chip is linking to.
	DestinationName string `protobuf:"bytes,1,opt,name=destination_name,json=destinationName" json:"destination_name,omitempty"`
	// Required. The URI of the app or site to open when the user taps the
	// suggestion chip.
	Uri string `protobuf:"bytes,2,opt,name=uri" json:"uri,omitempty"`
}

func (m *Intent_Message_LinkOutSuggestion) Reset()         { *m = Intent_Message_LinkOutSuggestion{} }
func (m *Intent_Message_LinkOutSuggestion) String() string { return proto.CompactTextString(m) }
func (*Intent_Message_LinkOutSuggestion) ProtoMessage()    {}
func (*Intent_Message_LinkOutSuggestion) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 9}
}

func (m *Intent_Message_LinkOutSuggestion) GetDestinationName() string {
	if m != nil {
		return m.DestinationName
	}
	return ""
}

func (m *Intent_Message_LinkOutSuggestion) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

// The card for presenting a list of options to select from.
type Intent_Message_ListSelect struct {
	// Optional. The overall title of the list.
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	// Required. List items.
	Items []*Intent_Message_ListSelect_Item `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *Intent_Message_ListSelect) Reset()         { *m = Intent_Message_ListSelect{} }
func (m *Intent_Message_ListSelect) String() string { return proto.CompactTextString(m) }
func (*Intent_Message_ListSelect) ProtoMessage()    {}
func (*Intent_Message_ListSelect) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 10}
}

func (m *Intent_Message_ListSelect) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Intent_Message_ListSelect) GetItems() []*Intent_Message_ListSelect_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

// An item in the list.
type Intent_Message_ListSelect_Item struct {
	// Required. Additional information about this option.
	Info *Intent_Message_SelectItemInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	// Required. The title of the list item.
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	// Optional. The main text describing the item.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Optional. The image to display.
	Image *Intent_Message_Image `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
}

func (m *Intent_Message_ListSelect_Item) Reset()         { *m = Intent_Message_ListSelect_Item{} }
func (m *Intent_Message_ListSelect_Item) String() string { return proto.CompactTextString(m) }
func (*Intent_Message_ListSelect_Item) ProtoMessage()    {}
func (*Intent_Message_ListSelect_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 10, 0}
}

func (m *Intent_Message_ListSelect_Item) GetInfo() *Intent_Message_SelectItemInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Intent_Message_ListSelect_Item) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Intent_Message_ListSelect_Item) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Intent_Message_ListSelect_Item) GetImage() *Intent_Message_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

// The card for presenting a carousel of options to select from.
type Intent_Message_CarouselSelect struct {
	// Required. Carousel items.
	Items []*Intent_Message_CarouselSelect_Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *Intent_Message_CarouselSelect) Reset()         { *m = Intent_Message_CarouselSelect{} }
func (m *Intent_Message_CarouselSelect) String() string { return proto.CompactTextString(m) }
func (*Intent_Message_CarouselSelect) ProtoMessage()    {}
func (*Intent_Message_CarouselSelect) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 11}
}

func (m *Intent_Message_CarouselSelect) GetItems() []*Intent_Message_CarouselSelect_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

// An item in the carousel.
type Intent_Message_CarouselSelect_Item struct {
	// Required. Additional info about the option item.
	Info *Intent_Message_SelectItemInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	// Required. Title of the carousel item.
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	// Optional. The body text of the card.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Optional. The image to display.
	Image *Intent_Message_Image `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
}

func (m *Intent_Message_CarouselSelect_Item) Reset()         { *m = Intent_Message_CarouselSelect_Item{} }
func (m *Intent_Message_CarouselSelect_Item) String() string { return proto.CompactTextString(m) }
func (*Intent_Message_CarouselSelect_Item) ProtoMessage()    {}
func (*Intent_Message_CarouselSelect_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 11, 0}
}

func (m *Intent_Message_CarouselSelect_Item) GetInfo() *Intent_Message_SelectItemInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *Intent_Message_CarouselSelect_Item) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Intent_Message_CarouselSelect_Item) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Intent_Message_CarouselSelect_Item) GetImage() *Intent_Message_Image {
	if m != nil {
		return m.Image
	}
	return nil
}

// Additional info about the select item for when it is triggered in a
// dialog.
type Intent_Message_SelectItemInfo struct {
	// Required. A unique key that will be sent back to the agent if this
	// response is given.
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Optional. A list of synonyms that can also be used to trigger this
	// item in dialog.
	Synonyms []string `protobuf:"bytes,2,rep,name=synonyms" json:"synonyms,omitempty"`
}

func (m *Intent_Message_SelectItemInfo) Reset()         { *m = Intent_Message_SelectItemInfo{} }
func (m *Intent_Message_SelectItemInfo) String() string { return proto.CompactTextString(m) }
func (*Intent_Message_SelectItemInfo) ProtoMessage()    {}
func (*Intent_Message_SelectItemInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 2, 12}
}

func (m *Intent_Message_SelectItemInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Intent_Message_SelectItemInfo) GetSynonyms() []string {
	if m != nil {
		return m.Synonyms
	}
	return nil
}

// Represents a single followup intent in the chain.
type Intent_FollowupIntentInfo struct {
	// The unique identifier of the followup intent.
	// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
	FollowupIntentName string `protobuf:"bytes,1,opt,name=followup_intent_name,json=followupIntentName" json:"followup_intent_name,omitempty"`
	// The unique identifier of the followup intent parent.
	// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
	ParentFollowupIntentName string `protobuf:"bytes,2,opt,name=parent_followup_intent_name,json=parentFollowupIntentName" json:"parent_followup_intent_name,omitempty"`
}

func (m *Intent_FollowupIntentInfo) Reset()                    { *m = Intent_FollowupIntentInfo{} }
func (m *Intent_FollowupIntentInfo) String() string            { return proto.CompactTextString(m) }
func (*Intent_FollowupIntentInfo) ProtoMessage()               {}
func (*Intent_FollowupIntentInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 3} }

func (m *Intent_FollowupIntentInfo) GetFollowupIntentName() string {
	if m != nil {
		return m.FollowupIntentName
	}
	return ""
}

func (m *Intent_FollowupIntentInfo) GetParentFollowupIntentName() string {
	if m != nil {
		return m.ParentFollowupIntentName
	}
	return ""
}

// The request message for
// [Intents.ListIntents][google.cloud.dialogflow.v2beta1.Intents.ListIntents].
type ListIntentsRequest struct {
	// Required. The agent to list all intents from.
	// Format: `projects/<Project ID>/agent`.
	Parent string `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	// Optional. The language to list training phrases, parameters and rich
	// messages for. If not specified, the agent's default language is used.
	// [More than a dozen
	// languages](https://dialogflow.com/docs/reference/language) are supported.
	// Note: languages must be enabled in the agent before they can be used.
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	// Optional. The resource view to apply to the returned intent.
	IntentView IntentView `protobuf:"varint,3,opt,name=intent_view,json=intentView,enum=google.cloud.dialogflow.v2beta1.IntentView" json:"intent_view,omitempty"`
	// Optional. The maximum number of items to return in a single page. By
	// default 100 and at most 1000.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize" json:"page_size,omitempty"`
	// Optional. The next_page_token value returned from a previous list request.
	PageToken string `protobuf:"bytes,5,opt,name=page_token,json=pageToken" json:"page_token,omitempty"`
}

func (m *ListIntentsRequest) Reset()                    { *m = ListIntentsRequest{} }
func (m *ListIntentsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListIntentsRequest) ProtoMessage()               {}
func (*ListIntentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *ListIntentsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListIntentsRequest) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *ListIntentsRequest) GetIntentView() IntentView {
	if m != nil {
		return m.IntentView
	}
	return IntentView_INTENT_VIEW_UNSPECIFIED
}

func (m *ListIntentsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListIntentsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// The response message for
// [Intents.ListIntents][google.cloud.dialogflow.v2beta1.Intents.ListIntents].
type ListIntentsResponse struct {
	// The list of agent intents. There will be a maximum number of items
	// returned based on the page_size field in the request.
	Intents []*Intent `protobuf:"bytes,1,rep,name=intents" json:"intents,omitempty"`
	// Token to retrieve the next page of results, or empty if there are no
	// more results in the list.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken" json:"next_page_token,omitempty"`
}

func (m *ListIntentsResponse) Reset()                    { *m = ListIntentsResponse{} }
func (m *ListIntentsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListIntentsResponse) ProtoMessage()               {}
func (*ListIntentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *ListIntentsResponse) GetIntents() []*Intent {
	if m != nil {
		return m.Intents
	}
	return nil
}

func (m *ListIntentsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

// The request message for
// [Intents.GetIntent][google.cloud.dialogflow.v2beta1.Intents.GetIntent].
type GetIntentRequest struct {
	// Required. The name of the intent.
	// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Optional. The language to retrieve training phrases, parameters and rich
	// messages for. If not specified, the agent's default language is used.
	// [More than a dozen
	// languages](https://dialogflow.com/docs/reference/language) are supported.
	// Note: languages must be enabled in the agent, before they can be used.
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	// Optional. The resource view to apply to the returned intent.
	IntentView IntentView `protobuf:"varint,3,opt,name=intent_view,json=intentView,enum=google.cloud.dialogflow.v2beta1.IntentView" json:"intent_view,omitempty"`
}

func (m *GetIntentRequest) Reset()                    { *m = GetIntentRequest{} }
func (m *GetIntentRequest) String() string            { return proto.CompactTextString(m) }
func (*GetIntentRequest) ProtoMessage()               {}
func (*GetIntentRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *GetIntentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetIntentRequest) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *GetIntentRequest) GetIntentView() IntentView {
	if m != nil {
		return m.IntentView
	}
	return IntentView_INTENT_VIEW_UNSPECIFIED
}

// The request message for
// [Intents.CreateIntent][google.cloud.dialogflow.v2beta1.Intents.CreateIntent].
type CreateIntentRequest struct {
	// Required. The agent to create a intent for.
	// Format: `projects/<Project ID>/agent`.
	Parent string `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	// Required. The intent to create.
	Intent *Intent `protobuf:"bytes,2,opt,name=intent" json:"intent,omitempty"`
	// Optional. The language of training phrases, parameters and rich messages
	// defined in `intent`. If not specified, the agent's default language is
	// used. [More than a dozen
	// languages](https://dialogflow.com/docs/reference/language) are supported.
	// Note: languages must be enabled in the agent, before they can be used.
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	// Optional. The resource view to apply to the returned intent.
	IntentView IntentView `protobuf:"varint,4,opt,name=intent_view,json=intentView,enum=google.cloud.dialogflow.v2beta1.IntentView" json:"intent_view,omitempty"`
}

func (m *CreateIntentRequest) Reset()                    { *m = CreateIntentRequest{} }
func (m *CreateIntentRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateIntentRequest) ProtoMessage()               {}
func (*CreateIntentRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *CreateIntentRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateIntentRequest) GetIntent() *Intent {
	if m != nil {
		return m.Intent
	}
	return nil
}

func (m *CreateIntentRequest) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *CreateIntentRequest) GetIntentView() IntentView {
	if m != nil {
		return m.IntentView
	}
	return IntentView_INTENT_VIEW_UNSPECIFIED
}

// The request message for
// [Intents.UpdateIntent][google.cloud.dialogflow.v2beta1.Intents.UpdateIntent].
type UpdateIntentRequest struct {
	// Required. The intent to update.
	// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
	Intent *Intent `protobuf:"bytes,1,opt,name=intent" json:"intent,omitempty"`
	// Optional. The language of training phrases, parameters and rich messages
	// defined in `intent`. If not specified, the agent's default language is
	// used. [More than a dozen
	// languages](https://dialogflow.com/docs/reference/language) are supported.
	// Note: languages must be enabled in the agent, before they can be used.
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	// Optional. The mask to control which fields get updated.
	UpdateMask *google_protobuf3.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
	// Optional. The resource view to apply to the returned intent.
	IntentView IntentView `protobuf:"varint,4,opt,name=intent_view,json=intentView,enum=google.cloud.dialogflow.v2beta1.IntentView" json:"intent_view,omitempty"`
}

func (m *UpdateIntentRequest) Reset()                    { *m = UpdateIntentRequest{} }
func (m *UpdateIntentRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateIntentRequest) ProtoMessage()               {}
func (*UpdateIntentRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *UpdateIntentRequest) GetIntent() *Intent {
	if m != nil {
		return m.Intent
	}
	return nil
}

func (m *UpdateIntentRequest) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *UpdateIntentRequest) GetUpdateMask() *google_protobuf3.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *UpdateIntentRequest) GetIntentView() IntentView {
	if m != nil {
		return m.IntentView
	}
	return IntentView_INTENT_VIEW_UNSPECIFIED
}

// The request message for
// [Intents.DeleteIntent][google.cloud.dialogflow.v2beta1.Intents.DeleteIntent].
type DeleteIntentRequest struct {
	// Required. The name of the intent to delete.
	// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteIntentRequest) Reset()                    { *m = DeleteIntentRequest{} }
func (m *DeleteIntentRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteIntentRequest) ProtoMessage()               {}
func (*DeleteIntentRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *DeleteIntentRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The request message for
// [Intents.BatchUpdateIntents][google.cloud.dialogflow.v2beta1.Intents.BatchUpdateIntents].
type BatchUpdateIntentsRequest struct {
	// Required. The name of the agent to update or create intents in.
	// Format: `projects/<Project ID>/agent`.
	Parent string `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	// Required. The source of the intent batch.
	//
	// Types that are valid to be assigned to IntentBatch:
	//	*BatchUpdateIntentsRequest_IntentBatchUri
	//	*BatchUpdateIntentsRequest_IntentBatchInline
	IntentBatch isBatchUpdateIntentsRequest_IntentBatch `protobuf_oneof:"intent_batch"`
	// Optional. The language of training phrases, parameters and rich messages
	// defined in `intents`. If not specified, the agent's default language is
	// used. [More than a dozen
	// languages](https://dialogflow.com/docs/reference/language) are supported.
	// Note: languages must be enabled in the agent, before they can be used.
	LanguageCode string `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	// Optional. The mask to control which fields get updated.
	UpdateMask *google_protobuf3.FieldMask `protobuf:"bytes,5,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
	// Optional. The resource view to apply to the returned intent.
	IntentView IntentView `protobuf:"varint,6,opt,name=intent_view,json=intentView,enum=google.cloud.dialogflow.v2beta1.IntentView" json:"intent_view,omitempty"`
}

func (m *BatchUpdateIntentsRequest) Reset()                    { *m = BatchUpdateIntentsRequest{} }
func (m *BatchUpdateIntentsRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchUpdateIntentsRequest) ProtoMessage()               {}
func (*BatchUpdateIntentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

type isBatchUpdateIntentsRequest_IntentBatch interface {
	isBatchUpdateIntentsRequest_IntentBatch()
}

type BatchUpdateIntentsRequest_IntentBatchUri struct {
	IntentBatchUri string `protobuf:"bytes,2,opt,name=intent_batch_uri,json=intentBatchUri,oneof"`
}
type BatchUpdateIntentsRequest_IntentBatchInline struct {
	IntentBatchInline *IntentBatch `protobuf:"bytes,3,opt,name=intent_batch_inline,json=intentBatchInline,oneof"`
}

func (*BatchUpdateIntentsRequest_IntentBatchUri) isBatchUpdateIntentsRequest_IntentBatch()    {}
func (*BatchUpdateIntentsRequest_IntentBatchInline) isBatchUpdateIntentsRequest_IntentBatch() {}

func (m *BatchUpdateIntentsRequest) GetIntentBatch() isBatchUpdateIntentsRequest_IntentBatch {
	if m != nil {
		return m.IntentBatch
	}
	return nil
}

func (m *BatchUpdateIntentsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *BatchUpdateIntentsRequest) GetIntentBatchUri() string {
	if x, ok := m.GetIntentBatch().(*BatchUpdateIntentsRequest_IntentBatchUri); ok {
		return x.IntentBatchUri
	}
	return ""
}

func (m *BatchUpdateIntentsRequest) GetIntentBatchInline() *IntentBatch {
	if x, ok := m.GetIntentBatch().(*BatchUpdateIntentsRequest_IntentBatchInline); ok {
		return x.IntentBatchInline
	}
	return nil
}

func (m *BatchUpdateIntentsRequest) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *BatchUpdateIntentsRequest) GetUpdateMask() *google_protobuf3.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *BatchUpdateIntentsRequest) GetIntentView() IntentView {
	if m != nil {
		return m.IntentView
	}
	return IntentView_INTENT_VIEW_UNSPECIFIED
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BatchUpdateIntentsRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BatchUpdateIntentsRequest_OneofMarshaler, _BatchUpdateIntentsRequest_OneofUnmarshaler, _BatchUpdateIntentsRequest_OneofSizer, []interface{}{
		(*BatchUpdateIntentsRequest_IntentBatchUri)(nil),
		(*BatchUpdateIntentsRequest_IntentBatchInline)(nil),
	}
}

func _BatchUpdateIntentsRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BatchUpdateIntentsRequest)
	// intent_batch
	switch x := m.IntentBatch.(type) {
	case *BatchUpdateIntentsRequest_IntentBatchUri:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.IntentBatchUri)
	case *BatchUpdateIntentsRequest_IntentBatchInline:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IntentBatchInline); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BatchUpdateIntentsRequest.IntentBatch has unexpected type %T", x)
	}
	return nil
}

func _BatchUpdateIntentsRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BatchUpdateIntentsRequest)
	switch tag {
	case 2: // intent_batch.intent_batch_uri
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.IntentBatch = &BatchUpdateIntentsRequest_IntentBatchUri{x}
		return true, err
	case 3: // intent_batch.intent_batch_inline
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IntentBatch)
		err := b.DecodeMessage(msg)
		m.IntentBatch = &BatchUpdateIntentsRequest_IntentBatchInline{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BatchUpdateIntentsRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BatchUpdateIntentsRequest)
	// intent_batch
	switch x := m.IntentBatch.(type) {
	case *BatchUpdateIntentsRequest_IntentBatchUri:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.IntentBatchUri)))
		n += len(x.IntentBatchUri)
	case *BatchUpdateIntentsRequest_IntentBatchInline:
		s := proto.Size(x.IntentBatchInline)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The response message for
// [Intents.BatchUpdateIntents][google.cloud.dialogflow.v2beta1.Intents.BatchUpdateIntents].
type BatchUpdateIntentsResponse struct {
	// The collection of updated or created intents.
	Intents []*Intent `protobuf:"bytes,1,rep,name=intents" json:"intents,omitempty"`
}

func (m *BatchUpdateIntentsResponse) Reset()                    { *m = BatchUpdateIntentsResponse{} }
func (m *BatchUpdateIntentsResponse) String() string            { return proto.CompactTextString(m) }
func (*BatchUpdateIntentsResponse) ProtoMessage()               {}
func (*BatchUpdateIntentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *BatchUpdateIntentsResponse) GetIntents() []*Intent {
	if m != nil {
		return m.Intents
	}
	return nil
}

// The request message for
// [Intents.BatchDeleteIntents][google.cloud.dialogflow.v2beta1.Intents.BatchDeleteIntents].
type BatchDeleteIntentsRequest struct {
	// Required. The name of the agent to delete all entities types for. Format:
	// `projects/<Project ID>/agent`.
	Parent string `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	// Required. The collection of intents to delete. Only intent `name` must be
	// filled in.
	Intents []*Intent `protobuf:"bytes,2,rep,name=intents" json:"intents,omitempty"`
}

func (m *BatchDeleteIntentsRequest) Reset()                    { *m = BatchDeleteIntentsRequest{} }
func (m *BatchDeleteIntentsRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchDeleteIntentsRequest) ProtoMessage()               {}
func (*BatchDeleteIntentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *BatchDeleteIntentsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *BatchDeleteIntentsRequest) GetIntents() []*Intent {
	if m != nil {
		return m.Intents
	}
	return nil
}

// This message is a wrapper around a collection of intents.
type IntentBatch struct {
	// A collection of intents.
	Intents []*Intent `protobuf:"bytes,1,rep,name=intents" json:"intents,omitempty"`
}

func (m *IntentBatch) Reset()                    { *m = IntentBatch{} }
func (m *IntentBatch) String() string            { return proto.CompactTextString(m) }
func (*IntentBatch) ProtoMessage()               {}
func (*IntentBatch) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *IntentBatch) GetIntents() []*Intent {
	if m != nil {
		return m.Intents
	}
	return nil
}

func init() {
	proto.RegisterType((*Intent)(nil), "google.cloud.dialogflow.v2beta1.Intent")
	proto.RegisterType((*Intent_TrainingPhrase)(nil), "google.cloud.dialogflow.v2beta1.Intent.TrainingPhrase")
	proto.RegisterType((*Intent_TrainingPhrase_Part)(nil), "google.cloud.dialogflow.v2beta1.Intent.TrainingPhrase.Part")
	proto.RegisterType((*Intent_Parameter)(nil), "google.cloud.dialogflow.v2beta1.Intent.Parameter")
	proto.RegisterType((*Intent_Message)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message")
	proto.RegisterType((*Intent_Message_Text)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.Text")
	proto.RegisterType((*Intent_Message_Image)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.Image")
	proto.RegisterType((*Intent_Message_QuickReplies)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.QuickReplies")
	proto.RegisterType((*Intent_Message_Card)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.Card")
	proto.RegisterType((*Intent_Message_Card_Button)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.Card.Button")
	proto.RegisterType((*Intent_Message_SimpleResponse)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.SimpleResponse")
	proto.RegisterType((*Intent_Message_SimpleResponses)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.SimpleResponses")
	proto.RegisterType((*Intent_Message_BasicCard)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.BasicCard")
	proto.RegisterType((*Intent_Message_BasicCard_Button)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.BasicCard.Button")
	proto.RegisterType((*Intent_Message_BasicCard_Button_OpenUriAction)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.BasicCard.Button.OpenUriAction")
	proto.RegisterType((*Intent_Message_Suggestion)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.Suggestion")
	proto.RegisterType((*Intent_Message_Suggestions)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.Suggestions")
	proto.RegisterType((*Intent_Message_LinkOutSuggestion)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.LinkOutSuggestion")
	proto.RegisterType((*Intent_Message_ListSelect)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.ListSelect")
	proto.RegisterType((*Intent_Message_ListSelect_Item)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.ListSelect.Item")
	proto.RegisterType((*Intent_Message_CarouselSelect)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.CarouselSelect")
	proto.RegisterType((*Intent_Message_CarouselSelect_Item)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.CarouselSelect.Item")
	proto.RegisterType((*Intent_Message_SelectItemInfo)(nil), "google.cloud.dialogflow.v2beta1.Intent.Message.SelectItemInfo")
	proto.RegisterType((*Intent_FollowupIntentInfo)(nil), "google.cloud.dialogflow.v2beta1.Intent.FollowupIntentInfo")
	proto.RegisterType((*ListIntentsRequest)(nil), "google.cloud.dialogflow.v2beta1.ListIntentsRequest")
	proto.RegisterType((*ListIntentsResponse)(nil), "google.cloud.dialogflow.v2beta1.ListIntentsResponse")
	proto.RegisterType((*GetIntentRequest)(nil), "google.cloud.dialogflow.v2beta1.GetIntentRequest")
	proto.RegisterType((*CreateIntentRequest)(nil), "google.cloud.dialogflow.v2beta1.CreateIntentRequest")
	proto.RegisterType((*UpdateIntentRequest)(nil), "google.cloud.dialogflow.v2beta1.UpdateIntentRequest")
	proto.RegisterType((*DeleteIntentRequest)(nil), "google.cloud.dialogflow.v2beta1.DeleteIntentRequest")
	proto.RegisterType((*BatchUpdateIntentsRequest)(nil), "google.cloud.dialogflow.v2beta1.BatchUpdateIntentsRequest")
	proto.RegisterType((*BatchUpdateIntentsResponse)(nil), "google.cloud.dialogflow.v2beta1.BatchUpdateIntentsResponse")
	proto.RegisterType((*BatchDeleteIntentsRequest)(nil), "google.cloud.dialogflow.v2beta1.BatchDeleteIntentsRequest")
	proto.RegisterType((*IntentBatch)(nil), "google.cloud.dialogflow.v2beta1.IntentBatch")
	proto.RegisterEnum("google.cloud.dialogflow.v2beta1.IntentView", IntentView_name, IntentView_value)
	proto.RegisterEnum("google.cloud.dialogflow.v2beta1.Intent_WebhookState", Intent_WebhookState_name, Intent_WebhookState_value)
	proto.RegisterEnum("google.cloud.dialogflow.v2beta1.Intent_TrainingPhrase_Type", Intent_TrainingPhrase_Type_name, Intent_TrainingPhrase_Type_value)
	proto.RegisterEnum("google.cloud.dialogflow.v2beta1.Intent_Message_Platform", Intent_Message_Platform_name, Intent_Message_Platform_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Intents service

type IntentsClient interface {
	// Returns the list of all intents in the specified agent.
	ListIntents(ctx context.Context, in *ListIntentsRequest, opts ...grpc.CallOption) (*ListIntentsResponse, error)
	// Retrieves the specified intent.
	GetIntent(ctx context.Context, in *GetIntentRequest, opts ...grpc.CallOption) (*Intent, error)
	// Creates an intent in the specified agent.
	CreateIntent(ctx context.Context, in *CreateIntentRequest, opts ...grpc.CallOption) (*Intent, error)
	// Updates the specified intent.
	UpdateIntent(ctx context.Context, in *UpdateIntentRequest, opts ...grpc.CallOption) (*Intent, error)
	// Deletes the specified intent.
	DeleteIntent(ctx context.Context, in *DeleteIntentRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// Updates/Creates multiple intents in the specified agent.
	//
	// Operation <response:
	// [BatchUpdateIntentsResponse][google.cloud.dialogflow.v2beta1.BatchUpdateIntentsResponse]>
	BatchUpdateIntents(ctx context.Context, in *BatchUpdateIntentsRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error)
	// Deletes intents in the specified agent.
	//
	// Operation <response: [google.protobuf.Empty][google.protobuf.Empty]>
	BatchDeleteIntents(ctx context.Context, in *BatchDeleteIntentsRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error)
}

type intentsClient struct {
	cc *grpc.ClientConn
}

func NewIntentsClient(cc *grpc.ClientConn) IntentsClient {
	return &intentsClient{cc}
}

func (c *intentsClient) ListIntents(ctx context.Context, in *ListIntentsRequest, opts ...grpc.CallOption) (*ListIntentsResponse, error) {
	out := new(ListIntentsResponse)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Intents/ListIntents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intentsClient) GetIntent(ctx context.Context, in *GetIntentRequest, opts ...grpc.CallOption) (*Intent, error) {
	out := new(Intent)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Intents/GetIntent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intentsClient) CreateIntent(ctx context.Context, in *CreateIntentRequest, opts ...grpc.CallOption) (*Intent, error) {
	out := new(Intent)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Intents/CreateIntent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intentsClient) UpdateIntent(ctx context.Context, in *UpdateIntentRequest, opts ...grpc.CallOption) (*Intent, error) {
	out := new(Intent)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Intents/UpdateIntent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intentsClient) DeleteIntent(ctx context.Context, in *DeleteIntentRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Intents/DeleteIntent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intentsClient) BatchUpdateIntents(ctx context.Context, in *BatchUpdateIntentsRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error) {
	out := new(google_longrunning.Operation)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Intents/BatchUpdateIntents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intentsClient) BatchDeleteIntents(ctx context.Context, in *BatchDeleteIntentsRequest, opts ...grpc.CallOption) (*google_longrunning.Operation, error) {
	out := new(google_longrunning.Operation)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Intents/BatchDeleteIntents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Intents service

type IntentsServer interface {
	// Returns the list of all intents in the specified agent.
	ListIntents(context.Context, *ListIntentsRequest) (*ListIntentsResponse, error)
	// Retrieves the specified intent.
	GetIntent(context.Context, *GetIntentRequest) (*Intent, error)
	// Creates an intent in the specified agent.
	CreateIntent(context.Context, *CreateIntentRequest) (*Intent, error)
	// Updates the specified intent.
	UpdateIntent(context.Context, *UpdateIntentRequest) (*Intent, error)
	// Deletes the specified intent.
	DeleteIntent(context.Context, *DeleteIntentRequest) (*google_protobuf2.Empty, error)
	// Updates/Creates multiple intents in the specified agent.
	//
	// Operation <response:
	// [BatchUpdateIntentsResponse][google.cloud.dialogflow.v2beta1.BatchUpdateIntentsResponse]>
	BatchUpdateIntents(context.Context, *BatchUpdateIntentsRequest) (*google_longrunning.Operation, error)
	// Deletes intents in the specified agent.
	//
	// Operation <response: [google.protobuf.Empty][google.protobuf.Empty]>
	BatchDeleteIntents(context.Context, *BatchDeleteIntentsRequest) (*google_longrunning.Operation, error)
}

func RegisterIntentsServer(s *grpc.Server, srv IntentsServer) {
	s.RegisterService(&_Intents_serviceDesc, srv)
}

func _Intents_ListIntents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentsServer).ListIntents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Intents/ListIntents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentsServer).ListIntents(ctx, req.(*ListIntentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intents_GetIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentsServer).GetIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Intents/GetIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentsServer).GetIntent(ctx, req.(*GetIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intents_CreateIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentsServer).CreateIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Intents/CreateIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentsServer).CreateIntent(ctx, req.(*CreateIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intents_UpdateIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentsServer).UpdateIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Intents/UpdateIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentsServer).UpdateIntent(ctx, req.(*UpdateIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intents_DeleteIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentsServer).DeleteIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Intents/DeleteIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentsServer).DeleteIntent(ctx, req.(*DeleteIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intents_BatchUpdateIntents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateIntentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentsServer).BatchUpdateIntents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Intents/BatchUpdateIntents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentsServer).BatchUpdateIntents(ctx, req.(*BatchUpdateIntentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intents_BatchDeleteIntents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeleteIntentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentsServer).BatchDeleteIntents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Intents/BatchDeleteIntents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentsServer).BatchDeleteIntents(ctx, req.(*BatchDeleteIntentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Intents_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dialogflow.v2beta1.Intents",
	HandlerType: (*IntentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIntents",
			Handler:    _Intents_ListIntents_Handler,
		},
		{
			MethodName: "GetIntent",
			Handler:    _Intents_GetIntent_Handler,
		},
		{
			MethodName: "CreateIntent",
			Handler:    _Intents_CreateIntent_Handler,
		},
		{
			MethodName: "UpdateIntent",
			Handler:    _Intents_UpdateIntent_Handler,
		},
		{
			MethodName: "DeleteIntent",
			Handler:    _Intents_DeleteIntent_Handler,
		},
		{
			MethodName: "BatchUpdateIntents",
			Handler:    _Intents_BatchUpdateIntents_Handler,
		},
		{
			MethodName: "BatchDeleteIntents",
			Handler:    _Intents_BatchDeleteIntents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/dialogflow/v2beta1/intent.proto",
}

func init() { proto.RegisterFile("google/cloud/dialogflow/v2beta1/intent.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 2555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5a, 0x4d, 0x73, 0x23, 0x47,
	0xf9, 0xf7, 0xe8, 0xc5, 0x92, 0x1e, 0xc9, 0xb2, 0xdc, 0xde, 0x6c, 0xb4, 0x93, 0xa4, 0xe2, 0x28,
	0x2f, 0x7f, 0xc7, 0xff, 0x20, 0x11, 0x25, 0xe4, 0xc5, 0x4b, 0x76, 0x91, 0x6d, 0xd9, 0x16, 0x96,
	0x2d, 0xed, 0x58, 0xde, 0x65, 0xb7, 0x80, 0xa9, 0x91, 0xd4, 0xd6, 0x0e, 0x1e, 0xcd, 0xcc, 0x4e,
	0xb7, 0xec, 0x28, 0x90, 0x2a, 0x8a, 0x2a, 0xe0, 0xc0, 0x85, 0x2a, 0x4e, 0x14, 0x37, 0x38, 0x85,
	0xe2, 0x40, 0xe5, 0xc6, 0x27, 0xa0, 0x38, 0x70, 0xe2, 0x98, 0x03, 0x45, 0x41, 0xf1, 0x19, 0xb8,
	0x41, 0xf5, 0xcb, 0x48, 0x23, 0x4b, 0x8b, 0x24, 0x7b, 0xe1, 0xc2, 0x6d, 0xfa, 0xe9, 0xee, 0xdf,
	0xf3, 0xd6, 0xfd, 0x7b, 0xba, 0x5b, 0x82, 0xb7, 0x3a, 0x8e, 0xd3, 0xb1, 0x70, 0xa1, 0x65, 0x39,
	0xbd, 0x76, 0xa1, 0x6d, 0x1a, 0x96, 0xd3, 0x39, 0xb5, 0x9c, 0x8b, 0xc2, 0x79, 0xb1, 0x89, 0xa9,
	0xf1, 0x76, 0xc1, 0xb4, 0x29, 0xb6, 0x69, 0xde, 0xf5, 0x1c, 0xea, 0xa0, 0x97, 0xc5, 0xe8, 0x3c,
	0x1f, 0x9d, 0x1f, 0x8e, 0xce, 0xcb, 0xd1, 0xea, 0x8b, 0x12, 0xce, 0x70, 0xcd, 0x82, 0x61, 0xdb,
	0x0e, 0x35, 0xa8, 0xe9, 0xd8, 0x44, 0x4c, 0x57, 0xbf, 0x34, 0x4d, 0x59, 0xcb, 0xb1, 0x29, 0xfe,
	0x58, 0x6a, 0x53, 0x5f, 0x95, 0xc3, 0x2d, 0xc7, 0xee, 0x78, 0x3d, 0xdb, 0x36, 0xed, 0x4e, 0xc1,
	0x71, 0xb1, 0x37, 0x82, 0xf9, 0x82, 0x1c, 0xc4, 0x5b, 0xcd, 0xde, 0x69, 0x01, 0x77, 0x5d, 0xda,
	0x97, 0x9d, 0x6b, 0x97, 0x3b, 0x4f, 0x4d, 0x6c, 0xb5, 0xf5, 0xae, 0x41, 0xce, 0xe4, 0x88, 0x17,
	0x2f, 0x8f, 0x20, 0xd4, 0xeb, 0xb5, 0xa4, 0x05, 0xb9, 0xdf, 0xbf, 0x09, 0x8b, 0x15, 0x1e, 0x00,
	0x84, 0x20, 0x62, 0x1b, 0x5d, 0x9c, 0x55, 0xd6, 0x94, 0xf5, 0x84, 0xc6, 0xbf, 0xd1, 0x2b, 0x90,
	0x6a, 0x9b, 0xc4, 0xb5, 0x8c, 0xbe, 0xce, 0xfb, 0x42, 0xbc, 0x2f, 0x29, 0x65, 0x47, 0x6c, 0xc8,
	0x43, 0x58, 0xba, 0xc0, 0xcd, 0xc7, 0x8e, 0x73, 0xa6, 0x13, 0x6a, 0x50, 0x9c, 0x5d, 0x5c, 0x53,
	0xd6, 0xd3, 0xc5, 0x77, 0xf3, 0x53, 0x22, 0x99, 0x17, 0x6a, 0xf3, 0x0f, 0xc4, 0xe4, 0x63, 0x36,
	0x57, 0x4b, 0x5d, 0x04, 0x5a, 0x48, 0x85, 0xb8, 0xeb, 0x99, 0x8e, 0x67, 0xd2, 0x7e, 0x36, 0xbc,
	0xa6, 0xac, 0x47, 0xb5, 0x41, 0x1b, 0xbd, 0x0c, 0x49, 0x93, 0xe8, 0xa7, 0x86, 0x65, 0x35, 0x8d,
	0xd6, 0x59, 0x36, 0xb2, 0xa6, 0xac, 0xc7, 0x35, 0x30, 0xc9, 0xae, 0x94, 0xa0, 0x97, 0x00, 0xba,
	0x96, 0x8e, 0x6d, 0xa3, 0x69, 0xe1, 0x76, 0x36, 0xca, 0xfb, 0x13, 0x5d, 0xab, 0x2c, 0x04, 0x28,
	0x0f, 0xab, 0xa6, 0xed, 0xf6, 0xa8, 0x2e, 0x33, 0xc2, 0xfd, 0x23, 0xd9, 0xd8, 0x5a, 0x78, 0x3d,
	0xa1, 0xad, 0xf0, 0xae, 0x6d, 0xd1, 0xc3, 0xbc, 0x24, 0xe8, 0x26, 0x2c, 0xe2, 0x73, 0x6c, 0x53,
	0x92, 0x8d, 0xf3, 0x21, 0xb2, 0x85, 0x0c, 0xc8, 0x50, 0xcf, 0x30, 0x59, 0xea, 0x74, 0xf7, 0xb1,
	0x67, 0x10, 0x4c, 0xb2, 0x89, 0xb5, 0xf0, 0x7a, 0xb2, 0xf8, 0xde, 0xac, 0x11, 0x68, 0xc8, 0xf9,
	0x75, 0x3e, 0x5d, 0x5b, 0xa6, 0x23, 0x6d, 0xae, 0xda, 0x68, 0xb1, 0x15, 0x91, 0x05, 0x1e, 0x7e,
	0xd9, 0x42, 0xf7, 0x60, 0xd9, 0xe9, 0xd1, 0x80, 0x0f, 0x24, 0x9b, 0xe4, 0x9a, 0xd7, 0xa7, 0x6a,
	0x96, 0xae, 0x69, 0x69, 0x01, 0x20, 0x9b, 0x04, 0xbd, 0x0e, 0x69, 0x0f, 0x13, 0x1c, 0x40, 0x4c,
	0xf1, 0xc0, 0x2d, 0x71, 0xe9, 0x60, 0xd8, 0x3d, 0x00, 0xd7, 0xf0, 0x8c, 0x2e, 0xa6, 0xd8, 0x23,
	0xd9, 0x25, 0xae, 0xf4, 0xed, 0x59, 0xdd, 0xad, 0xfb, 0x33, 0xb5, 0x00, 0x08, 0x3a, 0x80, 0x78,
	0x17, 0x13, 0x62, 0x74, 0x30, 0xc9, 0xa6, 0x39, 0x60, 0x61, 0x56, 0xc0, 0x43, 0x31, 0x4f, 0x1b,
	0x00, 0xa0, 0x73, 0x50, 0xdb, 0xf8, 0xd4, 0xe8, 0x59, 0x54, 0xf7, 0x30, 0x71, 0x1d, 0x9b, 0x60,
	0xdd, 0xb5, 0x0c, 0x7a, 0xea, 0x78, 0x5d, 0x92, 0x5d, 0x5e, 0x0b, 0xaf, 0xa7, 0x8b, 0x1f, 0xcc,
	0x09, 0x9f, 0xaf, 0x4b, 0x00, 0x2d, 0x2b, 0xb1, 0x35, 0x09, 0xed, 0x77, 0x10, 0xf4, 0x21, 0xdc,
	0xf2, 0x1c, 0x87, 0xea, 0xa7, 0x8e, 0x65, 0x39, 0x17, 0x3d, 0x57, 0x17, 0xdc, 0x22, 0xf6, 0x4e,
	0x86, 0x27, 0xef, 0x26, 0x1b, 0xb0, 0x2b, 0xfb, 0x85, 0x06, 0xbe, 0x8d, 0x3e, 0x82, 0x17, 0x5c,
	0xc3, 0x63, 0x83, 0x27, 0x4e, 0x5e, 0xe1, 0x93, 0xb3, 0x62, 0xc8, 0x84, 0xe9, 0x16, 0xdc, 0xb8,
	0x3c, 0xcf, 0xb4, 0x4f, 0x9d, 0x2c, 0xe2, 0xa1, 0xdc, 0x9c, 0xd5, 0xd7, 0x51, 0xe4, 0x8a, 0x7d,
	0xea, 0x68, 0xe8, 0x74, 0x4c, 0xa6, 0xfe, 0x2a, 0x0c, 0xe9, 0xd1, 0x55, 0x3b, 0x91, 0x3d, 0x6a,
	0x10, 0xa1, 0x7d, 0x57, 0xb0, 0x46, 0xba, 0x78, 0xfb, 0x6a, 0xfb, 0x21, 0xdf, 0xe8, 0xbb, 0x58,
	0xe3, 0x40, 0xe8, 0x1e, 0x44, 0x5d, 0xc3, 0xa3, 0x24, 0x1b, 0xe6, 0x6e, 0x5d, 0x15, 0xb1, 0x6e,
	0x78, 0x54, 0x13, 0x48, 0x68, 0x03, 0x56, 0xa8, 0xd9, 0xc5, 0x44, 0x37, 0xda, 0x6d, 0xdc, 0xd6,
	0x5b, 0x4e, 0xcf, 0xa6, 0x9c, 0x4d, 0xa2, 0xda, 0x32, 0xef, 0x28, 0x31, 0xf9, 0x36, 0x13, 0xab,
	0x14, 0x22, 0x6c, 0x2a, 0xf3, 0x95, 0xed, 0x03, 0xdf, 0x57, 0xf6, 0xcd, 0xf8, 0x08, 0xdb, 0xd4,
	0xa4, 0x7d, 0x7d, 0xe0, 0x72, 0x42, 0x03, 0x21, 0x62, 0x1e, 0xa0, 0x1b, 0x10, 0x35, 0x2c, 0xd3,
	0x20, 0x9c, 0xc9, 0x12, 0x9a, 0x68, 0x30, 0x82, 0xed, 0x11, 0xec, 0xe9, 0x6d, 0x7c, 0x6a, 0xda,
	0xb8, 0x2d, 0x79, 0x2c, 0xc9, 0x64, 0x3b, 0x42, 0x94, 0x7b, 0x1f, 0x22, 0x12, 0x20, 0xd3, 0x78,
	0x58, 0x2f, 0xeb, 0x27, 0x47, 0xc7, 0xf5, 0xf2, 0x76, 0x65, 0xb7, 0x52, 0xde, 0xc9, 0x2c, 0xa0,
	0x24, 0xc4, 0xca, 0xdf, 0x28, 0x1d, 0xd6, 0xab, 0xe5, 0x8c, 0x82, 0x52, 0x10, 0x6f, 0x94, 0x0f,
	0xeb, 0xd5, 0x52, 0xa3, 0x9c, 0x09, 0xa9, 0x3f, 0x0e, 0x41, 0x62, 0xb0, 0xd9, 0xae, 0x4a, 0xef,
	0x37, 0x20, 0x7a, 0x6e, 0x58, 0x3d, 0xec, 0x9b, 0xcd, 0x1b, 0xe8, 0x55, 0x58, 0xf2, 0x37, 0x98,
	0xe8, 0x8d, 0xf0, 0xde, 0x94, 0x14, 0xde, 0xe7, 0x83, 0xde, 0x87, 0x6c, 0x20, 0x24, 0xfa, 0x88,
	0xa6, 0x28, 0x1f, 0xff, 0xdc, 0x30, 0x3e, 0x3b, 0x01, 0x9d, 0x2f, 0x42, 0xa2, 0x6b, 0xd8, 0x6d,
	0x83, 0x3a, 0x5e, 0x9f, 0x97, 0x13, 0xc6, 0xdc, 0xbe, 0x00, 0x65, 0x21, 0xe6, 0x7a, 0x4e, 0xd7,
	0xa5, 0x3e, 0x5b, 0xfb, 0x4d, 0xf4, 0x3c, 0xc4, 0x4c, 0xa2, 0x5b, 0x26, 0xa1, 0xd9, 0x38, 0x9f,
	0xb5, 0x68, 0x92, 0xaa, 0x49, 0xa8, 0xfa, 0xd7, 0x5b, 0x10, 0x93, 0xdb, 0x18, 0x7d, 0x3d, 0x90,
	0xbc, 0xe4, 0xec, 0x65, 0xca, 0x67, 0x81, 0x06, 0xfe, 0x98, 0xee, 0x2f, 0xc8, 0xa4, 0x1f, 0x42,
	0xd4, 0xec, 0x1a, 0x1d, 0x11, 0xb8, 0x64, 0xf1, 0x2b, 0xf3, 0x82, 0x55, 0xd8, 0xe4, 0xfd, 0x05,
	0x4d, 0xa0, 0xa0, 0x16, 0x2c, 0x3d, 0xe9, 0x99, 0xad, 0x33, 0xdd, 0xc3, 0xae, 0x65, 0x62, 0xb1,
	0x54, 0x92, 0xc5, 0xaf, 0xce, 0x0b, 0x7b, 0x8f, 0x81, 0x68, 0x02, 0x63, 0x7f, 0x41, 0x4b, 0x3d,
	0x09, 0xb4, 0x99, 0xff, 0x2d, 0xc3, 0x13, 0x2b, 0xed, 0x0a, 0xfe, 0x6f, 0x1b, 0x5e, 0x9b, 0xf9,
	0xcf, 0x30, 0xd0, 0x3b, 0x10, 0x73, 0x8d, 0xbe, 0xe5, 0x18, 0xa2, 0xc0, 0x26, 0x8b, 0xcf, 0xfb,
	0x70, 0xfe, 0x69, 0x23, 0x7f, 0xcc, 0x4f, 0x1b, 0xfb, 0x0b, 0x9a, 0x3f, 0x12, 0x59, 0x90, 0x21,
	0x66, 0xd7, 0xb5, 0xf0, 0x80, 0x9b, 0x59, 0x22, 0xd9, 0xec, 0xbb, 0xf3, 0x1a, 0x73, 0xcc, 0x71,
	0x7c, 0x1e, 0x66, 0xbe, 0x2e, 0x93, 0x51, 0x11, 0x7a, 0x04, 0xd0, 0x34, 0x88, 0xd9, 0xd2, 0xb9,
	0xd3, 0x71, 0xae, 0xe7, 0xc3, 0x79, 0xf5, 0x6c, 0x31, 0x04, 0xe9, 0x79, 0xa2, 0xe9, 0x37, 0x90,
	0x0e, 0x49, 0xd2, 0xeb, 0x74, 0x30, 0xe1, 0xc7, 0xb5, 0x6c, 0x82, 0x83, 0xdf, 0x9e, 0xdb, 0x89,
	0x21, 0xc4, 0xfe, 0x82, 0x16, 0x44, 0x44, 0x04, 0x56, 0x2d, 0xd3, 0x3e, 0xd3, 0x9d, 0x1e, 0xd5,
	0x87, 0x72, 0x7e, 0x0c, 0x48, 0x16, 0x4b, 0xf3, 0x2a, 0xaa, 0x9a, 0xf6, 0x59, 0xad, 0x47, 0x87,
	0xfa, 0xf6, 0x17, 0xb4, 0x15, 0xeb, 0xb2, 0x10, 0x7d, 0x0b, 0x92, 0x6c, 0x0b, 0xe9, 0x04, 0x5b,
	0xb8, 0x45, 0xb3, 0x49, 0xae, 0x6c, 0x73, 0x7e, 0x65, 0x84, 0x1e, 0x73, 0x84, 0xfd, 0x05, 0x0d,
	0xac, 0x41, 0x0b, 0x99, 0xb0, 0xdc, 0x32, 0x3c, 0xa7, 0x47, 0xb0, 0xe5, 0xab, 0x48, 0x71, 0x15,
	0x77, 0xae, 0xb0, 0x14, 0x39, 0xcc, 0x40, 0x4d, 0xba, 0x35, 0x22, 0x41, 0x0d, 0x88, 0xfb, 0x55,
	0x5f, 0x9e, 0x4a, 0xaf, 0x5e, 0xf4, 0x07, 0x48, 0xaa, 0x0a, 0x11, 0x46, 0x02, 0x81, 0x2a, 0x10,
	0xf6, 0xab, 0x80, 0xfa, 0x1a, 0x44, 0xf9, 0x9e, 0x46, 0x2f, 0x40, 0x82, 0xef, 0x69, 0xbd, 0xe7,
	0x99, 0x92, 0x72, 0xe3, 0x5c, 0x70, 0xe2, 0x99, 0x6a, 0x05, 0x52, 0xc1, 0x2d, 0xca, 0x38, 0x96,
	0x9a, 0xd4, 0xf2, 0xb9, 0x59, 0x34, 0x18, 0xc7, 0x8e, 0xb2, 0x41, 0x88, 0x2b, 0x1a, 0xd9, 0xcd,
	0xea, 0xdf, 0x15, 0x88, 0xf0, 0xb5, 0x38, 0x19, 0x43, 0x85, 0x38, 0xe9, 0x35, 0x45, 0x87, 0x20,
	0xf7, 0x41, 0x7b, 0xd4, 0xc4, 0xf0, 0xa8, 0x89, 0xe8, 0x04, 0x62, 0xcd, 0x1e, 0xa5, 0x6c, 0x59,
	0x47, 0xe6, 0xab, 0xb5, 0x41, 0xa2, 0xc8, 0x6f, 0x71, 0x0c, 0xcd, 0xc7, 0x52, 0x3f, 0x80, 0x45,
	0x21, 0x9a, 0x58, 0x43, 0xd9, 0x79, 0xdf, 0x21, 0x94, 0x1f, 0xe8, 0xa5, 0xb5, 0x7e, 0x5b, 0xed,
	0x42, 0x7a, 0x74, 0xb7, 0xa3, 0xd7, 0x20, 0xcd, 0x0f, 0xee, 0xd4, 0xd1, 0x89, 0x8b, 0x71, 0xeb,
	0xb1, 0xc4, 0x4a, 0x31, 0x69, 0xc3, 0x39, 0xe6, 0x32, 0xa6, 0x87, 0x90, 0xae, 0x25, 0xf1, 0xf8,
	0x77, 0xb0, 0xec, 0x71, 0x1b, 0xc2, 0x23, 0x65, 0x8f, 0x25, 0x57, 0xfd, 0x1e, 0x2c, 0x5f, 0x22,
	0x17, 0x64, 0x4e, 0xe0, 0x2d, 0x85, 0xc7, 0xe6, 0xce, 0xf5, 0x78, 0x6b, 0x8c, 0xb4, 0xd4, 0x3f,
	0x84, 0x21, 0x31, 0xe0, 0x9c, 0x2b, 0xa4, 0xf6, 0x75, 0x48, 0xb3, 0xa5, 0x6a, 0x50, 0x8a, 0xdb,
	0x41, 0x17, 0x97, 0x06, 0x52, 0xbe, 0x82, 0x0f, 0xfc, 0xf2, 0x15, 0xb9, 0x46, 0xf9, 0xf2, 0x8b,
	0xd7, 0xa3, 0xe1, 0x8a, 0x89, 0xf2, 0xa8, 0x7c, 0xed, 0xca, 0x2c, 0x3b, 0xb6, 0x6c, 0x7e, 0xa7,
	0x0c, 0xd6, 0xcd, 0xe4, 0x60, 0x9c, 0xc3, 0xb2, 0xe3, 0x62, 0x9b, 0x2d, 0x65, 0x5d, 0xde, 0x95,
	0x44, 0x49, 0x3e, 0xba, 0xae, 0x11, 0xf9, 0x9a, 0x8b, 0xed, 0x13, 0xcf, 0x2c, 0x71, 0x54, 0x6d,
	0xc9, 0x09, 0x36, 0xd5, 0x57, 0x60, 0x69, 0xa4, 0x1f, 0x65, 0x20, 0x3c, 0xdc, 0xf1, 0xec, 0x53,
	0xcd, 0x01, 0x04, 0xc8, 0x75, 0xa2, 0xf9, 0xea, 0x19, 0x24, 0x03, 0x55, 0x00, 0x7d, 0x73, 0xb4,
	0xae, 0x28, 0xf3, 0x9d, 0xe1, 0xc7, 0xeb, 0xca, 0x48, 0x51, 0x51, 0xeb, 0xb0, 0x32, 0x56, 0x09,
	0xd0, 0x9b, 0x90, 0x69, 0xb3, 0x4f, 0x9b, 0x3f, 0x3d, 0xe8, 0x81, 0x93, 0xe2, 0x72, 0x40, 0xce,
	0x4f, 0x67, 0xd2, 0xc5, 0xd0, 0xd0, 0xc5, 0x2f, 0x42, 0x00, 0x43, 0xbe, 0x7f, 0x4a, 0x8a, 0x4e,
	0x20, 0x6a, 0x52, 0xdc, 0x15, 0x34, 0x76, 0x85, 0x5a, 0x3f, 0x54, 0x90, 0xaf, 0x50, 0xdc, 0xd5,
	0x04, 0x9a, 0xfa, 0x67, 0x05, 0x22, 0xac, 0x8d, 0x34, 0x88, 0xf0, 0x1b, 0x8f, 0x72, 0xb5, 0x62,
	0x22, 0xa0, 0x19, 0x12, 0xbf, 0xf5, 0x70, 0xac, 0xa1, 0x27, 0xa1, 0xa0, 0x27, 0x6b, 0x90, 0x6c,
	0x63, 0xd2, 0xf2, 0x4c, 0x97, 0x2f, 0x34, 0x9f, 0x3d, 0x86, 0xa2, 0x67, 0xba, 0xb1, 0xd4, 0x3f,
	0x86, 0x20, 0x3d, 0x5a, 0xea, 0xd0, 0x43, 0x3f, 0x96, 0x62, 0x69, 0x6c, 0x5f, 0xaf, 0x72, 0xfe,
	0x8f, 0xc5, 0xf3, 0x0e, 0xa4, 0x47, 0x8d, 0x63, 0x2b, 0xfa, 0x0c, 0xf7, 0xfd, 0x4d, 0x7b, 0x86,
	0xfb, 0x9c, 0x5c, 0xfb, 0xb6, 0x63, 0xf7, 0xbb, 0x7e, 0xd9, 0x1d, 0xb4, 0x73, 0x3f, 0x51, 0x20,
	0xee, 0x1f, 0x0b, 0x50, 0x16, 0x6e, 0xb0, 0xeb, 0xd6, 0x6e, 0x4d, 0x3b, 0xbc, 0x74, 0x31, 0x4b,
	0x41, 0x7c, 0xb7, 0xb4, 0x5d, 0xde, 0xaa, 0xd5, 0x0e, 0x32, 0x0a, 0x4a, 0x40, 0xf4, 0xb8, 0x5a,
	0xda, 0x3e, 0xc8, 0x84, 0xc4, 0x25, 0xad, 0x5a, 0xde, 0xd3, 0x4a, 0x87, 0x99, 0x30, 0x8a, 0x41,
	0xf8, 0xa0, 0x72, 0x90, 0x89, 0xf0, 0x11, 0x07, 0x0f, 0xeb, 0xe5, 0x4c, 0x14, 0xc5, 0x21, 0x52,
	0xad, 0x1c, 0x95, 0x33, 0x8b, 0x4c, 0x78, 0xbf, 0xb2, 0x55, 0xd6, 0x32, 0x31, 0xf4, 0x1c, 0xac,
	0x94, 0xb6, 0x1b, 0x95, 0xda, 0xd1, 0xb1, 0x5e, 0x3b, 0xd2, 0xf7, 0x6a, 0xb5, 0xbd, 0x6a, 0x39,
	0x13, 0xdf, 0x4a, 0x40, 0x4c, 0x3e, 0x7b, 0xa8, 0x3f, 0x54, 0x00, 0x8d, 0x5f, 0xe0, 0xd1, 0x97,
	0xc7, 0x9f, 0x06, 0x02, 0xdb, 0xfb, 0xd2, 0xf5, 0x7e, 0x96, 0xb7, 0x88, 0xd0, 0xbf, 0x7f, 0x8b,
	0xc8, 0x51, 0x48, 0x05, 0x1f, 0xf5, 0xd0, 0x4b, 0x70, 0xeb, 0x41, 0x79, 0x6b, 0xbf, 0x56, 0x3b,
	0xd0, 0x8f, 0x1b, 0xa5, 0xc6, 0xe5, 0x1b, 0xec, 0x2d, 0x78, 0x6e, 0xb4, 0xbb, 0x7c, 0x54, 0xda,
	0xaa, 0x96, 0x77, 0x32, 0x0a, 0xda, 0x80, 0x37, 0x26, 0x76, 0xe9, 0xbb, 0x35, 0x4d, 0x3f, 0xae,
	0xd6, 0x1a, 0xfa, 0x6e, 0xa5, 0x5a, 0xad, 0x1c, 0xed, 0x65, 0x42, 0xb9, 0x2f, 0x14, 0x40, 0x8c,
	0x23, 0x84, 0x21, 0x44, 0xc3, 0x4f, 0x7a, 0x98, 0x50, 0x74, 0x13, 0x16, 0x85, 0xa1, 0xd2, 0x5f,
	0xd9, 0x62, 0xa7, 0x2b, 0xcb, 0xb0, 0x3b, 0x3d, 0x76, 0x00, 0x6a, 0x39, 0x6d, 0xdf, 0xab, 0x94,
	0x2f, 0xdc, 0x76, 0xda, 0x18, 0x55, 0x21, 0x29, 0x1d, 0x3f, 0x37, 0xf1, 0x05, 0x5f, 0x99, 0xe9,
	0xe2, 0xff, 0xcf, 0xb8, 0xfa, 0xee, 0x9b, 0xf8, 0x42, 0x03, 0x73, 0xf0, 0xcd, 0x0e, 0x5c, 0x2e,
	0x53, 0x47, 0xcc, 0x4f, 0xb0, 0x7c, 0x62, 0x88, 0x33, 0xc1, 0xb1, 0xf9, 0x09, 0x0b, 0x12, 0xf0,
	0x4e, 0xea, 0x9c, 0x61, 0x5b, 0x5e, 0x8f, 0xf9, 0xf0, 0x06, 0x13, 0xe4, 0xbe, 0xaf, 0xc0, 0xea,
	0x88, 0x77, 0xf2, 0x10, 0x54, 0x82, 0x98, 0xd0, 0xe0, 0x73, 0xc1, 0xff, 0xcd, 0x68, 0x9d, 0xe6,
	0xcf, 0x43, 0x6f, 0xc0, 0xb2, 0xcd, 0xce, 0x51, 0x01, 0xf5, 0x22, 0x16, 0x4b, 0x4c, 0x5c, 0x1f,
	0x98, 0xf0, 0x73, 0x05, 0x32, 0x7b, 0x58, 0x5a, 0xe0, 0x87, 0x77, 0xd2, 0xab, 0xc2, 0x7f, 0x3f,
	0xb4, 0xb9, 0xbf, 0x28, 0xb0, 0xba, 0xed, 0x61, 0x83, 0xe2, 0x51, 0xf3, 0x9e, 0x96, 0xfd, 0xbb,
	0xb0, 0x28, 0x66, 0xcb, 0x63, 0xc2, 0xcc, 0x51, 0x93, 0xd3, 0xc6, 0x7d, 0x0c, 0x4f, 0xf7, 0x31,
	0x72, 0x3d, 0x1f, 0x7f, 0x14, 0x82, 0xd5, 0x13, 0xb7, 0x3d, 0xe6, 0xe3, 0xd0, 0x17, 0xe5, 0x19,
	0xf9, 0x32, 0x29, 0x5f, 0xb7, 0x21, 0xd9, 0xe3, 0xca, 0xf9, 0x6f, 0x0b, 0xf2, 0x65, 0x42, 0x1d,
	0xbb, 0xee, 0xef, 0x9a, 0xd8, 0x6a, 0x1f, 0x1a, 0xe4, 0x4c, 0x03, 0x31, 0x9c, 0x7d, 0x3f, 0xe3,
	0x40, 0xbc, 0x09, 0xab, 0x3b, 0xd8, 0xc2, 0x97, 0xe3, 0x30, 0x61, 0x29, 0xe6, 0xfe, 0x19, 0x82,
	0x5b, 0x5b, 0x06, 0x6d, 0x3d, 0x0e, 0x06, 0x6e, 0x2a, 0x37, 0x6c, 0x40, 0x46, 0x9a, 0xdb, 0x64,
	0x73, 0xf5, 0xc1, 0x71, 0x87, 0xdd, 0x31, 0x45, 0x8f, 0x00, 0xf5, 0x4c, 0xf4, 0x6d, 0x58, 0x1d,
	0x19, 0x6b, 0xda, 0x96, 0x69, 0x63, 0x19, 0x9f, 0xb7, 0x66, 0x74, 0x91, 0xa3, 0xb1, 0xdb, 0x78,
	0x00, 0xbc, 0xc2, 0x81, 0xc6, 0x93, 0x13, 0x99, 0x9e, 0x9c, 0xe8, 0x75, 0x92, 0xb3, 0x78, 0xad,
	0xe4, 0x6c, 0xa5, 0x21, 0x15, 0x8c, 0x47, 0x4e, 0x07, 0x75, 0x52, 0x02, 0x9e, 0x19, 0x7d, 0xe5,
	0xce, 0x65, 0x86, 0x83, 0x4b, 0x62, 0x6a, 0x86, 0x03, 0x7a, 0x43, 0x57, 0xd4, 0x5b, 0x87, 0x64,
	0x20, 0x79, 0xcf, 0xc0, 0x93, 0x8d, 0xbb, 0x00, 0x95, 0x60, 0xb5, 0x78, 0xbe, 0x72, 0xd4, 0x28,
	0x1f, 0x35, 0xf4, 0xfb, 0x95, 0xf2, 0x83, 0x4b, 0x35, 0xf3, 0x06, 0x64, 0x82, 0x9d, 0xbb, 0x27,
	0xd5, 0x6a, 0x46, 0x29, 0x7e, 0x9e, 0x80, 0x98, 0x0c, 0x00, 0xfa, 0x8d, 0x02, 0xc9, 0x40, 0xc1,
	0x40, 0xef, 0x4c, 0x35, 0x67, 0xbc, 0x78, 0xaa, 0xef, 0xce, 0x37, 0x49, 0x24, 0x35, 0x57, 0xfc,
	0xc1, 0x9f, 0xfe, 0xf6, 0xb3, 0xd0, 0x5b, 0x68, 0x63, 0xf0, 0xab, 0xe7, 0x77, 0x45, 0xd8, 0x3f,
	0x72, 0x3d, 0xe7, 0x3b, 0xb8, 0x45, 0x49, 0x61, 0xa3, 0x60, 0x74, 0xb0, 0x4d, 0x3f, 0x2d, 0xf8,
	0x45, 0xe8, 0x17, 0x0a, 0x24, 0x06, 0xc5, 0x05, 0x4d, 0xff, 0x2d, 0xe9, 0x72, 0x21, 0x52, 0x67,
	0x0d, 0xf7, 0x24, 0xeb, 0x18, 0x55, 0x8c, 0xd9, 0xe6, 0x9b, 0x56, 0xd8, 0xf8, 0x14, 0x7d, 0xa6,
	0x40, 0x2a, 0x58, 0x5e, 0xd0, 0xf4, 0xc0, 0x4c, 0xa8, 0x46, 0xb3, 0xdb, 0xb8, 0xc9, 0x6d, 0x7c,
	0x37, 0x37, 0x47, 0x04, 0x37, 0x7d, 0x36, 0xff, 0xad, 0x02, 0xa9, 0xe0, 0x66, 0x9b, 0xc1, 0xd6,
	0x09, 0x55, 0x65, 0x76, 0x5b, 0x4b, 0xdc, 0xd6, 0xdb, 0xc5, 0xb7, 0x87, 0xb6, 0xca, 0x5f, 0xd4,
	0xa7, 0x85, 0x75, 0x60, 0xf2, 0x4f, 0x15, 0x48, 0x05, 0xb7, 0xef, 0x0c, 0x26, 0x4f, 0x28, 0x00,
	0xea, 0xcd, 0x31, 0xc2, 0x2b, 0x77, 0x5d, 0xda, 0xf7, 0x33, 0xbe, 0x31, 0x4f, 0xc6, 0x3f, 0x57,
	0x00, 0x8d, 0xf3, 0x16, 0x9a, 0x7e, 0x09, 0x7f, 0x6a, 0xb5, 0x51, 0x5f, 0xf2, 0xe7, 0x06, 0x7e,
	0xed, 0xcf, 0xd7, 0xfc, 0x5f, 0xfb, 0xfd, 0x38, 0xe6, 0xde, 0x9b, 0x23, 0xe7, 0xcd, 0xa1, 0xb2,
	0x4d, 0x65, 0x63, 0x68, 0xf4, 0x08, 0x17, 0xce, 0x6a, 0xf4, 0x24, 0x02, 0xfd, 0x8f, 0x19, 0x2d,
	0x94, 0x6d, 0x2a, 0x1b, 0x5b, 0x9f, 0x29, 0xf0, 0x6a, 0xcb, 0xe9, 0x4e, 0xb3, 0x71, 0x4b, 0xb2,
	0x6d, 0x9d, 0xe5, 0xb6, 0xae, 0x3c, 0xaa, 0xc8, 0xf1, 0x1d, 0x87, 0x55, 0xc2, 0xbc, 0xe3, 0x75,
	0x0a, 0x1d, 0x6c, 0xf3, 0xcc, 0x17, 0x44, 0x97, 0xe1, 0x9a, 0xe4, 0xa9, 0x7f, 0xc4, 0xb8, 0x3d,
	0x14, 0xfd, 0x43, 0x51, 0x7e, 0x19, 0x0a, 0xed, 0xec, 0xfe, 0x3a, 0xf4, 0xf2, 0x9e, 0xc0, 0xdc,
	0xe6, 0x36, 0xec, 0x0c, 0x6d, 0xb8, 0x2f, 0x26, 0x35, 0x17, 0x39, 0xfe, 0x3b, 0xff, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0xb5, 0x89, 0xf2, 0x83, 0x54, 0x22, 0x00, 0x00,
}
