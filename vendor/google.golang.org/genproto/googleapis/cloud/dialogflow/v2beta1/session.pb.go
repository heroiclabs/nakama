// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/cloud/dialogflow/v2beta1/session.proto

package dialogflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf4 "github.com/golang/protobuf/ptypes/struct"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"
import google_type "google.golang.org/genproto/googleapis/type/latlng"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Audio encoding of the audio content sent in the conversational query request.
// Refer to the [Cloud Speech API documentation](/speech/docs/basics) for more
// details.
type AudioEncoding int32

const (
	// Not specified.
	AudioEncoding_AUDIO_ENCODING_UNSPECIFIED AudioEncoding = 0
	// Uncompressed 16-bit signed little-endian samples (Linear PCM).
	AudioEncoding_AUDIO_ENCODING_LINEAR_16 AudioEncoding = 1
	// [`FLAC`](https://xiph.org/flac/documentation.html) (Free Lossless Audio
	// Codec) is the recommended encoding because it is lossless (therefore
	// recognition is not compromised) and requires only about half the
	// bandwidth of `LINEAR16`. `FLAC` stream encoding supports 16-bit and
	// 24-bit samples, however, not all fields in `STREAMINFO` are supported.
	AudioEncoding_AUDIO_ENCODING_FLAC AudioEncoding = 2
	// 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
	AudioEncoding_AUDIO_ENCODING_MULAW AudioEncoding = 3
	// Adaptive Multi-Rate Narrowband codec. `sample_rate_hertz` must be 8000.
	AudioEncoding_AUDIO_ENCODING_AMR AudioEncoding = 4
	// Adaptive Multi-Rate Wideband codec. `sample_rate_hertz` must be 16000.
	AudioEncoding_AUDIO_ENCODING_AMR_WB AudioEncoding = 5
	// Opus encoded audio frames in Ogg container
	// ([OggOpus](https://wiki.xiph.org/OggOpus)).
	// `sample_rate_hertz` must be 16000.
	AudioEncoding_AUDIO_ENCODING_OGG_OPUS AudioEncoding = 6
	// Although the use of lossy encodings is not recommended, if a very low
	// bitrate encoding is required, `OGG_OPUS` is highly preferred over
	// Speex encoding. The [Speex](https://speex.org/) encoding supported by
	// Dialogflow API has a header byte in each block, as in MIME type
	// `audio/x-speex-with-header-byte`.
	// It is a variant of the RTP Speex encoding defined in
	// [RFC 5574](https://tools.ietf.org/html/rfc5574).
	// The stream is a sequence of blocks, one block per RTP packet. Each block
	// starts with a byte containing the length of the block, in bytes, followed
	// by one or more frames of Speex data, padded to an integral number of
	// bytes (octets) as specified in RFC 5574. In other words, each RTP header
	// is replaced with a single byte containing the block length. Only Speex
	// wideband is supported. `sample_rate_hertz` must be 16000.
	AudioEncoding_AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE AudioEncoding = 7
)

var AudioEncoding_name = map[int32]string{
	0: "AUDIO_ENCODING_UNSPECIFIED",
	1: "AUDIO_ENCODING_LINEAR_16",
	2: "AUDIO_ENCODING_FLAC",
	3: "AUDIO_ENCODING_MULAW",
	4: "AUDIO_ENCODING_AMR",
	5: "AUDIO_ENCODING_AMR_WB",
	6: "AUDIO_ENCODING_OGG_OPUS",
	7: "AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE",
}
var AudioEncoding_value = map[string]int32{
	"AUDIO_ENCODING_UNSPECIFIED":            0,
	"AUDIO_ENCODING_LINEAR_16":              1,
	"AUDIO_ENCODING_FLAC":                   2,
	"AUDIO_ENCODING_MULAW":                  3,
	"AUDIO_ENCODING_AMR":                    4,
	"AUDIO_ENCODING_AMR_WB":                 5,
	"AUDIO_ENCODING_OGG_OPUS":               6,
	"AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE": 7,
}

func (x AudioEncoding) String() string {
	return proto.EnumName(AudioEncoding_name, int32(x))
}
func (AudioEncoding) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

// Type of the response message.
type StreamingRecognitionResult_MessageType int32

const (
	// Not specified. Should never be used.
	StreamingRecognitionResult_MESSAGE_TYPE_UNSPECIFIED StreamingRecognitionResult_MessageType = 0
	// Message contains a (possibly partial) transcript.
	StreamingRecognitionResult_TRANSCRIPT StreamingRecognitionResult_MessageType = 1
	// Event indicates that the server has detected the end of the user's speech
	// utterance and expects no additional speech. Therefore, the server will
	// not process additional audio (although it may subsequently return
	// additional results). The client should stop sending additional audio
	// data, half-close the gRPC connection, and wait for any additional results
	// until the server closes the gRPC connection. This message is only sent if
	// `single_utterance` was set to `true`, and is not used otherwise.
	StreamingRecognitionResult_END_OF_SINGLE_UTTERANCE StreamingRecognitionResult_MessageType = 2
)

var StreamingRecognitionResult_MessageType_name = map[int32]string{
	0: "MESSAGE_TYPE_UNSPECIFIED",
	1: "TRANSCRIPT",
	2: "END_OF_SINGLE_UTTERANCE",
}
var StreamingRecognitionResult_MessageType_value = map[string]int32{
	"MESSAGE_TYPE_UNSPECIFIED": 0,
	"TRANSCRIPT":               1,
	"END_OF_SINGLE_UTTERANCE":  2,
}

func (x StreamingRecognitionResult_MessageType) String() string {
	return proto.EnumName(StreamingRecognitionResult_MessageType_name, int32(x))
}
func (StreamingRecognitionResult_MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor4, []int{7, 0}
}

// The request to detect user's intent.
type DetectIntentRequest struct {
	// Required. The name of the session this query is sent to. Format:
	// `projects/<Project ID>/agent/sessions/<Session ID>`.
	// It's up to the API caller to choose an appropriate session ID. It can be
	// a random number or some type of user identifier (preferably hashed).
	// The length of the session ID must not exceed 36 bytes.
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	// Optional. The parameters of this query.
	QueryParams *QueryParameters `protobuf:"bytes,2,opt,name=query_params,json=queryParams" json:"query_params,omitempty"`
	// Required. The input specification. It can be set to:
	//
	// 1.  an audio config
	//     which instructs the speech recognizer how to process the speech audio,
	//
	// 2.  a conversational query in the form of text, or
	//
	// 3.  an event that specifies which intent to trigger.
	QueryInput *QueryInput `protobuf:"bytes,3,opt,name=query_input,json=queryInput" json:"query_input,omitempty"`
	// Optional. The natural language speech audio to be processed. This field
	// should be populated iff `query_input` is set to an input audio config.
	// A single request can contain up to 1 minute of speech audio data.
	InputAudio []byte `protobuf:"bytes,5,opt,name=input_audio,json=inputAudio,proto3" json:"input_audio,omitempty"`
}

func (m *DetectIntentRequest) Reset()                    { *m = DetectIntentRequest{} }
func (m *DetectIntentRequest) String() string            { return proto.CompactTextString(m) }
func (*DetectIntentRequest) ProtoMessage()               {}
func (*DetectIntentRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *DetectIntentRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *DetectIntentRequest) GetQueryParams() *QueryParameters {
	if m != nil {
		return m.QueryParams
	}
	return nil
}

func (m *DetectIntentRequest) GetQueryInput() *QueryInput {
	if m != nil {
		return m.QueryInput
	}
	return nil
}

func (m *DetectIntentRequest) GetInputAudio() []byte {
	if m != nil {
		return m.InputAudio
	}
	return nil
}

// The message returned from the DetectIntent method.
type DetectIntentResponse struct {
	// The unique identifier of the response. It can be used to
	// locate a response in the training example set or for reporting issues.
	ResponseId string `protobuf:"bytes,1,opt,name=response_id,json=responseId" json:"response_id,omitempty"`
	// The results of the conversational query or event processing.
	QueryResult *QueryResult `protobuf:"bytes,2,opt,name=query_result,json=queryResult" json:"query_result,omitempty"`
	// Specifies the status of the webhook request. `webhook_status`
	// is never populated in webhook requests.
	WebhookStatus *google_rpc.Status `protobuf:"bytes,3,opt,name=webhook_status,json=webhookStatus" json:"webhook_status,omitempty"`
}

func (m *DetectIntentResponse) Reset()                    { *m = DetectIntentResponse{} }
func (m *DetectIntentResponse) String() string            { return proto.CompactTextString(m) }
func (*DetectIntentResponse) ProtoMessage()               {}
func (*DetectIntentResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *DetectIntentResponse) GetResponseId() string {
	if m != nil {
		return m.ResponseId
	}
	return ""
}

func (m *DetectIntentResponse) GetQueryResult() *QueryResult {
	if m != nil {
		return m.QueryResult
	}
	return nil
}

func (m *DetectIntentResponse) GetWebhookStatus() *google_rpc.Status {
	if m != nil {
		return m.WebhookStatus
	}
	return nil
}

// Represents the parameters of the conversational query.
type QueryParameters struct {
	// Optional. The time zone of this conversational query from the
	// [time zone database](https://www.iana.org/time-zones), e.g.,
	// America/New_York, Europe/Paris. If not provided, the time zone specified in
	// agent settings is used.
	TimeZone string `protobuf:"bytes,1,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	// Optional. The geo location of this conversational query.
	GeoLocation *google_type.LatLng `protobuf:"bytes,2,opt,name=geo_location,json=geoLocation" json:"geo_location,omitempty"`
	// Optional. The collection of contexts to be activated before this query is
	// executed.
	Contexts []*Context `protobuf:"bytes,3,rep,name=contexts" json:"contexts,omitempty"`
	// Optional. Specifies whether to delete all contexts in the current session
	// before the new ones are activated.
	ResetContexts bool `protobuf:"varint,4,opt,name=reset_contexts,json=resetContexts" json:"reset_contexts,omitempty"`
	// Optional. The collection of session entity types to replace or extend
	// developer entities with for this query only. The entity synonyms apply
	// to all languages.
	SessionEntityTypes []*SessionEntityType `protobuf:"bytes,5,rep,name=session_entity_types,json=sessionEntityTypes" json:"session_entity_types,omitempty"`
	// Optional. This field can be used to pass custom data into the webhook
	// associated with the agent. Arbitrary JSON objects are supported.
	Payload *google_protobuf4.Struct `protobuf:"bytes,6,opt,name=payload" json:"payload,omitempty"`
}

func (m *QueryParameters) Reset()                    { *m = QueryParameters{} }
func (m *QueryParameters) String() string            { return proto.CompactTextString(m) }
func (*QueryParameters) ProtoMessage()               {}
func (*QueryParameters) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *QueryParameters) GetTimeZone() string {
	if m != nil {
		return m.TimeZone
	}
	return ""
}

func (m *QueryParameters) GetGeoLocation() *google_type.LatLng {
	if m != nil {
		return m.GeoLocation
	}
	return nil
}

func (m *QueryParameters) GetContexts() []*Context {
	if m != nil {
		return m.Contexts
	}
	return nil
}

func (m *QueryParameters) GetResetContexts() bool {
	if m != nil {
		return m.ResetContexts
	}
	return false
}

func (m *QueryParameters) GetSessionEntityTypes() []*SessionEntityType {
	if m != nil {
		return m.SessionEntityTypes
	}
	return nil
}

func (m *QueryParameters) GetPayload() *google_protobuf4.Struct {
	if m != nil {
		return m.Payload
	}
	return nil
}

// Represents the query input. It can contain either:
//
// 1.  An audio config which
//     instructs the speech recognizer how to process the speech audio.
//
// 2.  A conversational query in the form of text,.
//
// 3.  An event that specifies which intent to trigger.
type QueryInput struct {
	// Required. The input specification.
	//
	// Types that are valid to be assigned to Input:
	//	*QueryInput_AudioConfig
	//	*QueryInput_Text
	//	*QueryInput_Event
	Input isQueryInput_Input `protobuf_oneof:"input"`
}

func (m *QueryInput) Reset()                    { *m = QueryInput{} }
func (m *QueryInput) String() string            { return proto.CompactTextString(m) }
func (*QueryInput) ProtoMessage()               {}
func (*QueryInput) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

type isQueryInput_Input interface {
	isQueryInput_Input()
}

type QueryInput_AudioConfig struct {
	AudioConfig *InputAudioConfig `protobuf:"bytes,1,opt,name=audio_config,json=audioConfig,oneof"`
}
type QueryInput_Text struct {
	Text *TextInput `protobuf:"bytes,2,opt,name=text,oneof"`
}
type QueryInput_Event struct {
	Event *EventInput `protobuf:"bytes,3,opt,name=event,oneof"`
}

func (*QueryInput_AudioConfig) isQueryInput_Input() {}
func (*QueryInput_Text) isQueryInput_Input()        {}
func (*QueryInput_Event) isQueryInput_Input()       {}

func (m *QueryInput) GetInput() isQueryInput_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *QueryInput) GetAudioConfig() *InputAudioConfig {
	if x, ok := m.GetInput().(*QueryInput_AudioConfig); ok {
		return x.AudioConfig
	}
	return nil
}

func (m *QueryInput) GetText() *TextInput {
	if x, ok := m.GetInput().(*QueryInput_Text); ok {
		return x.Text
	}
	return nil
}

func (m *QueryInput) GetEvent() *EventInput {
	if x, ok := m.GetInput().(*QueryInput_Event); ok {
		return x.Event
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*QueryInput) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _QueryInput_OneofMarshaler, _QueryInput_OneofUnmarshaler, _QueryInput_OneofSizer, []interface{}{
		(*QueryInput_AudioConfig)(nil),
		(*QueryInput_Text)(nil),
		(*QueryInput_Event)(nil),
	}
}

func _QueryInput_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*QueryInput)
	// input
	switch x := m.Input.(type) {
	case *QueryInput_AudioConfig:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AudioConfig); err != nil {
			return err
		}
	case *QueryInput_Text:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Text); err != nil {
			return err
		}
	case *QueryInput_Event:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Event); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("QueryInput.Input has unexpected type %T", x)
	}
	return nil
}

func _QueryInput_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*QueryInput)
	switch tag {
	case 1: // input.audio_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InputAudioConfig)
		err := b.DecodeMessage(msg)
		m.Input = &QueryInput_AudioConfig{msg}
		return true, err
	case 2: // input.text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TextInput)
		err := b.DecodeMessage(msg)
		m.Input = &QueryInput_Text{msg}
		return true, err
	case 3: // input.event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EventInput)
		err := b.DecodeMessage(msg)
		m.Input = &QueryInput_Event{msg}
		return true, err
	default:
		return false, nil
	}
}

func _QueryInput_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*QueryInput)
	// input
	switch x := m.Input.(type) {
	case *QueryInput_AudioConfig:
		s := proto.Size(x.AudioConfig)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryInput_Text:
		s := proto.Size(x.Text)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *QueryInput_Event:
		s := proto.Size(x.Event)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Represents the result of conversational query or event processing.
type QueryResult struct {
	// The original conversational query text:
	// - If natural language text was provided as input, `query_text` contains
	//   a copy of the input.
	// - If natural language speech audio was provided as input, `query_text`
	//   contains the speech recognition result. If speech recognizer produced
	//   multiple alternatives, a particular one is picked.
	// - If an event was provided as input, `query_text` is not set.
	QueryText string `protobuf:"bytes,1,opt,name=query_text,json=queryText" json:"query_text,omitempty"`
	// The language that was triggered during intent detection.
	// See [Language Support](https://dialogflow.com/docs/reference/language)
	// for a list of the currently supported language codes.
	LanguageCode string `protobuf:"bytes,15,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	// The confidence estimate between 0.0 and 1.0. A higher number
	// indicates an estimated greater likelihood that the recognized words are
	// correct. The default of 0.0 is a sentinel value indicating that confidence
	// was not set. This field is populated if natural speech audio was provided
	// as input.
	SpeechRecognitionConfidence float32 `protobuf:"fixed32,2,opt,name=speech_recognition_confidence,json=speechRecognitionConfidence" json:"speech_recognition_confidence,omitempty"`
	// The action name from the matched intent.
	Action string `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
	// The collection of extracted parameters.
	Parameters *google_protobuf4.Struct `protobuf:"bytes,4,opt,name=parameters" json:"parameters,omitempty"`
	// This field is set to:
	// - `false` if the matched intent has required parameters and not all of
	//    the required parameter values have been collected.
	// - `true` if all required parameter values have been collected, or if the
	//    matched intent doesn't contain any required parameters.
	AllRequiredParamsPresent bool `protobuf:"varint,5,opt,name=all_required_params_present,json=allRequiredParamsPresent" json:"all_required_params_present,omitempty"`
	// The text to be pronounced to the user or shown on the screen.
	FulfillmentText string `protobuf:"bytes,6,opt,name=fulfillment_text,json=fulfillmentText" json:"fulfillment_text,omitempty"`
	// The collection of rich messages to present to the user.
	FulfillmentMessages []*Intent_Message `protobuf:"bytes,7,rep,name=fulfillment_messages,json=fulfillmentMessages" json:"fulfillment_messages,omitempty"`
	// If the query was fulfilled by a webhook call, this field is set to the
	// value of the `source` field returned in the webhook response.
	WebhookSource string `protobuf:"bytes,8,opt,name=webhook_source,json=webhookSource" json:"webhook_source,omitempty"`
	// If the query was fulfilled by a webhook call, this field is set to the
	// value of the `payload` field returned in the webhook response.
	WebhookPayload *google_protobuf4.Struct `protobuf:"bytes,9,opt,name=webhook_payload,json=webhookPayload" json:"webhook_payload,omitempty"`
	// The collection of output contexts. If applicable,
	// `output_contexts.parameters` contains entries with name
	// `<parameter name>.original` containing the original parameter values
	// before the query.
	OutputContexts []*Context `protobuf:"bytes,10,rep,name=output_contexts,json=outputContexts" json:"output_contexts,omitempty"`
	// The intent that matched the conversational query. Some, not
	// all fields are filled in this message, including but not limited to:
	// `name`, `display_name` and `webhook_state`.
	Intent *Intent `protobuf:"bytes,11,opt,name=intent" json:"intent,omitempty"`
	// The intent detection confidence. Values range from 0.0
	// (completely uncertain) to 1.0 (completely certain).
	IntentDetectionConfidence float32 `protobuf:"fixed32,12,opt,name=intent_detection_confidence,json=intentDetectionConfidence" json:"intent_detection_confidence,omitempty"`
	// The free-form diagnostic info. For example, this field
	// could contain webhook call latency.
	DiagnosticInfo *google_protobuf4.Struct `protobuf:"bytes,14,opt,name=diagnostic_info,json=diagnosticInfo" json:"diagnostic_info,omitempty"`
}

func (m *QueryResult) Reset()                    { *m = QueryResult{} }
func (m *QueryResult) String() string            { return proto.CompactTextString(m) }
func (*QueryResult) ProtoMessage()               {}
func (*QueryResult) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *QueryResult) GetQueryText() string {
	if m != nil {
		return m.QueryText
	}
	return ""
}

func (m *QueryResult) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *QueryResult) GetSpeechRecognitionConfidence() float32 {
	if m != nil {
		return m.SpeechRecognitionConfidence
	}
	return 0
}

func (m *QueryResult) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *QueryResult) GetParameters() *google_protobuf4.Struct {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *QueryResult) GetAllRequiredParamsPresent() bool {
	if m != nil {
		return m.AllRequiredParamsPresent
	}
	return false
}

func (m *QueryResult) GetFulfillmentText() string {
	if m != nil {
		return m.FulfillmentText
	}
	return ""
}

func (m *QueryResult) GetFulfillmentMessages() []*Intent_Message {
	if m != nil {
		return m.FulfillmentMessages
	}
	return nil
}

func (m *QueryResult) GetWebhookSource() string {
	if m != nil {
		return m.WebhookSource
	}
	return ""
}

func (m *QueryResult) GetWebhookPayload() *google_protobuf4.Struct {
	if m != nil {
		return m.WebhookPayload
	}
	return nil
}

func (m *QueryResult) GetOutputContexts() []*Context {
	if m != nil {
		return m.OutputContexts
	}
	return nil
}

func (m *QueryResult) GetIntent() *Intent {
	if m != nil {
		return m.Intent
	}
	return nil
}

func (m *QueryResult) GetIntentDetectionConfidence() float32 {
	if m != nil {
		return m.IntentDetectionConfidence
	}
	return 0
}

func (m *QueryResult) GetDiagnosticInfo() *google_protobuf4.Struct {
	if m != nil {
		return m.DiagnosticInfo
	}
	return nil
}

// The top-level message sent by the client to the
// `StreamingDetectIntent` method.
//
// Multiple request messages should be sent in order:
//
// 1.  The first message must contain `session`, `query_input` plus optionally
//     `query_params` and/or `single_utterance`. The message must not contain
//     `input_audio`.
//
// 2.  If `query_input` was set to a streaming input audio config,
//     all subsequent messages must contain only `input_audio`.
//     Otherwise, finish the request stream.
type StreamingDetectIntentRequest struct {
	// Required. The name of the session the query is sent to.
	// Format of the session name:
	// `projects/<Project ID>/agent/sessions/<Session ID>`.
	// It’s up to the API caller to choose an appropriate <Session ID>. It can be
	// a random number or some type of user identifier (preferably hashed).
	// The length of the session ID must not exceed 36 characters.
	Session string `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	// Optional. The parameters of this query.
	QueryParams *QueryParameters `protobuf:"bytes,2,opt,name=query_params,json=queryParams" json:"query_params,omitempty"`
	// Required. The input specification. It can be set to:
	//
	// 1.  an audio config which instructs the speech recognizer how to process
	//     the speech audio,
	//
	// 2.  a conversational query in the form of text, or
	//
	// 3.  an event that specifies which intent to trigger.
	QueryInput *QueryInput `protobuf:"bytes,3,opt,name=query_input,json=queryInput" json:"query_input,omitempty"`
	// Optional. If `true`, the recognizer will detect a single spoken utterance
	// in input audio. When it detects that the user has paused or stopped
	// speaking, it will cease recognition. This setting is ignored when
	// `query_input` is a piece of text or an event.
	SingleUtterance bool `protobuf:"varint,4,opt,name=single_utterance,json=singleUtterance" json:"single_utterance,omitempty"`
	// Optional. The input audio content to be recognized. Must be sent if
	// `query_input` was set to a streaming input audio config. The complete audio
	// over all streaming messages must not exceed 1 minute.
	InputAudio []byte `protobuf:"bytes,6,opt,name=input_audio,json=inputAudio,proto3" json:"input_audio,omitempty"`
}

func (m *StreamingDetectIntentRequest) Reset()                    { *m = StreamingDetectIntentRequest{} }
func (m *StreamingDetectIntentRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamingDetectIntentRequest) ProtoMessage()               {}
func (*StreamingDetectIntentRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *StreamingDetectIntentRequest) GetSession() string {
	if m != nil {
		return m.Session
	}
	return ""
}

func (m *StreamingDetectIntentRequest) GetQueryParams() *QueryParameters {
	if m != nil {
		return m.QueryParams
	}
	return nil
}

func (m *StreamingDetectIntentRequest) GetQueryInput() *QueryInput {
	if m != nil {
		return m.QueryInput
	}
	return nil
}

func (m *StreamingDetectIntentRequest) GetSingleUtterance() bool {
	if m != nil {
		return m.SingleUtterance
	}
	return false
}

func (m *StreamingDetectIntentRequest) GetInputAudio() []byte {
	if m != nil {
		return m.InputAudio
	}
	return nil
}

// The top-level message returned from the
// `StreamingDetectIntent` method.
//
// Multiple response messages can be returned in order:
//
// 1.  If the input was set to streaming audio, the first one or more messages
//     contain `recognition_result`. Each `recognition_result` represents a more
//     complete transcript of what the user said. The last `recognition_result`
//     has `is_final` set to `true`.
//
// 2.  The next message contains `response_id`, `query_result`
//     and optionally `webhook_status` if a WebHook was called.
type StreamingDetectIntentResponse struct {
	// The unique identifier of the response. It can be used to
	// locate a response in the training example set or for reporting issues.
	ResponseId string `protobuf:"bytes,1,opt,name=response_id,json=responseId" json:"response_id,omitempty"`
	// The result of speech recognition.
	RecognitionResult *StreamingRecognitionResult `protobuf:"bytes,2,opt,name=recognition_result,json=recognitionResult" json:"recognition_result,omitempty"`
	// The result of the conversational query or event processing.
	QueryResult *QueryResult `protobuf:"bytes,3,opt,name=query_result,json=queryResult" json:"query_result,omitempty"`
	// Specifies the status of the webhook request.
	WebhookStatus *google_rpc.Status `protobuf:"bytes,4,opt,name=webhook_status,json=webhookStatus" json:"webhook_status,omitempty"`
}

func (m *StreamingDetectIntentResponse) Reset()                    { *m = StreamingDetectIntentResponse{} }
func (m *StreamingDetectIntentResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamingDetectIntentResponse) ProtoMessage()               {}
func (*StreamingDetectIntentResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *StreamingDetectIntentResponse) GetResponseId() string {
	if m != nil {
		return m.ResponseId
	}
	return ""
}

func (m *StreamingDetectIntentResponse) GetRecognitionResult() *StreamingRecognitionResult {
	if m != nil {
		return m.RecognitionResult
	}
	return nil
}

func (m *StreamingDetectIntentResponse) GetQueryResult() *QueryResult {
	if m != nil {
		return m.QueryResult
	}
	return nil
}

func (m *StreamingDetectIntentResponse) GetWebhookStatus() *google_rpc.Status {
	if m != nil {
		return m.WebhookStatus
	}
	return nil
}

// Contains a speech recognition result corresponding to a portion of the audio
// that is currently being processed or an indication that this is the end
// of the single requested utterance.
//
// Example:
//
// 1.  transcript: "tube"
//
// 2.  transcript: "to be a"
//
// 3.  transcript: "to be"
//
// 4.  transcript: "to be or not to be"
//     is_final: true
//
// 5.  transcript: " that's"
//
// 6.  transcript: " that is"
//
// 7.  recognition_event_type: `RECOGNITION_EVENT_END_OF_SINGLE_UTTERANCE`
//
// 8.  transcript: " that is the question"
//     is_final: true
//
// Only two of the responses contain final results (#4 and #8 indicated by
// `is_final: true`). Concatenating these generates the full transcript: "to be
// or not to be that is the question".
//
// In each response we populate:
//
// *  for `MESSAGE_TYPE_TRANSCRIPT`: `transcript` and possibly `is_final`.
//
// *  for `MESSAGE_TYPE_END_OF_SINGLE_UTTERANCE`: only `event_type`.
type StreamingRecognitionResult struct {
	// Type of the result message.
	MessageType StreamingRecognitionResult_MessageType `protobuf:"varint,1,opt,name=message_type,json=messageType,enum=google.cloud.dialogflow.v2beta1.StreamingRecognitionResult_MessageType" json:"message_type,omitempty"`
	// Transcript text representing the words that the user spoke.
	// Populated if and only if `event_type` = `RECOGNITION_EVENT_TRANSCRIPT`.
	Transcript string `protobuf:"bytes,2,opt,name=transcript" json:"transcript,omitempty"`
	// If `false`, the `StreamingRecognitionResult` represents an
	// interim result that may change. If `true`, the recognizer will not return
	// any further hypotheses about this piece of the audio. May only be populated
	// for `event_type` = `RECOGNITION_EVENT_TRANSCRIPT`.
	IsFinal bool `protobuf:"varint,3,opt,name=is_final,json=isFinal" json:"is_final,omitempty"`
}

func (m *StreamingRecognitionResult) Reset()                    { *m = StreamingRecognitionResult{} }
func (m *StreamingRecognitionResult) String() string            { return proto.CompactTextString(m) }
func (*StreamingRecognitionResult) ProtoMessage()               {}
func (*StreamingRecognitionResult) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *StreamingRecognitionResult) GetMessageType() StreamingRecognitionResult_MessageType {
	if m != nil {
		return m.MessageType
	}
	return StreamingRecognitionResult_MESSAGE_TYPE_UNSPECIFIED
}

func (m *StreamingRecognitionResult) GetTranscript() string {
	if m != nil {
		return m.Transcript
	}
	return ""
}

func (m *StreamingRecognitionResult) GetIsFinal() bool {
	if m != nil {
		return m.IsFinal
	}
	return false
}

// Instructs the speech recognizer how to process the audio content.
type InputAudioConfig struct {
	// Required. Audio encoding of the audio content to process.
	AudioEncoding AudioEncoding `protobuf:"varint,1,opt,name=audio_encoding,json=audioEncoding,enum=google.cloud.dialogflow.v2beta1.AudioEncoding" json:"audio_encoding,omitempty"`
	// Required. Sample rate (in Hertz) of the audio content sent in the query.
	// Refer to [Cloud Speech API documentation](/speech/docs/basics) for more
	// details.
	SampleRateHertz int32 `protobuf:"varint,2,opt,name=sample_rate_hertz,json=sampleRateHertz" json:"sample_rate_hertz,omitempty"`
	// Required. The language of the supplied audio. Dialogflow does not do
	// translations. See [Language
	// Support](https://dialogflow.com/docs/languages) for a list of the
	// currently supported language codes. Note that queries in the same session
	// do not necessarily need to specify the same language.
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
	// Optional. The collection of phrase hints which are used to boost accuracy
	// of speech recognition.
	// Refer to [Cloud Speech API documentation](/speech/docs/basics#phrase-hints)
	// for more details.
	PhraseHints []string `protobuf:"bytes,4,rep,name=phrase_hints,json=phraseHints" json:"phrase_hints,omitempty"`
}

func (m *InputAudioConfig) Reset()                    { *m = InputAudioConfig{} }
func (m *InputAudioConfig) String() string            { return proto.CompactTextString(m) }
func (*InputAudioConfig) ProtoMessage()               {}
func (*InputAudioConfig) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *InputAudioConfig) GetAudioEncoding() AudioEncoding {
	if m != nil {
		return m.AudioEncoding
	}
	return AudioEncoding_AUDIO_ENCODING_UNSPECIFIED
}

func (m *InputAudioConfig) GetSampleRateHertz() int32 {
	if m != nil {
		return m.SampleRateHertz
	}
	return 0
}

func (m *InputAudioConfig) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *InputAudioConfig) GetPhraseHints() []string {
	if m != nil {
		return m.PhraseHints
	}
	return nil
}

// Represents the natural language text to be processed.
type TextInput struct {
	// Required. The UTF-8 encoded natural language text to be processed.
	// Text length must not exceed 256 bytes.
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	// Required. The language of this conversational query. See [Language
	// Support](https://dialogflow.com/docs/languages) for a list of the
	// currently supported language codes. Note that queries in the same session
	// do not necessarily need to specify the same language.
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
}

func (m *TextInput) Reset()                    { *m = TextInput{} }
func (m *TextInput) String() string            { return proto.CompactTextString(m) }
func (*TextInput) ProtoMessage()               {}
func (*TextInput) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *TextInput) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *TextInput) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

// Events allow for matching intents by event name instead of the natural
// language input. For instance, input `<event: { name: “welcome_event”,
// parameters: { name: “Sam” } }>` can trigger a personalized welcome response.
// The parameter `name` may be used by the agent in the response:
// `“Hello #welcome_event.name! What can I do for you today?”`.
type EventInput struct {
	// Required. The unique identifier of the event.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Optional. The collection of parameters associated with the event.
	Parameters *google_protobuf4.Struct `protobuf:"bytes,2,opt,name=parameters" json:"parameters,omitempty"`
	// Required. The language of this query. See [Language
	// Support](https://dialogflow.com/docs/languages) for a list of the
	// currently supported language codes. Note that queries in the same session
	// do not necessarily need to specify the same language.
	LanguageCode string `protobuf:"bytes,3,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
}

func (m *EventInput) Reset()                    { *m = EventInput{} }
func (m *EventInput) String() string            { return proto.CompactTextString(m) }
func (*EventInput) ProtoMessage()               {}
func (*EventInput) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *EventInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventInput) GetParameters() *google_protobuf4.Struct {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *EventInput) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func init() {
	proto.RegisterType((*DetectIntentRequest)(nil), "google.cloud.dialogflow.v2beta1.DetectIntentRequest")
	proto.RegisterType((*DetectIntentResponse)(nil), "google.cloud.dialogflow.v2beta1.DetectIntentResponse")
	proto.RegisterType((*QueryParameters)(nil), "google.cloud.dialogflow.v2beta1.QueryParameters")
	proto.RegisterType((*QueryInput)(nil), "google.cloud.dialogflow.v2beta1.QueryInput")
	proto.RegisterType((*QueryResult)(nil), "google.cloud.dialogflow.v2beta1.QueryResult")
	proto.RegisterType((*StreamingDetectIntentRequest)(nil), "google.cloud.dialogflow.v2beta1.StreamingDetectIntentRequest")
	proto.RegisterType((*StreamingDetectIntentResponse)(nil), "google.cloud.dialogflow.v2beta1.StreamingDetectIntentResponse")
	proto.RegisterType((*StreamingRecognitionResult)(nil), "google.cloud.dialogflow.v2beta1.StreamingRecognitionResult")
	proto.RegisterType((*InputAudioConfig)(nil), "google.cloud.dialogflow.v2beta1.InputAudioConfig")
	proto.RegisterType((*TextInput)(nil), "google.cloud.dialogflow.v2beta1.TextInput")
	proto.RegisterType((*EventInput)(nil), "google.cloud.dialogflow.v2beta1.EventInput")
	proto.RegisterEnum("google.cloud.dialogflow.v2beta1.AudioEncoding", AudioEncoding_name, AudioEncoding_value)
	proto.RegisterEnum("google.cloud.dialogflow.v2beta1.StreamingRecognitionResult_MessageType", StreamingRecognitionResult_MessageType_name, StreamingRecognitionResult_MessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sessions service

type SessionsClient interface {
	// Processes a natural language query and returns structured, actionable data
	// as a result. This method is not idempotent, because it may cause contexts
	// and session entity types to be updated, which in turn might affect
	// results of future queries.
	DetectIntent(ctx context.Context, in *DetectIntentRequest, opts ...grpc.CallOption) (*DetectIntentResponse, error)
	// Processes a natural language query in audio format in a streaming fashion
	// and returns structured, actionable data as a result. This method is only
	// available via the gRPC API (not REST).
	StreamingDetectIntent(ctx context.Context, opts ...grpc.CallOption) (Sessions_StreamingDetectIntentClient, error)
}

type sessionsClient struct {
	cc *grpc.ClientConn
}

func NewSessionsClient(cc *grpc.ClientConn) SessionsClient {
	return &sessionsClient{cc}
}

func (c *sessionsClient) DetectIntent(ctx context.Context, in *DetectIntentRequest, opts ...grpc.CallOption) (*DetectIntentResponse, error) {
	out := new(DetectIntentResponse)
	err := grpc.Invoke(ctx, "/google.cloud.dialogflow.v2beta1.Sessions/DetectIntent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionsClient) StreamingDetectIntent(ctx context.Context, opts ...grpc.CallOption) (Sessions_StreamingDetectIntentClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Sessions_serviceDesc.Streams[0], c.cc, "/google.cloud.dialogflow.v2beta1.Sessions/StreamingDetectIntent", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionsStreamingDetectIntentClient{stream}
	return x, nil
}

type Sessions_StreamingDetectIntentClient interface {
	Send(*StreamingDetectIntentRequest) error
	Recv() (*StreamingDetectIntentResponse, error)
	grpc.ClientStream
}

type sessionsStreamingDetectIntentClient struct {
	grpc.ClientStream
}

func (x *sessionsStreamingDetectIntentClient) Send(m *StreamingDetectIntentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sessionsStreamingDetectIntentClient) Recv() (*StreamingDetectIntentResponse, error) {
	m := new(StreamingDetectIntentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Sessions service

type SessionsServer interface {
	// Processes a natural language query and returns structured, actionable data
	// as a result. This method is not idempotent, because it may cause contexts
	// and session entity types to be updated, which in turn might affect
	// results of future queries.
	DetectIntent(context.Context, *DetectIntentRequest) (*DetectIntentResponse, error)
	// Processes a natural language query in audio format in a streaming fashion
	// and returns structured, actionable data as a result. This method is only
	// available via the gRPC API (not REST).
	StreamingDetectIntent(Sessions_StreamingDetectIntentServer) error
}

func RegisterSessionsServer(s *grpc.Server, srv SessionsServer) {
	s.RegisterService(&_Sessions_serviceDesc, srv)
}

func _Sessions_DetectIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionsServer).DetectIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.dialogflow.v2beta1.Sessions/DetectIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionsServer).DetectIntent(ctx, req.(*DetectIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sessions_StreamingDetectIntent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SessionsServer).StreamingDetectIntent(&sessionsStreamingDetectIntentServer{stream})
}

type Sessions_StreamingDetectIntentServer interface {
	Send(*StreamingDetectIntentResponse) error
	Recv() (*StreamingDetectIntentRequest, error)
	grpc.ServerStream
}

type sessionsStreamingDetectIntentServer struct {
	grpc.ServerStream
}

func (x *sessionsStreamingDetectIntentServer) Send(m *StreamingDetectIntentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sessionsStreamingDetectIntentServer) Recv() (*StreamingDetectIntentRequest, error) {
	m := new(StreamingDetectIntentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Sessions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.dialogflow.v2beta1.Sessions",
	HandlerType: (*SessionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectIntent",
			Handler:    _Sessions_DetectIntent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingDetectIntent",
			Handler:       _Sessions_StreamingDetectIntent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "google/cloud/dialogflow/v2beta1/session.proto",
}

func init() { proto.RegisterFile("google/cloud/dialogflow/v2beta1/session.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 1572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0x4f, 0x73, 0x1b, 0xb7,
	0x15, 0xf7, 0x52, 0xd6, 0xbf, 0x47, 0x4a, 0x62, 0x60, 0x27, 0x5e, 0x4b, 0x76, 0xec, 0x32, 0x93,
	0x29, 0xad, 0xa6, 0x64, 0xac, 0xb6, 0xe9, 0x24, 0x1e, 0xa7, 0xa6, 0xc8, 0x95, 0xc4, 0x19, 0x9a,
	0x62, 0x40, 0x2a, 0x4e, 0x72, 0xc1, 0x40, 0x4b, 0x70, 0xb5, 0xee, 0x12, 0x58, 0x2d, 0xc0, 0x24,
	0x4a, 0xa7, 0x3d, 0xf4, 0x2b, 0xf4, 0xd6, 0x99, 0x5e, 0x7a, 0xe9, 0x4c, 0xae, 0xbd, 0xf4, 0x9e,
	0x8f, 0xd0, 0x73, 0x6f, 0x3d, 0xb6, 0xa7, 0xf6, 0xd0, 0x99, 0x5e, 0x3a, 0x0b, 0x60, 0x49, 0x9a,
	0x92, 0x43, 0xba, 0xed, 0x29, 0xb7, 0xc5, 0x7b, 0xbf, 0xf7, 0xf0, 0xde, 0xc3, 0x0f, 0xef, 0x61,
	0xe1, 0x87, 0x81, 0x10, 0x41, 0xc4, 0xaa, 0x7e, 0x24, 0x46, 0xfd, 0x6a, 0x3f, 0xa4, 0x91, 0x08,
	0x06, 0x91, 0xf8, 0xa2, 0xfa, 0xf9, 0xde, 0x29, 0x53, 0xf4, 0x61, 0x55, 0x32, 0x29, 0x43, 0xc1,
	0x2b, 0x71, 0x22, 0x94, 0x40, 0xf7, 0x0c, 0xbc, 0xa2, 0xe1, 0x95, 0x09, 0xbc, 0x62, 0xe1, 0xdb,
	0x77, 0xac, 0x3f, 0x1a, 0x87, 0x55, 0xca, 0xb9, 0x50, 0x54, 0x85, 0x82, 0x4b, 0x63, 0xbe, 0x3d,
	0x77, 0x37, 0x5f, 0x70, 0xc5, 0xbe, 0x54, 0x16, 0xfe, 0xce, 0x3c, 0x78, 0xc8, 0x15, 0xe3, 0x19,
	0xfa, 0xfd, 0x05, 0x53, 0x21, 0x8c, 0xab, 0x50, 0x5d, 0x10, 0x75, 0x11, 0x33, 0x6b, 0x9a, 0x45,
	0xad, 0x57, 0xa7, 0xa3, 0x41, 0x55, 0xaa, 0x64, 0xe4, 0x67, 0x8e, 0x6f, 0x59, 0x6d, 0x12, 0xfb,
	0x55, 0xa9, 0xa8, 0x1a, 0x65, 0xe9, 0xb8, 0x56, 0x91, 0x7a, 0xaa, 0x46, 0x54, 0x45, 0x3c, 0x30,
	0x9a, 0xd2, 0x3f, 0x1c, 0xb8, 0xd1, 0x60, 0x8a, 0xf9, 0xaa, 0xa9, 0x43, 0xc4, 0xec, 0x7c, 0xc4,
	0xa4, 0x42, 0x2e, 0xac, 0xda, 0x28, 0x5c, 0xe7, 0xbe, 0x53, 0x5e, 0xc7, 0xd9, 0x12, 0x75, 0xa1,
	0x70, 0x3e, 0x62, 0xc9, 0x05, 0x89, 0x69, 0x42, 0x87, 0xd2, 0xcd, 0xdd, 0x77, 0xca, 0xf9, 0xbd,
	0x77, 0x2b, 0x73, 0x0a, 0x5e, 0xf9, 0x28, 0x35, 0xea, 0xa4, 0x36, 0x4c, 0xb1, 0x44, 0xe2, 0xfc,
	0xf9, 0x58, 0x20, 0x51, 0x0b, 0xcc, 0x92, 0x84, 0x3c, 0x1e, 0x29, 0x77, 0x49, 0xfb, 0xfc, 0xc1,
	0x62, 0x3e, 0x9b, 0xa9, 0x09, 0x86, 0xf3, 0xf1, 0x37, 0xba, 0x07, 0x79, 0xed, 0x87, 0xd0, 0x51,
	0x3f, 0x14, 0xee, 0xf2, 0x7d, 0xa7, 0x5c, 0xc0, 0xa0, 0x45, 0xb5, 0x54, 0x52, 0xfa, 0xc6, 0x81,
	0x9b, 0x2f, 0x66, 0x2d, 0x63, 0xc1, 0x25, 0x4b, 0x2d, 0x13, 0xfb, 0x4d, 0xc2, 0xbe, 0x4d, 0x1d,
	0x32, 0x51, 0xb3, 0x8f, 0x8e, 0xb3, 0xec, 0x13, 0x26, 0x47, 0x91, 0xb2, 0xd9, 0xbf, 0xb3, 0x58,
	0xa4, 0x58, 0xdb, 0xd8, 0xcc, 0xcd, 0x02, 0xbd, 0x0f, 0x9b, 0x5f, 0xb0, 0xd3, 0x33, 0x21, 0x7e,
	0x4e, 0xcc, 0x91, 0xd9, 0xe4, 0x51, 0xe6, 0x32, 0x89, 0xfd, 0x4a, 0x57, 0x6b, 0xf0, 0x86, 0x45,
	0x9a, 0x65, 0xe9, 0x6f, 0x39, 0xd8, 0x9a, 0xa9, 0x2a, 0xda, 0x81, 0x75, 0x15, 0x0e, 0x19, 0xf9,
	0x4a, 0x70, 0x66, 0xc3, 0x5f, 0x4b, 0x05, 0x9f, 0x09, 0xce, 0xd0, 0x7b, 0x50, 0x08, 0x98, 0x20,
	0x91, 0xf0, 0x35, 0xd9, 0x6d, 0xf0, 0x37, 0xb2, 0x9d, 0x34, 0xcf, 0x5a, 0x54, 0xb5, 0x78, 0x80,
	0xf3, 0x01, 0x13, 0x2d, 0x8b, 0x43, 0x0d, 0x58, 0xb3, 0x7c, 0x4f, 0xa3, 0x5b, 0x2a, 0xe7, 0xf7,
	0xca, 0x73, 0x13, 0xae, 0x1b, 0x03, 0x3c, 0xb6, 0x44, 0x6f, 0xc3, 0x66, 0xc2, 0x24, 0x53, 0x64,
	0xec, 0xeb, 0xfa, 0x7d, 0xa7, 0xbc, 0x86, 0x37, 0xb4, 0xb4, 0x9e, 0xc1, 0xfa, 0x70, 0xf3, 0x0a,
	0xfe, 0x4b, 0x77, 0x59, 0x6f, 0xbc, 0x37, 0x77, 0xe3, 0xae, 0x31, 0xf6, 0xb4, 0x6d, 0xef, 0x22,
	0x66, 0x18, 0xc9, 0x59, 0x91, 0x44, 0x0f, 0x61, 0x35, 0xa6, 0x17, 0x91, 0xa0, 0x7d, 0x77, 0x45,
	0x57, 0xe1, 0x56, 0xe6, 0x38, 0xbb, 0x5a, 0x95, 0xae, 0xbe, 0x5a, 0x38, 0xc3, 0x95, 0xfe, 0xe9,
	0x00, 0x4c, 0x08, 0x87, 0x3e, 0x86, 0x82, 0xa6, 0x57, 0x9a, 0xce, 0x20, 0x0c, 0x74, 0xb1, 0xf3,
	0x7b, 0x0f, 0xe7, 0xc6, 0xd7, 0x1c, 0xd3, 0xb0, 0xae, 0x0d, 0x8f, 0xae, 0xe1, 0x3c, 0x9d, 0x2c,
	0xd1, 0x13, 0xb8, 0x9e, 0x16, 0xc2, 0x1e, 0xce, 0xee, 0x5c, 0x7f, 0x3d, 0xf6, 0xa5, 0xd2, 0x3e,
	0x8f, 0xae, 0x61, 0x6d, 0x89, 0xea, 0xb0, 0xcc, 0x3e, 0x67, 0x7c, 0xf1, 0x6b, 0xe4, 0xa5, 0xe8,
	0xcc, 0x87, 0xb1, 0xdd, 0x5f, 0x85, 0x65, 0x7d, 0x61, 0x4a, 0x7f, 0x5c, 0x81, 0xfc, 0x14, 0x7b,
	0xd1, 0x5d, 0x30, 0x57, 0x8d, 0xe8, 0x28, 0x0d, 0xc5, 0xd6, 0xb5, 0x24, 0x8d, 0x04, 0xbd, 0x05,
	0x1b, 0x11, 0xe5, 0xc1, 0x88, 0x06, 0x8c, 0xf8, 0xa2, 0xcf, 0xdc, 0x2d, 0x8d, 0x28, 0x64, 0xc2,
	0xba, 0xe8, 0x33, 0xb4, 0x0f, 0x77, 0x65, 0xcc, 0x98, 0x7f, 0x46, 0x12, 0xe6, 0x8b, 0x80, 0x87,
	0x29, 0xcd, 0x4c, 0x21, 0xfb, 0x8c, 0xfb, 0x4c, 0x27, 0x9f, 0xc3, 0x3b, 0x06, 0x84, 0x27, 0x98,
	0xfa, 0x18, 0x82, 0xde, 0x80, 0x15, 0xea, 0x6b, 0x1a, 0x2f, 0xe9, 0x1d, 0xec, 0x0a, 0xfd, 0x14,
	0x20, 0x1e, 0xdf, 0x07, 0x4d, 0xb1, 0x6f, 0x39, 0xdc, 0x29, 0x28, 0x7a, 0x0c, 0x3b, 0x34, 0x8a,
	0x48, 0xc2, 0xce, 0x47, 0x61, 0xc2, 0xfa, 0xb6, 0xbf, 0x91, 0x38, 0xa5, 0x27, 0x57, 0xba, 0x8b,
	0xac, 0x61, 0x97, 0x46, 0x11, 0xb6, 0x08, 0xd3, 0xbb, 0x3a, 0x46, 0x8f, 0x1e, 0x40, 0x71, 0x30,
	0x8a, 0x06, 0x61, 0x14, 0x0d, 0x19, 0x57, 0xa6, 0x3a, 0x2b, 0x3a, 0xb2, 0xad, 0x29, 0xb9, 0xae,
	0xd1, 0x29, 0xdc, 0x9c, 0x86, 0x0e, 0x99, 0x94, 0x34, 0x60, 0xd2, 0x5d, 0xd5, 0x14, 0xaf, 0x2e,
	0x40, 0x21, 0x3d, 0x4d, 0x9e, 0x1a, 0x3b, 0x7c, 0x63, 0xca, 0x99, 0x95, 0xe9, 0xdb, 0x36, 0xee,
	0x2b, 0x62, 0x94, 0xf8, 0xcc, 0x5d, 0xd3, 0xc1, 0x8c, 0x7b, 0x88, 0x16, 0xa2, 0x27, 0xb0, 0x95,
	0xc1, 0xb2, 0xfb, 0xb0, 0xfe, 0xed, 0x25, 0xcb, 0xdc, 0x76, 0x0c, 0x1c, 0x7d, 0x04, 0x5b, 0x62,
	0xa4, 0xd2, 0x6e, 0x3b, 0xbe, 0xd7, 0xf0, 0x8a, 0x3d, 0x62, 0xd3, 0x38, 0x18, 0xb7, 0x80, 0x9f,
	0xc1, 0x8a, 0x19, 0x98, 0x6e, 0x5e, 0xc7, 0xf2, 0xfd, 0x05, 0x2b, 0x82, 0xad, 0x19, 0xfa, 0x10,
	0x76, 0xcc, 0x17, 0xe9, 0xeb, 0x2e, 0x3f, 0xc3, 0xae, 0x82, 0x66, 0xd7, 0x6d, 0x03, 0x69, 0x64,
	0x88, 0x29, 0x6e, 0x3d, 0x81, 0xad, 0x7e, 0x48, 0x03, 0x2e, 0xa4, 0x0a, 0x7d, 0x12, 0xf2, 0x81,
	0x70, 0x37, 0xe7, 0x54, 0x65, 0x82, 0x6f, 0xf2, 0x81, 0x28, 0xfd, 0x21, 0x07, 0x77, 0xba, 0x2a,
	0x61, 0x74, 0x18, 0xf2, 0xe0, 0x3b, 0x37, 0x60, 0x1f, 0x40, 0x51, 0x86, 0x3c, 0x88, 0x18, 0x19,
	0x29, 0xc5, 0x12, 0x9a, 0x16, 0xd5, 0x34, 0xf3, 0x2d, 0x23, 0x3f, 0xc9, 0xc4, 0xb3, 0xb3, 0x78,
	0xe5, 0xd2, 0x2c, 0xfe, 0x53, 0x0e, 0xee, 0xbe, 0xa4, 0x52, 0x8b, 0x0e, 0xe5, 0xe7, 0x80, 0xa6,
	0xfb, 0xc8, 0x0b, 0xa3, 0xf9, 0xd1, 0xfc, 0x81, 0x91, 0x6d, 0x3e, 0xd5, 0x67, 0xec, 0xa4, 0x7e,
	0x2d, 0x99, 0x15, 0x5d, 0x7a, 0x00, 0x2c, 0xfd, 0xff, 0x1f, 0x00, 0xd7, 0x17, 0x7d, 0x00, 0xfc,
	0x2e, 0x07, 0xdb, 0x2f, 0x8f, 0x1e, 0x3d, 0x87, 0x82, 0x6d, 0x2d, 0x7a, 0x84, 0xea, 0xc2, 0x6d,
	0xee, 0x1d, 0xfe, 0x0f, 0x05, 0xc9, 0x5a, 0x8e, 0x1e, 0xab, 0xf9, 0xe1, 0x64, 0x81, 0xde, 0x04,
	0x50, 0x09, 0xe5, 0xd2, 0x4f, 0xc2, 0xd8, 0x94, 0x7e, 0x1d, 0x4f, 0x49, 0xd0, 0x6d, 0x58, 0x0b,
	0x25, 0x19, 0x84, 0x9c, 0x46, 0xba, 0x64, 0x6b, 0x78, 0x35, 0x94, 0x07, 0xe9, 0xb2, 0xf4, 0x09,
	0xe4, 0xa7, 0xdc, 0xa2, 0x3b, 0xe0, 0x3e, 0xf5, 0xba, 0xdd, 0xda, 0xa1, 0x47, 0x7a, 0x9f, 0x76,
	0x3c, 0x72, 0xd2, 0xee, 0x76, 0xbc, 0x7a, 0xf3, 0xa0, 0xe9, 0x35, 0x8a, 0xd7, 0xd0, 0x26, 0x40,
	0x0f, 0xd7, 0xda, 0xdd, 0x3a, 0x6e, 0x76, 0x7a, 0x45, 0x07, 0xed, 0xc0, 0x2d, 0xaf, 0xdd, 0x20,
	0xc7, 0x07, 0xa4, 0xdb, 0x6c, 0x1f, 0xb6, 0x3c, 0x72, 0xd2, 0xeb, 0x79, 0xb8, 0xd6, 0xae, 0x7b,
	0xc5, 0x5c, 0xe9, 0x2f, 0x0e, 0x14, 0x67, 0xc7, 0x2d, 0x3a, 0x81, 0x4d, 0x33, 0xb7, 0x19, 0xf7,
	0x45, 0x3f, 0xe4, 0x81, 0xad, 0x4b, 0x65, 0x6e, 0x5d, 0xb4, 0x17, 0xcf, 0x5a, 0xe1, 0x0d, 0x3a,
	0xbd, 0x44, 0xbb, 0xf0, 0x9a, 0xa4, 0xc3, 0x38, 0x62, 0x24, 0xa1, 0x8a, 0x91, 0x33, 0x96, 0xa8,
	0xaf, 0x74, 0x1d, 0x96, 0xf1, 0x96, 0x51, 0x60, 0xaa, 0xd8, 0x51, 0x2a, 0xbe, 0x3c, 0x23, 0x97,
	0xae, 0x98, 0x91, 0xdf, 0x83, 0x42, 0x7c, 0x96, 0x50, 0xc9, 0xc8, 0x59, 0xc8, 0xf5, 0x63, 0x69,
	0xa9, 0xbc, 0x8e, 0xf3, 0x46, 0x76, 0x94, 0x8a, 0x4a, 0x0d, 0x58, 0x1f, 0x4f, 0x7f, 0x84, 0xec,
	0xbb, 0xc1, 0x5c, 0x0f, 0xf3, 0x12, 0xb8, 0xb4, 0x51, 0xee, 0xf2, 0x46, 0xa5, 0x5f, 0x01, 0x4c,
	0x1e, 0x00, 0xa9, 0x1b, 0x4e, 0x87, 0xd9, 0xdb, 0x51, 0x7f, 0xcf, 0x8c, 0xd4, 0xdc, 0xe2, 0x23,
	0x75, 0x91, 0x44, 0x77, 0xff, 0xed, 0xc0, 0xc6, 0x0b, 0xa5, 0x45, 0x6f, 0xc2, 0x76, 0xed, 0xa4,
	0xd1, 0x3c, 0x26, 0x5e, 0xbb, 0x7e, 0xdc, 0x68, 0xb6, 0x0f, 0x67, 0x48, 0x70, 0x07, 0xdc, 0x19,
	0x7d, 0xab, 0xd9, 0xf6, 0x6a, 0x98, 0x3c, 0x7c, 0xaf, 0xe8, 0xa0, 0x5b, 0x70, 0x63, 0x46, 0x7b,
	0xd0, 0xaa, 0xd5, 0x8b, 0x39, 0xe4, 0xc2, 0xcd, 0x19, 0xc5, 0xd3, 0x93, 0x56, 0xed, 0x59, 0x71,
	0x09, 0xbd, 0x01, 0x68, 0x46, 0x53, 0x7b, 0x8a, 0x8b, 0xd7, 0xd1, 0x6d, 0x78, 0xfd, 0xb2, 0x9c,
	0x3c, 0xdb, 0x2f, 0x2e, 0xa7, 0xc4, 0x9b, 0x51, 0x1d, 0x1f, 0x1e, 0x92, 0xe3, 0xce, 0x49, 0xb7,
	0xb8, 0x82, 0x1e, 0xc0, 0xdb, 0x33, 0xca, 0x6e, 0xc7, 0xf3, 0x3e, 0x21, 0xcf, 0x9a, 0xbd, 0x23,
	0x72, 0xe4, 0xd5, 0x1a, 0x1e, 0x26, 0xfb, 0x9f, 0xf6, 0xbc, 0xe2, 0xea, 0xde, 0xdf, 0x73, 0xb0,
	0x66, 0x9f, 0xac, 0x12, 0x7d, 0xe3, 0x40, 0x61, 0xba, 0x05, 0xa2, 0x1f, 0xcf, 0x25, 0xe5, 0x15,
	0xb3, 0x65, 0xfb, 0x27, 0xaf, 0x68, 0x65, 0x1a, 0x69, 0xe9, 0xe0, 0xd7, 0x7f, 0xfe, 0xeb, 0x6f,
	0x72, 0x4f, 0x4a, 0x8f, 0xc6, 0x3f, 0xa2, 0xbf, 0xb0, 0x33, 0xe9, 0x71, 0x9c, 0x88, 0xe7, 0xcc,
	0x57, 0xb2, 0xba, 0x5b, 0xa5, 0x01, 0xe3, 0x2a, 0xfb, 0x45, 0x95, 0xd5, 0xdd, 0x5f, 0x7e, 0xd0,
	0x9f, 0x72, 0xf6, 0x81, 0xb3, 0x8b, 0x7e, 0xeb, 0xc0, 0xeb, 0x57, 0x76, 0x74, 0xf4, 0x78, 0xf1,
	0xde, 0x73, 0x55, 0x5e, 0x1f, 0xfe, 0xb7, 0xe6, 0x26, 0xc1, 0xb2, 0xf3, 0xae, 0xb3, 0xff, 0xb5,
	0x03, 0x6f, 0xf9, 0x62, 0x38, 0xcf, 0xd3, 0x7e, 0xc1, 0x1e, 0x4a, 0x27, 0xa5, 0x77, 0xc7, 0xf9,
	0xac, 0x69, 0x0d, 0x02, 0x91, 0x92, 0xb7, 0x22, 0x92, 0xa0, 0x1a, 0x30, 0xae, 0xc9, 0x5f, 0x35,
	0x2a, 0x1a, 0x87, 0xf2, 0xa5, 0xff, 0xf4, 0x8f, 0x26, 0xa2, 0x7f, 0x39, 0xce, 0xef, 0x73, 0xb9,
	0xc6, 0xc1, 0xd7, 0xb9, 0x7b, 0x87, 0xc6, 0x67, 0x5d, 0x07, 0xd1, 0x98, 0x04, 0xf1, 0xb1, 0x31,
	0x3a, 0x5d, 0xd1, 0xfe, 0x7f, 0xf4, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x60, 0x03, 0xc7,
	0xfd, 0x10, 0x00, 0x00,
}
