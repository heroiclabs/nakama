// Code generated by go-bindata.
// sources:
// migrations/20180103142000_initial_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20180103142000_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x93\x9b\x36\x10\x7e\xf7\x5f\xb1\x73\x0f\x8d\x49\x39\xdb\x71\x92\x69\x26\xd7\x66\x86\x60\x2e\x61\xe2\xe0\x14\x70\xd2\x7b\xf2\xc8\x68\x0d\x9a\x03\x89\x4a\xe2\x1c\xb7\xd3\xff\xbd\x23\xc0\x3e\xb0\x1d\xa7\x3f\xee\xe9\x8c\x3e\x7d\xfb\xed\xee\xb7\x0b\xe3\xa7\x03\x78\x0a\xae\x28\x77\x92\xa5\x99\x86\xe9\xe4\xd9\x2b\x88\x33\x84\x80\xdc\x93\x82\x80\x53\xe9\x4c\x48\x35\x80\x1a\x37\x67\x09\x72\x85\x14\x2a\x4e\x51\x82\xce\x10\x9c\x92\x24\x19\xee\x4f\x6c\xf8\x8c\x52\x31\xc1\x61\x3a\x9a\xc0\xd0\x00\xae\xda\xa3\x2b\xeb\xc6\x50\xec\x44\x05\x05\xd9\x01\x17\x1a\x2a\x85\xa0\x33\xa6\x60\xc3\x72\x04\xfc\x9a\x60\xa9\x81\x71\x48\x44\x51\xe6\x8c\xf0\x04\x61\xcb\x74\x56\xc7\x69\x59\x46\x86\xe3\xae\xe5\x10\x6b\x4d\x18\x07\x02\x89\x28\x77\x20\x36\x5d\x20\x10\xdd\x8a\xce\xb4\x2e\x5f\x8f\xc7\xdb\xed\x76\x44\x6a\xb1\x23\x21\xd3\x71\xde\xc0\xd4\x78\xee\xbb\x5e\x10\x79\xd7\xd3\xd1\xa4\xbd\xb0\xe4\x39\x2a\x05\x12\x7f\xaf\x98\x44\x0a\xeb\x1d\x90\xb2\xcc\x59\x42\xd6\x39\x42\x4e\xb6\x20\x24\x90\x54\x22\x52\xd0\xc2\x08\xde\x4a\xa6\x19\x4f\x6d\x50\x62\xa3\xb7\x44\xa2\xa1\xa1\x4c\x69\xc9\xd6\x95\xee\xd5\x6b\x2f\x8f\xa9\x1e\x40\x70\x20\x1c\xae\x9c\x08\xfc\xe8\x0a\xde\x3a\x91\x1f\xd9\x86\xe4\x8b\x1f\xbf\x5f\x2c\x63\xf8\xe2\x84\xa1\x13\xc4\xbe\x17\xc1\x22\x04\x77\x11\xcc\xfc\xd8\x5f\x04\x11\x2c\x6e\xc1\x09\xee\xe0\x83\x1f\xcc\x6c\x40\xa6\x33\x94\x80\x5f\x4b\x69\x32\x10\x12\x98\xa9\x24\xd2\xba\x6c\x11\x62\x4f\xc2\x46\x34\x92\x54\x89\x09\xdb\xb0\x04\x72\xc2\xd3\x8a\xa4\x08\xa9\x78\x40\xc9\x19\x4f\xa1\x44\x59\x30\x65\x3a\xaa\x80\x70\x6a\x68\x72\x56\x30\x4d\x74\xfd\xe8\x24\x2f\x13\x68\x3c\x18\x5c\x5f\xc3\x8f\x05\x4b\x25\xd1\x08\xcb\x72\xe0\x86\x9e\x13\x7b\x10\x3b\x6f\xe7\x1e\xf8\xb7\x10\x2c\x62\xf0\x7e\xf3\xa3\x38\x32\x1e\x90\x0a\x86\x03\x00\x80\x4f\xa1\xff\xd1\x09\xef\xe0\x83\x77\x07\x43\x46\x2d\xbb\x7e\xca\x28\x74\xff\x96\x4b\x7f\xf6\xf8\xcb\x30\x05\xcb\xf9\xbc\x81\x1a\x32\x4e\x0a\x6c\x0f\x3f\x3b\xa1\xfb\xde\x09\x87\xcf\xa6\xaf\x2c\x30\x45\x8b\xe2\xd0\xf1\x83\xb8\x09\xba\xda\xa3\x57\xf7\xb8\x83\x65\xe0\xff\xba\xf4\x8e\xf8\x28\x53\x65\x4e\x76\xab\x96\x73\xcf\x37\x7d\xf9\xb2\xd5\x46\x1e\x88\x26\x72\x55\xc9\xbc\x17\xf0\x11\x70\x7d\x5d\xfb\x4f\xbd\x1e\x8f\xb5\x10\xb9\x1a\x31\xd4\x9b\xda\x80\x99\x2e\xf2\xf1\x3a\x29\x5f\xfc\x54\x03\x4d\xed\x3b\x59\x1e\xa4\x1b\xe5\x30\xf3\x6e\x9d\xe5\x3c\x86\x27\xc8\x9f\x1c\x49\xcc\x45\x52\xf7\xe2\xe8\x5e\xad\xc0\x44\xc7\x51\x3a\x82\xab\x88\x70\xb8\x95\x84\x27\x4c\x25\xc2\x06\xd7\xb9\xaa\x2f\x6b\x56\xe0\x1f\x82\x1f\xd7\xeb\xe8\xf2\x27\xd2\xd8\x23\x66\x05\xc2\x70\x19\xc1\x0f\xe0\x12\x4e\x28\xb1\x1a\x96\x02\x35\xa1\x44\x93\x96\xe5\xed\x5d\xec\x39\x87\x44\x0e\xd2\xff\xfc\xeb\x09\xb8\xef\x3d\xf7\x03\x0c\x73\xe4\xa9\xce\x86\xfb\x7b\x16\xfc\x0c\xcf\xa7\x93\xc9\xc4\x3a\xca\x0d\x0b\xc2\xf2\xd3\x9a\x18\x79\xd0\x36\xac\x01\x96\x44\xa9\xad\x90\xf4\xac\x82\x7e\xd0\x3d\xf4\x31\x68\x43\xb1\x21\x09\xae\x85\xb8\x5f\x35\x76\xeb\x5b\xa7\x1b\x2b\x15\x22\xcd\x71\xb5\x77\xe5\x05\x20\x29\x30\x41\xae\x51\xd6\xe0\x6f\x03\x95\x46\x52\x1c\x08\x2f\x00\x93\x4a\x69\x51\xfc\x83\xd0\x48\x53\x5c\x25\xa2\xe2\xba\x06\x1a\xcb\xc3\x49\x47\x26\xfb\xca\x74\xd0\x6f\x7e\x81\x93\x2e\x24\x12\x89\xc6\x95\xf1\x8a\xa9\xad\xff\xae\x4b\xd7\x52\x74\x31\x6f\x4e\x29\xaa\x92\x7e\x97\xa2\x8b\x39\x43\xf1\x80\x92\x6d\x76\x97\x29\xba\x98\x26\x93\xc7\x5c\x4f\x06\xdb\x2c\xf3\x96\xee\x3c\x5b\x0f\xf3\x2d\xba\x81\x75\x33\xf8\xde\x7a\x5b\x51\x7c\x60\x09\x5e\x5c\x72\xb7\x8b\xd0\xf3\xdf\x05\xcd\xd3\xfa\x12\xa3\x16\x84\xde\xad\x17\x7a\x81\xeb\xb5\x7b\xb2\xc6\x9b\xc1\x8c\x17\xb3\xc5\x6b\x58\x04\x30\xf3\xe6\x5e\xec\x81\xeb\x44\xae\x33\xf3\xfa\x0b\xb3\xe7\x8f\xd3\x45\x69\x7c\xd4\x5b\xa6\xff\x2a\x27\x63\x9a\x73\x19\x29\x51\xc9\xc4\x8c\x87\x0d\x4a\x13\x8d\x36\x94\x42\x31\xb3\xa1\xce\x65\x7a\x40\xff\xd7\x5c\x7b\x6c\x14\x95\x66\xbc\x5e\x87\xff\x83\xf2\xa0\xa9\xa9\xca\xa1\x44\xfd\x0a\xee\xb3\xda\xaf\x9c\xbd\x85\x0e\x28\x13\x67\x69\xbe\x95\xcc\x6b\x56\x09\xa9\x41\x48\xf3\xb2\x14\x1c\xa4\xd8\xaa\xce\x5c\xd0\x15\xd1\x7d\x92\xde\x48\xd4\xc7\x67\x26\xa2\x9f\xed\xb7\x74\xd6\x4d\x78\x1c\xfe\xe8\xa3\x33\x9f\x9b\x20\x67\x26\xc3\x28\xde\x48\x86\x9c\x0e\x27\x96\x0d\x8c\x3f\x30\x8d\xc3\x67\x87\x7f\xe9\x70\x6a\xd9\xb0\xce\x45\x72\x8f\x74\xf8\xdc\xb2\x81\x62\x8e\xe6\xf9\x0b\xcb\x06\x22\x93\x8c\x3d\x20\x1d\xbe\xb4\x06\x75\xe4\xf6\x8d\xda\x75\xc4\x51\x83\x6a\xa3\x75\x3f\x15\x66\x62\xcb\x07\xb3\x70\xf1\xe9\xd1\x77\xc7\x9e\xbb\xb9\x70\xde\xcc\xd9\x05\x84\xba\x19\xfc\x1d\x00\x00\xff\xff\x18\xdf\x9a\xc7\xf1\x0a\x00\x00")

func _20180103142000_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180103142000_initial_schemaSql,
		"20180103142000_initial_schema.sql",
	)
}

func _20180103142000_initial_schemaSql() (*asset, error) {
	bytes, err := _20180103142000_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180103142000_initial_schema.sql", size: 2801, mode: os.FileMode(420), modTime: time.Unix(1518542785, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20180103142000_initial_schema.sql": _20180103142000_initial_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"20180103142000_initial_schema.sql": &bintree{_20180103142000_initial_schemaSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

