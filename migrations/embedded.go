// Code generated by go-bindata.
// sources:
// migrations/20180103142000_initial_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20180103142000_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5f\x93\x9b\xb6\x17\x7d\xf7\xa7\xb8\xb3\x0f\xbf\x40\x7e\xac\xed\x38\xc9\x34\x93\x6d\x33\xc3\x62\x9c\x30\x71\x70\x0a\x38\xe9\x3e\x79\x64\x74\x0d\x9a\x05\x89\x4a\x62\x1d\xb7\xd3\xef\xde\x11\x60\xaf\xff\xad\x93\xb6\x3c\xd9\xd2\xd1\xb9\xe7\xde\x7b\xb8\x62\xf0\xbc\x07\xcf\xc1\x13\xd5\x46\xb2\x2c\xd7\x30\x1a\xbe\x78\x03\x49\x8e\x10\x92\x7b\x52\x12\x70\x6b\x9d\x0b\xa9\x7a\xd0\xe0\xa6\x2c\x45\xae\x90\x42\xcd\x29\x4a\xd0\x39\x82\x5b\x91\x34\xc7\xed\x8e\x03\x5f\x50\x2a\x26\x38\x8c\xfa\x43\xb0\x0c\xe0\xaa\xdb\xba\xb2\x6f\x0c\xc5\x46\xd4\x50\x92\x0d\x70\xa1\xa1\x56\x08\x3a\x67\x0a\x56\xac\x40\xc0\x6f\x29\x56\x1a\x18\x87\x54\x94\x55\xc1\x08\x4f\x11\xd6\x4c\xe7\x4d\x9c\x8e\xa5\x6f\x38\xee\x3a\x0e\xb1\xd4\x84\x71\x20\x90\x8a\x6a\x03\x62\xb5\x0f\x04\xa2\x3b\xd1\xb9\xd6\xd5\xdb\xc1\x60\xbd\x5e\xf7\x49\x23\xb6\x2f\x64\x36\x28\x5a\x98\x1a\x4c\x03\xcf\x0f\x63\xff\x7a\xd4\x1f\x76\x07\xe6\xbc\x40\xa5\x40\xe2\xef\x35\x93\x48\x61\xb9\x01\x52\x55\x05\x4b\xc9\xb2\x40\x28\xc8\x1a\x84\x04\x92\x49\x44\x0a\x5a\x18\xc1\x6b\xc9\x34\xe3\x99\x03\x4a\xac\xf4\x9a\x48\x34\x34\x94\x29\x2d\xd9\xb2\xd6\x07\xf5\xda\xca\x63\xea\x00\x20\x38\x10\x0e\x57\x6e\x0c\x41\x7c\x05\xb7\x6e\x1c\xc4\x8e\x21\xf9\x1a\x24\x1f\x66\xf3\x04\xbe\xba\x51\xe4\x86\x49\xe0\xc7\x30\x8b\xc0\x9b\x85\xe3\x20\x09\x66\x61\x0c\xb3\x09\xb8\xe1\x1d\x7c\x0c\xc2\xb1\x03\xc8\x74\x8e\x12\xf0\x5b\x25\x4d\x06\x42\x02\x33\x95\x44\xda\x94\x2d\x46\x3c\x90\xb0\x12\xad\x24\x55\x61\xca\x56\x2c\x85\x82\xf0\xac\x26\x19\x42\x26\x1e\x50\x72\xc6\x33\xa8\x50\x96\x4c\x99\x8e\x2a\x20\x9c\x1a\x9a\x82\x95\x4c\x13\xdd\x2c\x9d\xe4\x65\x02\x0d\x7a\xbd\xeb\x6b\xf8\x7f\xc9\x32\x49\x34\xc2\xbc\xea\x79\x91\xef\x26\x3e\x24\xee\xed\xd4\x87\x60\x02\xe1\x2c\x01\xff\xb7\x20\x4e\x62\xe3\x01\xa9\xc0\xea\x01\x00\x7c\x8e\x82\x4f\x6e\x74\x07\x1f\xfd\x3b\xb0\x18\xb5\x9d\x66\x95\x51\xd8\x7f\xe6\xf3\x60\xfc\xf8\xcf\x30\x85\xf3\xe9\xb4\x85\x1a\x32\x4e\x4a\xec\x36\xbf\xb8\x91\xf7\xc1\x8d\xac\x17\xa3\x37\x36\x98\xa2\xc5\x49\xe4\x06\x61\xd2\x06\x5d\x6c\xd1\x8b\x7b\xdc\xc0\x3c\x0c\x7e\x9d\xfb\x47\x7c\xab\xba\x28\xce\xf0\x8d\x5e\xbf\xee\xb4\x91\x07\xa2\x89\x5c\xd4\xb2\x78\x02\x70\x7d\xdd\xf8\x4f\xbd\x1d\x0c\xb4\x10\x85\xea\x33\xd4\xab\xc6\x80\xb9\x2e\x8b\xc1\x32\xad\x5e\xfd\xd4\x00\x4d\xed\xf7\xb2\xdc\x49\x37\xca\x61\xec\x4f\xdc\xf9\x34\x81\x67\xc8\x9f\x1d\x49\x2c\x44\xda\xf4\xe2\x9c\x44\x13\x1d\xfb\x59\x1f\xae\x62\xc2\x61\x22\x09\x4f\x99\x4a\x85\x03\x9e\x7b\xd5\x1c\xd6\xac\xc4\x3f\x04\x3f\x9b\xdf\xe3\xe1\xcf\xa4\xb5\x47\xc2\x4a\x04\x6b\x1e\xc3\xff\xc0\x23\x9c\x50\x62\xb7\x2c\xb5\x4e\x17\x62\xb5\x52\xa8\x17\xa5\x02\x88\x3f\xb9\xd3\xa9\xa9\x72\xf3\x6c\xa5\x0f\x8f\x74\x97\xa8\x09\x25\x9a\x74\xa1\x6f\xef\x12\xdf\xdd\x65\xbf\xcb\xf7\xcf\xbf\x9e\x81\xf7\xc1\xf7\x3e\x82\x55\x20\xcf\x74\x6e\x6d\xcf\xd9\xf0\x33\xbc\x1c\x0d\x87\x43\xfb\x88\x18\x4b\xc2\x8a\xd3\x42\x9a\x9c\xa0\xeb\x72\x0b\xac\x88\x52\x6b\x21\xe9\x59\x05\x87\x41\xb7\xd0\xc7\xa0\x9d\x3f\x48\x8a\x4b\x21\xee\x17\xad\x47\x0f\xfd\xb6\x1f\x2b\x13\x22\x2b\x70\xb1\xb5\xf2\x05\x20\x29\x31\x45\xae\x51\x36\xe0\xa7\x81\x4a\x23\x29\x77\x84\x17\x80\x69\xad\xb4\x28\x7f\x20\x34\xd2\x0c\x17\xa9\xa8\xb9\x6e\x80\xbb\x0e\x1e\xb5\xb1\xab\xcc\x1e\xfa\xdd\x2f\x70\xd2\x85\x54\x22\xd1\x48\x17\xa4\x25\xbb\x0d\xde\xef\xf1\x75\x14\x7b\x98\x77\xa7\x0c\x75\x45\xbf\xcb\xb0\x87\x39\xc3\x40\x99\x32\x13\x7b\x4b\x71\x96\x61\x1f\xd3\xe6\x71\x6a\xd8\x9e\x7d\xd3\xfb\xde\x08\x5b\x50\x7c\x60\x29\x5e\x1c\x64\x93\x59\xe4\x07\xef\xc3\x76\xb5\x39\xc4\xa8\x0d\x91\x3f\xf1\x23\x3f\xf4\xfc\x6e\x16\x36\x78\xf3\xf2\x25\xb3\xf1\xec\x2d\xcc\x42\x18\xfb\x53\x3f\xf1\xc1\x73\x63\xcf\x1d\xfb\x87\x43\xf1\xa0\x9d\xa7\xc3\xd0\xb4\xfd\x60\x60\xfe\xa3\x9c\x4c\x8f\xcf\x65\xa4\x44\x2d\x53\xe3\x66\x07\x94\x26\x1a\x1d\xa8\x84\x62\x66\x0a\x9d\xcb\x74\x87\xfe\xb7\xb9\x1e\xb0\x51\x54\x9a\xf1\x66\xe4\xfd\x07\xca\x9d\xa6\xb6\x2a\xbb\x12\x1d\x56\x70\x9b\xd5\x76\x42\x6c\x0d\xb4\x43\x99\x38\x73\xf3\x3d\x64\xae\x52\x25\xa4\x06\x21\xcd\x85\x28\x38\x48\xb1\x56\x17\x7d\xfc\x63\x16\x3e\xc8\xf6\x29\x9d\x4d\x13\x1e\xdf\xd5\xdd\x00\x3e\x33\x7b\x8d\xe2\x95\x64\xc8\xa9\x35\xb4\x1d\x60\xfc\x81\x69\xb4\x5e\xec\x7e\x52\x6b\x64\x3b\xb0\x2c\x44\x7a\x8f\xd4\x7a\x69\x3b\x40\xb1\x40\xb3\xfe\xca\x76\x80\xc8\x34\x67\x0f\x48\xad\xd7\x76\xaf\x89\xdc\xdd\x9a\xfb\x8e\x38\x6a\x50\x63\xb4\xfd\xcf\x81\xb1\x58\xf3\xde\x38\x9a\x7d\x7e\xf4\xdd\xb1\xe7\x6e\x2e\xec\xb7\xef\xd9\x05\x84\xba\xe9\xfd\x1d\x00\x00\xff\xff\x4b\x0e\x1b\x05\xd5\x0a\x00\x00")

func _20180103142000_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180103142000_initial_schemaSql,
		"20180103142000_initial_schema.sql",
	)
}

func _20180103142000_initial_schemaSql() (*asset, error) {
	bytes, err := _20180103142000_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180103142000_initial_schema.sql", size: 2773, mode: os.FileMode(420), modTime: time.Unix(1517419637, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20180103142000_initial_schema.sql": _20180103142000_initial_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"20180103142000_initial_schema.sql": &bintree{_20180103142000_initial_schemaSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

