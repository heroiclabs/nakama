// Code generated by go-bindata.
// sources:
// migrations/20180103142000_initial_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20180103142000_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x93\x9b\x36\x10\x7e\xf7\x5f\xb1\x73\x0f\x8d\x49\x39\xdb\x71\x92\x69\x26\xd7\x66\x86\x60\x2e\x61\xe2\xe0\x14\x70\xd2\x7b\xf2\xc8\x68\x0d\x9a\x03\x89\x4a\xe2\x1c\xb7\xd3\xff\xbd\x23\xc0\x36\xf8\x1c\xa7\x3f\xee\xe9\x8c\x3e\x7d\xfb\xed\xee\xb7\x0b\xe3\xa7\x03\x78\x0a\xae\x28\x77\x92\xa5\x99\x86\xe9\xe4\xd9\x2b\x88\x33\x84\x80\xdc\x93\x82\x80\x53\xe9\x4c\x48\x35\x80\x1a\x37\x67\x09\x72\x85\x14\x2a\x4e\x51\x82\xce\x10\x9c\x92\x24\x19\xee\x4f\x6c\xf8\x8c\x52\x31\xc1\x61\x3a\x9a\xc0\xd0\x00\xae\xda\xa3\x2b\xeb\xc6\x50\xec\x44\x05\x05\xd9\x01\x17\x1a\x2a\x85\xa0\x33\xa6\x60\xc3\x72\x04\xfc\x9a\x60\xa9\x81\x71\x48\x44\x51\xe6\x8c\xf0\x04\x61\xcb\x74\x56\xc7\x69\x59\x46\x86\xe3\xae\xe5\x10\x6b\x4d\x18\x07\x02\x89\x28\x77\x20\x36\x5d\x20\x10\xdd\x8a\xce\xb4\x2e\x5f\x8f\xc7\xdb\xed\x76\x44\x6a\xb1\x23\x21\xd3\x71\xde\xc0\xd4\x78\xee\xbb\x5e\x10\x79\xd7\xd3\xd1\xa4\xbd\xb0\xe4\x39\x2a\x05\x12\x7f\xaf\x98\x44\x0a\xeb\x1d\x90\xb2\xcc\x59\x42\xd6\x39\x42\x4e\xb6\x20\x24\x90\x54\x22\x52\xd0\xc2\x08\xde\x4a\xa6\x19\x4f\x6d\x50\x62\xa3\xb7\x44\xa2\xa1\xa1\x4c\x69\xc9\xd6\x95\xee\xd5\x6b\x2f\x8f\xa9\x1e\x40\x70\x20\x1c\xae\x9c\x08\xfc\xe8\x0a\xde\x3a\x91\x1f\xd9\x86\xe4\x8b\x1f\xbf\x5f\x2c\x63\xf8\xe2\x84\xa1\x13\xc4\xbe\x17\xc1\x22\x04\x77\x11\xcc\xfc\xd8\x5f\x04\x11\x2c\x6e\xc1\x09\xee\xe0\x83\x1f\xcc\x6c\x40\xa6\x33\x94\x80\x5f\x4b\x69\x32\x10\x12\x98\xa9\x24\xd2\xba\x6c\x11\x62\x4f\xc2\x46\x34\x92\x54\x89\x09\xdb\xb0\x04\x72\xc2\xd3\x8a\xa4\x08\xa9\x78\x40\xc9\x19\x4f\xa1\x44\x59\x30\x65\x3a\xaa\x80\x70\x6a\x68\x72\x56\x30\x4d\x74\xfd\xe8\x51\x5e\x26\xd0\x78\x30\xb8\xbe\x86\x1f\x0b\x96\x4a\xa2\x11\x96\xe5\xc0\x0d\x3d\x27\xf6\x20\x76\xde\xce\x3d\xf0\x6f\x21\x58\xc4\xe0\xfd\xe6\x47\x71\x64\x3c\x20\x15\x0c\x07\x00\x00\x9f\x42\xff\xa3\x13\xde\xc1\x07\xef\x0e\x86\x8c\x5a\x76\xfd\x94\x51\xe8\xfe\x2d\x97\xfe\xec\xf8\xcb\x30\x05\xcb\xf9\xbc\x81\x1a\x32\x4e\x0a\x6c\x0f\x3f\x3b\xa1\xfb\xde\x09\x87\xcf\xa6\xaf\x2c\x30\x45\x8b\xe2\xd0\xf1\x83\xb8\x09\xba\xda\xa3\x57\xf7\xb8\x83\x65\xe0\xff\xba\xf4\x4e\xf8\x28\x53\x65\x4e\x76\xab\x96\x73\xcf\x37\x7d\xf9\xb2\xd5\x46\x1e\x88\x26\x72\x55\xc9\xbc\x17\xf0\x08\xb8\xbe\xae\xfd\xa7\x5e\x8f\xc7\x5a\x88\x5c\x8d\x18\xea\x4d\x6d\xc0\x4c\x17\xf9\x78\x9d\x94\x2f\x7e\xaa\x81\xa6\xf6\x2b\x4d\xd2\x53\xe9\x46\x39\xcc\xbc\x5b\x67\x39\x8f\xe1\x09\xf2\x27\x0d\x6f\x2e\x92\xba\x05\x27\xf0\x3a\xb0\x09\x8a\xa3\x74\x04\x57\x11\xe1\x70\x2b\x09\x4f\x98\x4a\x84\x0d\xae\x73\x55\x5f\xd6\xac\xc0\x3f\x04\x3f\x2d\xd3\xc9\xe5\x4f\xa4\x71\x45\xcc\x0a\x84\xe1\x32\x82\x1f\xc0\x25\x9c\x50\x62\x35\x2c\x05\x6a\x42\x89\x26\x2d\xcb\xdb\xbb\xd8\x73\x0e\x7d\x39\x28\xfe\xf3\xaf\x27\xe0\xbe\xf7\xdc\x0f\x30\xcc\x91\xa7\x3a\x1b\xee\xef\x59\xf0\x33\x3c\x9f\x4e\x26\x13\xeb\xa4\xea\x58\x10\x96\x1f\x5b\xdc\x95\x07\x6d\x9f\x1a\x60\x49\x94\xda\x0a\x49\xcf\x2a\xe8\x07\xdd\x43\x8f\x41\x1b\x8a\x0d\x49\x70\x2d\xc4\xfd\xaa\x71\x59\xdf\x31\xdd\x58\xa9\x10\x69\x8e\xab\xbd\x19\x2f\x00\x49\x81\x09\x72\x8d\xb2\x06\x7f\x1b\xa8\x34\x92\xe2\x40\x78\x01\x98\x54\x4a\x8b\xe2\x1f\x84\x46\x9a\xe2\x2a\x11\x15\xd7\x35\xd0\x38\x1d\x1e\x75\x64\xb2\xaf\x4c\x07\xfd\xe6\x17\x78\xd4\x85\x44\x22\xd1\xb8\x32\x5e\x31\xb5\xf5\xdf\x75\xe9\x5a\x8a\x2e\xe6\xcd\x63\x8a\xaa\xa4\xdf\xa5\xe8\x62\xce\x50\x3c\xa0\x64\x9b\xdd\x65\x8a\x2e\xa6\xc9\xe4\x98\xeb\xa3\x79\x36\x3b\xbc\xa5\x3b\xcf\xd6\xc3\x7c\x8b\x6e\x60\xdd\x0c\xbe\xb7\xd5\x56\x14\x1f\x58\x82\x17\x77\xdb\xed\x22\xf4\xfc\x77\x41\xf3\xb4\xbe\xc4\xa8\x05\xa1\x77\xeb\x85\x5e\xe0\x7a\xed\x7a\xac\xf1\x66\x30\xe3\xc5\x6c\xf1\x1a\x16\x01\xcc\xbc\xb9\x17\x7b\xe0\x3a\x91\xeb\xcc\xbc\xfe\x9e\xec\xf9\xe3\xf1\x7e\x34\x3e\xea\xed\xd0\x7f\x95\x93\x31\xcd\xb9\x8c\x94\xa8\x64\x62\xc6\xc3\x06\xa5\x89\x46\x1b\x4a\xa1\x98\xd9\x50\xe7\x32\x3d\xa0\xff\x6b\xae\x3d\x36\x8a\x4a\x33\x5e\xaf\xc3\xff\x41\x79\xd0\xd4\x54\xe5\x50\xa2\x7e\x05\xf7\x59\xed\x57\xce\xde\x42\x07\x94\x89\xb3\x34\x9f\x48\xe6\xed\xaa\x84\xd4\x20\xa4\x79\x47\x0a\x0e\x52\x6c\x55\x67\x2e\xe8\x8a\xe8\x3e\x49\x6f\x24\xea\xe3\x33\x13\xd1\xcf\xf6\x5b\x3a\xeb\x26\x1c\x87\x3f\xfa\xe8\xcc\xe7\x26\xc8\x99\xc9\x30\x8a\x37\x92\x21\xa7\xc3\x89\x65\x03\xe3\x0f\x4c\xe3\xf0\xd9\xe1\x5f\x3a\x9c\x5a\x36\xac\x73\x91\xdc\x23\x1d\x3e\xb7\x6c\xa0\x98\xa3\x79\xfe\xc2\xb2\x81\xc8\x24\x63\x0f\x48\x87\x2f\xad\x41\x1d\xb9\x7d\x91\x76\x1d\x71\xd2\xa0\xda\x68\xdd\x2f\x84\x99\xd8\xf2\xc1\x2c\x5c\x7c\x3a\xfa\xee\xd4\x73\x37\x17\xce\x9b\x39\xbb\x80\x50\x37\x83\xbf\x03\x00\x00\xff\xff\xac\xef\xba\x29\xe8\x0a\x00\x00")

func _20180103142000_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		__20180103142000_initial_schemaSql,
		"20180103142000_initial_schema.sql",
	)
}

func _20180103142000_initial_schemaSql() (*asset, error) {
	bytes, err := _20180103142000_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20180103142000_initial_schema.sql", size: 2792, mode: os.FileMode(420), modTime: time.Unix(1518544420, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20180103142000_initial_schema.sql": _20180103142000_initial_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"20180103142000_initial_schema.sql": &bintree{_20180103142000_initial_schemaSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

