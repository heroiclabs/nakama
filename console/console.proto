// Copyright 2018 The Nakama Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * The RPC protocol for the developer console.
 */
syntax = "proto3";

package nakama.console;

import "github.com/heroiclabs/nakama/api/api.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-swagger/options/annotations.proto";

option go_package = "console";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Nakama console API v2";
    version: "2.0";
    contact: {
      name: "The Nakama Authors & Contributors";
      url: "https://github.com/heroiclabs/nakama";
      email: "hello@heroiclabs.com";
    };
  };
  host: "127.0.0.1:7351";
  external_docs: {
    url: "https://heroiclabs.com/docs";
    description: "Nakama server console documentation";
  }
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BasicAuth";
      value: {
        type: TYPE_BASIC;
      }
    }
  }
  // Default security definition.
  security: {
    security_requirement: {
      key: "BasicAuth";
      value: {};
    }
  }
};

/**
 * The developer console RPC protocol service built with GRPC.
 */
service Console {
  // Authenticate a user with username+password.
  rpc Login (AuthenticateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v2/console/authenticate",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      security: {
        security_requirement: {}
      }
    };
  }

  // Delete all information stored for a user account.
  rpc DeleteAccount (AccountDeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http).delete = "/v2/console/account/{id}";
  }

  // Delete all accounts.
  rpc DeleteAccounts (google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http).delete = "/v2/console/account";
  }

  // Delete a storage object.
  rpc DeleteStorageObject (DeleteStorageObjectRequest) returns (google.protobuf.Empty) {
    option (google.api.http).delete = "/v2/console/storage/{collection}/{key}/{user_id}";
  }

  // Delete all storage objects.
  rpc DeleteStorageObjects (google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http).delete = "/v2/console/storage";
  }

  // Export all information stored about a user account.
  rpc ExportAccount (AccountIdRequest) returns (AccountExport) {
    option (google.api.http).get = "/v2/console/account/{id}/export";
  }

  // Get info about a particular account
  rpc GetAccount (AccountIdRequest) returns (nakama.api.Account) {
    option (google.api.http).get = "/v2/console/account/{id}";
  }

  // Get a storage object
  rpc GetStorage (GetStorageObjectRequest) returns (StorageObject) {
    option (google.api.http).get = "/v2/console/storage/{collection}/{key}/{user_id}";
  }

  // List all recent accounts.
  rpc ListAccounts (google.protobuf.Empty) returns (AccountList) {
    option (google.api.http).get = "/v2/console/account";
  }

  // List all storage collections.
  rpc ListStorageCollections(google.protobuf.Empty) returns (StorageCollectionList) {
    option (google.api.http).get = "/v2/console/storage";
  }

  // List storage objects in a given collection.
  rpc ListStorageObjects (ListStorageObjectRequest) returns (StorageObjectList) {
    option (google.api.http) = {
      get: "/v2/console/storage/{collection}",
      additional_bindings {
        get: "/v2/console/storage/{collection}/{user_id}"
      }
    };
  }

  // Create or overwrite a storage object.
  rpc WriteStorageObject (WriteStorageObjectRequest) returns (google.protobuf.Empty) {
    option (google.api.http).put = "/v2/console/storage";
  }
}

/**
 * Deletion request for a user account.
 */
message AccountDeleteRequest {
  // The unique identifier of the user account.
  string id = 1;
  // Record the user deletion - used for GDPR compliance.
  google.protobuf.BoolValue record_deletion = 2;
}

/**
 * An export of all information stored for a user account.
 */
message AccountExport {
  // The user's account details.
  nakama.api.Account account = 1;
  // The user's storage.
  repeated nakama.api.StorageObject objects = 2;
  // The user's friends.
  repeated nakama.api.Friend friends = 3;
  // The user's groups.
  repeated nakama.api.Group groups = 4;
  // The user's chat messages.
  repeated nakama.api.ChannelMessage messages = 5;
  // The user's leaderboard records.
  repeated nakama.api.LeaderboardRecord leaderboard_records = 6;
  // The user's notifications.
  repeated nakama.api.Notification notifications = 7;
  // The user's wallet ledger items.
  repeated WalletLedger wallet_ledgers = 8;
}

/**
 * The identifier for a user account.
 */
message AccountIdRequest {
  // The unique identifier of the user account.
  string id = 1;
}

/**
 * Get the recent list of accounts.
 */
message AccountList {
  repeated nakama.api.Account accounts = 1;
}

/**
 * Authenticate against the server with username+password.
 */
message AuthenticateRequest {
  // The username of the user.
  string username = 1;
  // The password of the user.
  string password = 2;
}

// Delete a storage object.
message DeleteStorageObjectRequest {
  // The collection which stores the object.
  string collection = 1;
  // The key of the object within the collection.
  string key = 2;
  // ID of the user that this object belongs to.
  string user_id = 3;
}

// Retrieve a storage object.
message GetStorageObjectRequest {
  // The collection which stores the object.
  string collection = 1;
  // The key of the object within the collection.
  string key = 2;
  // The user owner of the object.
  string user_id = 3;
}

// List object belonging to a user and/or a collection.
message ListStorageObjectRequest {
 // The collection which stores the object.
  string collection = 1;
  // ID of the user that this object belongs to.
  string user_id = 2;
  // The cursor to page through results from.
  string cursor = 3; // value from StorageObjectList.cursor.
}

/**
 * List of collections available in storage.
 */
message StorageCollectionList {
  // Storage collections.
  repeated string collections = 1;
}

// A storage record.
message StorageObject {
  // The collection to store the object.
  string collection = 1;
  // The key for the object within the collection.
  string key = 2;
  // ID of the user that this object belongs to.
  string user_id = 3;
  // The value of the object.
  string value = 4;
  // The read access permissions for the object.
  int32 permission_read = 5;
  // The write access permissions for the object.
  int32 permission_write = 6;
}

/**
 * List of objects in a given collection.
 */
message StorageObjectList {
  // The list of storage objects.
  repeated StorageObject objects = 1;
  // The cursor associated with the query a page of results.
  string cursor = 2;
}

/**
 * A wallet ledger item representing a change to the user's wallet.
 */
message WalletLedger {
  // The unique ID of the change.
  string id = 1;
  // The user ID this change belongs to.
  string user_id = 2;
  // The changes to the wallet.
  string changeset = 3;
  // Metadata.
  string metadata = 4;
  // The UNIX time when the wallet ledger item was created.
  google.protobuf.Timestamp create_time = 8;
  // The UNIX time when the wallet ledger item was updated.
  google.protobuf.Timestamp update_time = 9;
}

// Write an object to storage.
message WriteStorageObjectRequest {
  StorageObject object = 1;
}
