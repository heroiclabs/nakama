// Code generated by protoc-gen-go. DO NOT EDIT.
// source: console/console.proto

/*
Package console is a generated protocol buffer package.

It is generated from these files:
	console/console.proto

It has these top-level messages:
	AccountExport
	AccountIdRequest
	AuthenticateRequest
	Session
	WalletLedger
*/
package console

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import nakama_api "github.com/heroiclabs/nakama/api"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// An export of all information stored for a user account.
type AccountExport struct {
	// The user's account details.
	Account *nakama_api.Account `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	// The user's storage.
	Objects []*nakama_api.StorageObject `protobuf:"bytes,2,rep,name=objects" json:"objects,omitempty"`
	// The user's friends.
	Friends []*nakama_api.Friend `protobuf:"bytes,3,rep,name=friends" json:"friends,omitempty"`
	// The user's groups.
	Groups []*nakama_api.Group `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	// The user's leaderboard records.
	LeaderboardRecords []*nakama_api.LeaderboardRecord `protobuf:"bytes,5,rep,name=leaderboard_records,json=leaderboardRecords" json:"leaderboard_records,omitempty"`
	// The user's notifications.
	Notifications []*nakama_api.Notification `protobuf:"bytes,6,rep,name=notifications" json:"notifications,omitempty"`
	// The user's wallet ledger items.
	WalletLedgers []*WalletLedger `protobuf:"bytes,7,rep,name=wallet_ledgers,json=walletLedgers" json:"wallet_ledgers,omitempty"`
}

func (m *AccountExport) Reset()                    { *m = AccountExport{} }
func (m *AccountExport) String() string            { return proto.CompactTextString(m) }
func (*AccountExport) ProtoMessage()               {}
func (*AccountExport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccountExport) GetAccount() *nakama_api.Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AccountExport) GetObjects() []*nakama_api.StorageObject {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *AccountExport) GetFriends() []*nakama_api.Friend {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *AccountExport) GetGroups() []*nakama_api.Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *AccountExport) GetLeaderboardRecords() []*nakama_api.LeaderboardRecord {
	if m != nil {
		return m.LeaderboardRecords
	}
	return nil
}

func (m *AccountExport) GetNotifications() []*nakama_api.Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *AccountExport) GetWalletLedgers() []*WalletLedger {
	if m != nil {
		return m.WalletLedgers
	}
	return nil
}

// *
// The identifier for a user account.
type AccountIdRequest struct {
	// The unique identifier of the user account.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *AccountIdRequest) Reset()                    { *m = AccountIdRequest{} }
func (m *AccountIdRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountIdRequest) ProtoMessage()               {}
func (*AccountIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AccountIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// *
// Authenticate against the server with username+password.
type AuthenticateRequest struct {
	// The username of the user.
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// The password of the user.
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AuthenticateRequest) Reset()                    { *m = AuthenticateRequest{} }
func (m *AuthenticateRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthenticateRequest) ProtoMessage()               {}
func (*AuthenticateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AuthenticateRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthenticateRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// *
// A user's session used to authenticate messages.
type Session struct {
	// Authentication credentials.
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Session) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// *
// A wallet ledger item representing a change to the user's wallet.
type WalletLedger struct {
	// The unique ID of the change.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The user ID this change belongs to.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// The changes to the wallet.
	Changeset string `protobuf:"bytes,3,opt,name=changeset" json:"changeset,omitempty"`
	// Metadata.
	Metadata string `protobuf:"bytes,4,opt,name=metadata" json:"metadata,omitempty"`
	// The UNIX time when the wallet ledger item was created.
	CreateTime *google_protobuf2.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime" json:"create_time,omitempty"`
	// The UNIX time when the wallet ledger item was updated.
	UpdateTime *google_protobuf2.Timestamp `protobuf:"bytes,9,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *WalletLedger) Reset()                    { *m = WalletLedger{} }
func (m *WalletLedger) String() string            { return proto.CompactTextString(m) }
func (*WalletLedger) ProtoMessage()               {}
func (*WalletLedger) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WalletLedger) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *WalletLedger) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *WalletLedger) GetChangeset() string {
	if m != nil {
		return m.Changeset
	}
	return ""
}

func (m *WalletLedger) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *WalletLedger) GetCreateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *WalletLedger) GetUpdateTime() *google_protobuf2.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func init() {
	proto.RegisterType((*AccountExport)(nil), "nakama.console.AccountExport")
	proto.RegisterType((*AccountIdRequest)(nil), "nakama.console.AccountIdRequest")
	proto.RegisterType((*AuthenticateRequest)(nil), "nakama.console.AuthenticateRequest")
	proto.RegisterType((*Session)(nil), "nakama.console.Session")
	proto.RegisterType((*WalletLedger)(nil), "nakama.console.WalletLedger")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Console service

type ConsoleClient interface {
	// Delete all information stored for a user account.
	DeleteAccount(ctx context.Context, in *AccountIdRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Export all information stored about a user account.
	ExportAccount(ctx context.Context, in *AccountIdRequest, opts ...grpc.CallOption) (*AccountExport, error)
	// Authenticate a user with username+password.
	Login(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*Session, error)
}

type consoleClient struct {
	cc *grpc.ClientConn
}

func NewConsoleClient(cc *grpc.ClientConn) ConsoleClient {
	return &consoleClient{cc}
}

func (c *consoleClient) DeleteAccount(ctx context.Context, in *AccountIdRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/nakama.console.Console/DeleteAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) ExportAccount(ctx context.Context, in *AccountIdRequest, opts ...grpc.CallOption) (*AccountExport, error) {
	out := new(AccountExport)
	err := grpc.Invoke(ctx, "/nakama.console.Console/ExportAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) Login(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := grpc.Invoke(ctx, "/nakama.console.Console/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Console service

type ConsoleServer interface {
	// Delete all information stored for a user account.
	DeleteAccount(context.Context, *AccountIdRequest) (*google_protobuf1.Empty, error)
	// Export all information stored about a user account.
	ExportAccount(context.Context, *AccountIdRequest) (*AccountExport, error)
	// Authenticate a user with username+password.
	Login(context.Context, *AuthenticateRequest) (*Session, error)
}

func RegisterConsoleServer(s *grpc.Server, srv ConsoleServer) {
	s.RegisterService(&_Console_serviceDesc, srv)
}

func _Console_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteAccount(ctx, req.(*AccountIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_ExportAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).ExportAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/ExportAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).ExportAccount(ctx, req.(*AccountIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).Login(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Console_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.console.Console",
	HandlerType: (*ConsoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteAccount",
			Handler:    _Console_DeleteAccount_Handler,
		},
		{
			MethodName: "ExportAccount",
			Handler:    _Console_ExportAccount_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Console_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "console/console.proto",
}

func init() { proto.RegisterFile("console/console.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 788 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdd, 0x6e, 0xdc, 0x44,
	0x14, 0xc7, 0xe5, 0xdd, 0x66, 0xdd, 0x4c, 0xd8, 0xa8, 0x4c, 0x5a, 0x6a, 0xdc, 0x44, 0x71, 0x1d,
	0x04, 0x65, 0xd5, 0xd8, 0xc8, 0xbd, 0x0b, 0x12, 0x62, 0x1b, 0x0a, 0x8a, 0x14, 0x02, 0x72, 0x22,
	0x21, 0x71, 0xb3, 0x9a, 0xb5, 0x4f, 0xbc, 0x4e, 0xec, 0x19, 0x33, 0x33, 0xce, 0x12, 0xa1, 0xdc,
	0xf0, 0x08, 0xf0, 0x04, 0x3c, 0x13, 0xd7, 0xdc, 0x71, 0x05, 0x0f, 0xc0, 0x2d, 0xf2, 0xcc, 0x38,
	0xf1, 0xee, 0x2a, 0xd0, 0x0b, 0xcb, 0x3a, 0xe7, 0xff, 0x3b, 0x1f, 0xf6, 0x9c, 0x33, 0xe8, 0x49,
	0xc2, 0xa8, 0x60, 0x05, 0x84, 0xe6, 0x1d, 0x54, 0x9c, 0x49, 0x86, 0x37, 0x29, 0xb9, 0x24, 0x25,
	0x09, 0x8c, 0xd7, 0x1d, 0x65, 0xb9, 0x9c, 0xd5, 0xd3, 0x20, 0x61, 0x65, 0x38, 0x03, 0xce, 0xf2,
	0xa4, 0x20, 0x53, 0x11, 0x6a, 0x2a, 0x24, 0x55, 0xde, 0x3c, 0x3a, 0xd6, 0xdd, 0xce, 0x18, 0xcb,
	0x0a, 0xd0, 0x5e, 0x4a, 0x99, 0x24, 0x32, 0x67, 0x54, 0x18, 0xf5, 0x99, 0x51, 0x95, 0x35, 0xad,
	0xcf, 0x43, 0x28, 0x2b, 0x79, 0x6d, 0xc4, 0xdd, 0x65, 0x51, 0xe6, 0x25, 0x08, 0x49, 0xca, 0xca,
	0x00, 0x2f, 0xd5, 0x2b, 0xd9, 0xcf, 0x80, 0xee, 0x8b, 0x39, 0xc9, 0x32, 0xe0, 0x21, 0xab, 0x54,
	0xfe, 0xd5, 0x5a, 0xfe, 0x6f, 0x7d, 0x34, 0x1c, 0x27, 0x09, 0xab, 0xa9, 0x7c, 0xf3, 0x63, 0xc5,
	0xb8, 0xc4, 0xfb, 0xc8, 0x26, 0xda, 0xe1, 0x58, 0x9e, 0xf5, 0x62, 0x23, 0xda, 0x0a, 0xcc, 0x97,
	0x36, 0xfd, 0x1b, 0x36, 0x6e, 0x19, 0xfc, 0x0a, 0xd9, 0x6c, 0x7a, 0x01, 0x89, 0x14, 0x4e, 0xcf,
	0xeb, 0xbf, 0xd8, 0x88, 0xde, 0xef, 0xe2, 0xa7, 0x92, 0x71, 0x92, 0xc1, 0x37, 0x8a, 0x88, 0x5b,
	0x12, 0xbf, 0x44, 0xf6, 0x39, 0xcf, 0x81, 0xa6, 0xc2, 0xe9, 0xab, 0x20, 0xdc, 0x0d, 0xfa, 0x52,
	0x49, 0x71, 0x8b, 0xe0, 0x8f, 0xd1, 0x20, 0xe3, 0xac, 0xae, 0x84, 0xf3, 0x40, 0xc1, 0xef, 0x76,
	0xe1, 0xaf, 0x1a, 0x25, 0x36, 0x00, 0x3e, 0x41, 0x5b, 0x05, 0x90, 0x14, 0xf8, 0x94, 0x11, 0x9e,
	0x4e, 0x38, 0x24, 0x8c, 0xa7, 0xc2, 0x59, 0x53, 0x71, 0x3b, 0xdd, 0xb8, 0xe3, 0x3b, 0x2c, 0x56,
	0x54, 0x8c, 0x8b, 0x65, 0x97, 0xc0, 0x9f, 0xa1, 0x21, 0x65, 0x32, 0x3f, 0xcf, 0x13, 0xfd, 0xd7,
	0x9c, 0x81, 0xca, 0xe4, 0x74, 0x33, 0x9d, 0x74, 0x80, 0x78, 0x11, 0xc7, 0x87, 0x68, 0x73, 0x4e,
	0x8a, 0x02, 0xe4, 0xa4, 0x80, 0x34, 0x03, 0x2e, 0x1c, 0x5b, 0x25, 0xd8, 0x0e, 0x16, 0xa7, 0x27,
	0xf8, 0x4e, 0x51, 0xc7, 0x0a, 0x8a, 0x87, 0xf3, 0x8e, 0x25, 0x7c, 0x1f, 0x3d, 0x32, 0xbf, 0xfd,
	0x28, 0x8d, 0xe1, 0x87, 0x1a, 0x84, 0xc4, 0x9b, 0xa8, 0x97, 0xa7, 0xea, 0x80, 0xd6, 0xe3, 0x5e,
	0x9e, 0xfa, 0x5f, 0xa3, 0xad, 0x71, 0x2d, 0x67, 0x40, 0x65, 0x53, 0x1b, 0x5a, 0xcc, 0x45, 0x0f,
	0x6b, 0x01, 0x9c, 0x92, 0x12, 0x0c, 0x7c, 0x6b, 0x37, 0x5a, 0x45, 0x84, 0x98, 0x33, 0x9e, 0x3a,
	0x3d, 0xad, 0xb5, 0xb6, 0xbf, 0x8b, 0xec, 0x53, 0x10, 0x22, 0x67, 0x14, 0x3f, 0x46, 0x6b, 0x92,
	0x5d, 0x02, 0x35, 0xf1, 0xda, 0xf0, 0xff, 0xb6, 0xd0, 0x3b, 0xdd, 0x9e, 0x97, 0x1b, 0xc2, 0x4f,
	0x91, 0xdd, 0x54, 0x9a, 0xe4, 0x6d, 0xf2, 0x41, 0x63, 0x1e, 0xa5, 0x78, 0x1b, 0xad, 0x27, 0x33,
	0x42, 0x33, 0x10, 0x20, 0x9d, 0xbe, 0x92, 0xee, 0x1c, 0x4d, 0x53, 0x25, 0x48, 0x92, 0x12, 0x49,
	0x9c, 0x07, 0xba, 0xa9, 0xd6, 0xc6, 0x9f, 0xa2, 0x8d, 0x84, 0x03, 0x91, 0x30, 0x69, 0x66, 0xde,
	0x79, 0xa8, 0xa6, 0xd3, 0x0d, 0xf4, 0x42, 0x04, 0xed, 0x42, 0x04, 0x67, 0xed, 0x42, 0xc4, 0x48,
	0xe3, 0x8d, 0xa3, 0x09, 0xae, 0xab, 0xf4, 0x36, 0x78, 0xfd, 0xff, 0x83, 0x35, 0xde, 0x38, 0xa2,
	0x3f, 0x7a, 0xc8, 0x3e, 0xd4, 0x27, 0x85, 0x2f, 0xd1, 0xf0, 0x0b, 0x28, 0x40, 0x82, 0x39, 0x13,
	0xec, 0x2d, 0x9f, 0xe5, 0xf2, 0x61, 0xb9, 0xef, 0xad, 0x94, 0x79, 0xd3, 0x6c, 0xb4, 0xef, 0xfd,
	0xfc, 0xfb, 0x9f, 0xbf, 0xf6, 0xdc, 0x91, 0x13, 0x5e, 0x45, 0xed, 0xed, 0x12, 0x9a, 0xc5, 0x0a,
	0x7f, 0xca, 0xd3, 0x1b, 0x7c, 0x8d, 0x86, 0x7a, 0x2d, 0xdf, 0xbe, 0xd8, 0xce, 0x3d, 0x84, 0xce,
	0xe3, 0x7f, 0xa4, 0x6a, 0x3e, 0xc7, 0xbb, 0xf7, 0xd5, 0x0c, 0x41, 0xdf, 0x03, 0x17, 0x68, 0xed,
	0x98, 0x65, 0x39, 0xc5, 0x7b, 0x2b, 0x09, 0x57, 0x07, 0xcd, 0x7d, 0xba, 0x0c, 0x99, 0xf1, 0xf1,
	0xf7, 0x54, 0xbd, 0x1d, 0x7f, 0xf1, 0x1b, 0x3b, 0x19, 0x0e, 0xac, 0xd1, 0xeb, 0x7f, 0xac, 0x5f,
	0xc6, 0x7f, 0x59, 0xf8, 0x06, 0x3d, 0x39, 0x51, 0x59, 0x3c, 0x03, 0x7a, 0xe3, 0x6f, 0x8f, 0xbc,
	0xab, 0xc8, 0x9f, 0xa0, 0xe7, 0x67, 0x33, 0xf0, 0x8c, 0xd8, 0xd4, 0x67, 0x5c, 0x78, 0x1f, 0x7a,
	0x87, 0x8c, 0x4a, 0x9e, 0x4f, 0x6b, 0xc9, 0xb8, 0xc0, 0x1f, 0xcc, 0xa4, 0xac, 0xc4, 0x41, 0x18,
	0xfe, 0xd7, 0x45, 0xec, 0x3e, 0x9e, 0x41, 0x51, 0xb0, 0xcf, 0xef, 0x84, 0x86, 0x8b, 0xfa, 0x51,
	0xf0, 0xc9, 0xc8, 0xb2, 0xa2, 0x47, 0xa4, 0xaa, 0x0a, 0xb3, 0xbd, 0xe1, 0x85, 0x60, 0xf4, 0x60,
	0xc5, 0xc3, 0x5f, 0xa3, 0x3d, 0xd3, 0x88, 0x00, 0x7e, 0x05, 0xfc, 0xb6, 0xd9, 0x94, 0x25, 0x75,
	0x09, 0x54, 0x5f, 0xb0, 0xf8, 0x59, 0xdb, 0xce, 0x62, 0xa9, 0x30, 0x65, 0x89, 0xf8, 0xde, 0x36,
	0x31, 0xd3, 0x81, 0x1a, 0x89, 0x57, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x20, 0xe1, 0x51,
	0x65, 0x06, 0x00, 0x00,
}
