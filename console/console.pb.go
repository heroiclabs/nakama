// Code generated by protoc-gen-go. DO NOT EDIT.
// source: console/console.proto

package console

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	api "github.com/heroiclabs/nakama/api"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Account information.
type Account struct {
	// The user's account details.
	Account *api.Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The UNIX time when the account was disabled.
	DisableTime          *timestamp.Timestamp `protobuf:"bytes,2,opt,name=disable_time,json=disableTime,proto3" json:"disable_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{0}
}

func (m *Account) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Account.Unmarshal(m, b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Account.Marshal(b, m, deterministic)
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return xxx_messageInfo_Account.Size(m)
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetAccount() *api.Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *Account) GetDisableTime() *timestamp.Timestamp {
	if m != nil {
		return m.DisableTime
	}
	return nil
}

// Delete a user account.
type AccountDeleteRequest struct {
	// The unique identifier of the user account.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Record the user deletion - used for GDPR compliance.
	RecordDeletion       *wrappers.BoolValue `protobuf:"bytes,2,opt,name=record_deletion,json=recordDeletion,proto3" json:"record_deletion,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AccountDeleteRequest) Reset()         { *m = AccountDeleteRequest{} }
func (m *AccountDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*AccountDeleteRequest) ProtoMessage()    {}
func (*AccountDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{1}
}

func (m *AccountDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountDeleteRequest.Unmarshal(m, b)
}
func (m *AccountDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountDeleteRequest.Marshal(b, m, deterministic)
}
func (m *AccountDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountDeleteRequest.Merge(m, src)
}
func (m *AccountDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_AccountDeleteRequest.Size(m)
}
func (m *AccountDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountDeleteRequest proto.InternalMessageInfo

func (m *AccountDeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AccountDeleteRequest) GetRecordDeletion() *wrappers.BoolValue {
	if m != nil {
		return m.RecordDeletion
	}
	return nil
}

// An export of all information stored for a user account.
type AccountExport struct {
	// The user's account details.
	Account *api.Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	// The user's storage.
	Objects []*api.StorageObject `protobuf:"bytes,2,rep,name=objects,proto3" json:"objects,omitempty"`
	// The user's friends.
	Friends []*api.Friend `protobuf:"bytes,3,rep,name=friends,proto3" json:"friends,omitempty"`
	// The user's groups.
	Groups []*api.Group `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`
	// The user's chat messages.
	Messages []*api.ChannelMessage `protobuf:"bytes,5,rep,name=messages,proto3" json:"messages,omitempty"`
	// The user's leaderboard records.
	LeaderboardRecords []*api.LeaderboardRecord `protobuf:"bytes,6,rep,name=leaderboard_records,json=leaderboardRecords,proto3" json:"leaderboard_records,omitempty"`
	// The user's notifications.
	Notifications []*api.Notification `protobuf:"bytes,7,rep,name=notifications,proto3" json:"notifications,omitempty"`
	// The user's wallet ledger items.
	WalletLedgers        []*WalletLedger `protobuf:"bytes,8,rep,name=wallet_ledgers,json=walletLedgers,proto3" json:"wallet_ledgers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *AccountExport) Reset()         { *m = AccountExport{} }
func (m *AccountExport) String() string { return proto.CompactTextString(m) }
func (*AccountExport) ProtoMessage()    {}
func (*AccountExport) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{2}
}

func (m *AccountExport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountExport.Unmarshal(m, b)
}
func (m *AccountExport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountExport.Marshal(b, m, deterministic)
}
func (m *AccountExport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountExport.Merge(m, src)
}
func (m *AccountExport) XXX_Size() int {
	return xxx_messageInfo_AccountExport.Size(m)
}
func (m *AccountExport) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountExport.DiscardUnknown(m)
}

var xxx_messageInfo_AccountExport proto.InternalMessageInfo

func (m *AccountExport) GetAccount() *api.Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *AccountExport) GetObjects() []*api.StorageObject {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *AccountExport) GetFriends() []*api.Friend {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *AccountExport) GetGroups() []*api.Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *AccountExport) GetMessages() []*api.ChannelMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *AccountExport) GetLeaderboardRecords() []*api.LeaderboardRecord {
	if m != nil {
		return m.LeaderboardRecords
	}
	return nil
}

func (m *AccountExport) GetNotifications() []*api.Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *AccountExport) GetWalletLedgers() []*WalletLedger {
	if m != nil {
		return m.WalletLedgers
	}
	return nil
}

// The identifier for a user account.
type AccountId struct {
	// The unique identifier of the user account.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountId) Reset()         { *m = AccountId{} }
func (m *AccountId) String() string { return proto.CompactTextString(m) }
func (*AccountId) ProtoMessage()    {}
func (*AccountId) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{3}
}

func (m *AccountId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountId.Unmarshal(m, b)
}
func (m *AccountId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountId.Marshal(b, m, deterministic)
}
func (m *AccountId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountId.Merge(m, src)
}
func (m *AccountId) XXX_Size() int {
	return xxx_messageInfo_AccountId.Size(m)
}
func (m *AccountId) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountId.DiscardUnknown(m)
}

var xxx_messageInfo_AccountId proto.InternalMessageInfo

func (m *AccountId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Authenticate a console user with username and password.
type AuthenticateRequest struct {
	// The username of the user.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The password of the user.
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthenticateRequest) Reset()         { *m = AuthenticateRequest{} }
func (m *AuthenticateRequest) String() string { return proto.CompactTextString(m) }
func (*AuthenticateRequest) ProtoMessage()    {}
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{4}
}

func (m *AuthenticateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthenticateRequest.Unmarshal(m, b)
}
func (m *AuthenticateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthenticateRequest.Marshal(b, m, deterministic)
}
func (m *AuthenticateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticateRequest.Merge(m, src)
}
func (m *AuthenticateRequest) XXX_Size() int {
	return xxx_messageInfo_AuthenticateRequest.Size(m)
}
func (m *AuthenticateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticateRequest proto.InternalMessageInfo

func (m *AuthenticateRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AuthenticateRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// The current server configuration and any associated warnings.
type Config struct {
	// JSON-encoded active server configuration.
	Config string `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Any warnings about the current config.
	Warnings             []*Config_Warning `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{5}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *Config) GetWarnings() []*Config_Warning {
	if m != nil {
		return m.Warnings
	}
	return nil
}

// A warning for a configuration field.
type Config_Warning struct {
	// The config field this warning is for in a JSON pointer format.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Warning message text.
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Config_Warning) Reset()         { *m = Config_Warning{} }
func (m *Config_Warning) String() string { return proto.CompactTextString(m) }
func (*Config_Warning) ProtoMessage()    {}
func (*Config_Warning) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{5, 0}
}

func (m *Config_Warning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config_Warning.Unmarshal(m, b)
}
func (m *Config_Warning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config_Warning.Marshal(b, m, deterministic)
}
func (m *Config_Warning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config_Warning.Merge(m, src)
}
func (m *Config_Warning) XXX_Size() int {
	return xxx_messageInfo_Config_Warning.Size(m)
}
func (m *Config_Warning) XXX_DiscardUnknown() {
	xxx_messageInfo_Config_Warning.DiscardUnknown(m)
}

var xxx_messageInfo_Config_Warning proto.InternalMessageInfo

func (m *Config_Warning) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *Config_Warning) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// A console user session.
type ConsoleSession struct {
	// A session token (JWT) for the console user.
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsoleSession) Reset()         { *m = ConsoleSession{} }
func (m *ConsoleSession) String() string { return proto.CompactTextString(m) }
func (*ConsoleSession) ProtoMessage()    {}
func (*ConsoleSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{6}
}

func (m *ConsoleSession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsoleSession.Unmarshal(m, b)
}
func (m *ConsoleSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsoleSession.Marshal(b, m, deterministic)
}
func (m *ConsoleSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsoleSession.Merge(m, src)
}
func (m *ConsoleSession) XXX_Size() int {
	return xxx_messageInfo_ConsoleSession.Size(m)
}
func (m *ConsoleSession) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsoleSession.DiscardUnknown(m)
}

var xxx_messageInfo_ConsoleSession proto.InternalMessageInfo

func (m *ConsoleSession) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Delete friend relationship between two users.
type DeleteFriendRequest struct {
	// The user do delete for.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// User ID of the friend to remove.
	FriendId             string   `protobuf:"bytes,2,opt,name=friend_id,json=friendId,proto3" json:"friend_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteFriendRequest) Reset()         { *m = DeleteFriendRequest{} }
func (m *DeleteFriendRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteFriendRequest) ProtoMessage()    {}
func (*DeleteFriendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{7}
}

func (m *DeleteFriendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteFriendRequest.Unmarshal(m, b)
}
func (m *DeleteFriendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteFriendRequest.Marshal(b, m, deterministic)
}
func (m *DeleteFriendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFriendRequest.Merge(m, src)
}
func (m *DeleteFriendRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteFriendRequest.Size(m)
}
func (m *DeleteFriendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFriendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFriendRequest proto.InternalMessageInfo

func (m *DeleteFriendRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteFriendRequest) GetFriendId() string {
	if m != nil {
		return m.FriendId
	}
	return ""
}

// Remove a user from a group.
type DeleteGroupUserRequest struct {
	// User to remove.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the group to remove them from.
	GroupId              string   `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteGroupUserRequest) Reset()         { *m = DeleteGroupUserRequest{} }
func (m *DeleteGroupUserRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteGroupUserRequest) ProtoMessage()    {}
func (*DeleteGroupUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{8}
}

func (m *DeleteGroupUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteGroupUserRequest.Unmarshal(m, b)
}
func (m *DeleteGroupUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteGroupUserRequest.Marshal(b, m, deterministic)
}
func (m *DeleteGroupUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteGroupUserRequest.Merge(m, src)
}
func (m *DeleteGroupUserRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteGroupUserRequest.Size(m)
}
func (m *DeleteGroupUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteGroupUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteGroupUserRequest proto.InternalMessageInfo

func (m *DeleteGroupUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteGroupUserRequest) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

// Delete an individual storage object.
type DeleteStorageObjectRequest struct {
	// Collection.
	Collection string `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	// Key.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Owner user ID.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Version for OCC.
	Version              string   `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteStorageObjectRequest) Reset()         { *m = DeleteStorageObjectRequest{} }
func (m *DeleteStorageObjectRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteStorageObjectRequest) ProtoMessage()    {}
func (*DeleteStorageObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{9}
}

func (m *DeleteStorageObjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteStorageObjectRequest.Unmarshal(m, b)
}
func (m *DeleteStorageObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteStorageObjectRequest.Marshal(b, m, deterministic)
}
func (m *DeleteStorageObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteStorageObjectRequest.Merge(m, src)
}
func (m *DeleteStorageObjectRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteStorageObjectRequest.Size(m)
}
func (m *DeleteStorageObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteStorageObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteStorageObjectRequest proto.InternalMessageInfo

func (m *DeleteStorageObjectRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *DeleteStorageObjectRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DeleteStorageObjectRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DeleteStorageObjectRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// Delete a single wallet ledger item.
type DeleteWalletLedgerRequest struct {
	// User ID to remove wallet ledger item from.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the wallet ledger item to remove.
	WalletId             string   `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteWalletLedgerRequest) Reset()         { *m = DeleteWalletLedgerRequest{} }
func (m *DeleteWalletLedgerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteWalletLedgerRequest) ProtoMessage()    {}
func (*DeleteWalletLedgerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{10}
}

func (m *DeleteWalletLedgerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteWalletLedgerRequest.Unmarshal(m, b)
}
func (m *DeleteWalletLedgerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteWalletLedgerRequest.Marshal(b, m, deterministic)
}
func (m *DeleteWalletLedgerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteWalletLedgerRequest.Merge(m, src)
}
func (m *DeleteWalletLedgerRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteWalletLedgerRequest.Size(m)
}
func (m *DeleteWalletLedgerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteWalletLedgerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteWalletLedgerRequest proto.InternalMessageInfo

func (m *DeleteWalletLedgerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteWalletLedgerRequest) GetWalletId() string {
	if m != nil {
		return m.WalletId
	}
	return ""
}

// List (and optionally filter) storage objects.
type ListStorageRequest struct {
	// User ID to filter objects for.
	UserId               string   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListStorageRequest) Reset()         { *m = ListStorageRequest{} }
func (m *ListStorageRequest) String() string { return proto.CompactTextString(m) }
func (*ListStorageRequest) ProtoMessage()    {}
func (*ListStorageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{11}
}

func (m *ListStorageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListStorageRequest.Unmarshal(m, b)
}
func (m *ListStorageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListStorageRequest.Marshal(b, m, deterministic)
}
func (m *ListStorageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStorageRequest.Merge(m, src)
}
func (m *ListStorageRequest) XXX_Size() int {
	return xxx_messageInfo_ListStorageRequest.Size(m)
}
func (m *ListStorageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStorageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListStorageRequest proto.InternalMessageInfo

func (m *ListStorageRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// List (and optionally filter) users.
type ListUsersRequest struct {
	// User ID or username filter.
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// Search only banned users.
	Banned bool `protobuf:"varint,2,opt,name=banned,proto3" json:"banned,omitempty"`
	// Search only recorded deletes.
	Tombstones           bool     `protobuf:"varint,3,opt,name=tombstones,proto3" json:"tombstones,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUsersRequest) Reset()         { *m = ListUsersRequest{} }
func (m *ListUsersRequest) String() string { return proto.CompactTextString(m) }
func (*ListUsersRequest) ProtoMessage()    {}
func (*ListUsersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{12}
}

func (m *ListUsersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListUsersRequest.Unmarshal(m, b)
}
func (m *ListUsersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListUsersRequest.Marshal(b, m, deterministic)
}
func (m *ListUsersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUsersRequest.Merge(m, src)
}
func (m *ListUsersRequest) XXX_Size() int {
	return xxx_messageInfo_ListUsersRequest.Size(m)
}
func (m *ListUsersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUsersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListUsersRequest proto.InternalMessageInfo

func (m *ListUsersRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListUsersRequest) GetBanned() bool {
	if m != nil {
		return m.Banned
	}
	return false
}

func (m *ListUsersRequest) GetTombstones() bool {
	if m != nil {
		return m.Tombstones
	}
	return false
}

// List of storage objects.
type StorageList struct {
	// List of storage objects matching list/filter operation.
	Objects []*api.StorageObject `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
	// Approximate total number of storage objects.
	TotalCount           int32    `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StorageList) Reset()         { *m = StorageList{} }
func (m *StorageList) String() string { return proto.CompactTextString(m) }
func (*StorageList) ProtoMessage()    {}
func (*StorageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{13}
}

func (m *StorageList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageList.Unmarshal(m, b)
}
func (m *StorageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageList.Marshal(b, m, deterministic)
}
func (m *StorageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageList.Merge(m, src)
}
func (m *StorageList) XXX_Size() int {
	return xxx_messageInfo_StorageList.Size(m)
}
func (m *StorageList) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageList.DiscardUnknown(m)
}

var xxx_messageInfo_StorageList proto.InternalMessageInfo

func (m *StorageList) GetObjects() []*api.StorageObject {
	if m != nil {
		return m.Objects
	}
	return nil
}

func (m *StorageList) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

// Unlink a particular device ID from a user's account.
type UnlinkDeviceRequest struct {
	// User ID to unlink from.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Device ID to unlink.
	DeviceId             string   `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnlinkDeviceRequest) Reset()         { *m = UnlinkDeviceRequest{} }
func (m *UnlinkDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*UnlinkDeviceRequest) ProtoMessage()    {}
func (*UnlinkDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{14}
}

func (m *UnlinkDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnlinkDeviceRequest.Unmarshal(m, b)
}
func (m *UnlinkDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnlinkDeviceRequest.Marshal(b, m, deterministic)
}
func (m *UnlinkDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlinkDeviceRequest.Merge(m, src)
}
func (m *UnlinkDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_UnlinkDeviceRequest.Size(m)
}
func (m *UnlinkDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlinkDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlinkDeviceRequest proto.InternalMessageInfo

func (m *UnlinkDeviceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UnlinkDeviceRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

// Update user account information.
type UpdateAccountRequest struct {
	// User ID to update.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Username.
	Username *wrappers.StringValue `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// Display name.
	DisplayName *wrappers.StringValue `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Metadata.
	Metadata *wrappers.StringValue `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Avatar URL.
	AvatarUrl *wrappers.StringValue `protobuf:"bytes,5,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// Langtag.
	LangTag *wrappers.StringValue `protobuf:"bytes,6,opt,name=lang_tag,json=langTag,proto3" json:"lang_tag,omitempty"`
	// Location.
	Location *wrappers.StringValue `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	// Timezone.
	Timezone *wrappers.StringValue `protobuf:"bytes,8,opt,name=timezone,proto3" json:"timezone,omitempty"`
	// Custom ID.
	CustomId *wrappers.StringValue `protobuf:"bytes,9,opt,name=custom_id,json=customId,proto3" json:"custom_id,omitempty"`
	// Email.
	Email *wrappers.StringValue `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	// Device ID modifications.
	DeviceIds map[string]string `protobuf:"bytes,11,rep,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Wallet.
	Wallet               *wrappers.StringValue `protobuf:"bytes,12,opt,name=wallet,proto3" json:"wallet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateAccountRequest) Reset()         { *m = UpdateAccountRequest{} }
func (m *UpdateAccountRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAccountRequest) ProtoMessage()    {}
func (*UpdateAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{15}
}

func (m *UpdateAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateAccountRequest.Unmarshal(m, b)
}
func (m *UpdateAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateAccountRequest.Marshal(b, m, deterministic)
}
func (m *UpdateAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAccountRequest.Merge(m, src)
}
func (m *UpdateAccountRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateAccountRequest.Size(m)
}
func (m *UpdateAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAccountRequest proto.InternalMessageInfo

func (m *UpdateAccountRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateAccountRequest) GetUsername() *wrappers.StringValue {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *UpdateAccountRequest) GetDisplayName() *wrappers.StringValue {
	if m != nil {
		return m.DisplayName
	}
	return nil
}

func (m *UpdateAccountRequest) GetMetadata() *wrappers.StringValue {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *UpdateAccountRequest) GetAvatarUrl() *wrappers.StringValue {
	if m != nil {
		return m.AvatarUrl
	}
	return nil
}

func (m *UpdateAccountRequest) GetLangTag() *wrappers.StringValue {
	if m != nil {
		return m.LangTag
	}
	return nil
}

func (m *UpdateAccountRequest) GetLocation() *wrappers.StringValue {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *UpdateAccountRequest) GetTimezone() *wrappers.StringValue {
	if m != nil {
		return m.Timezone
	}
	return nil
}

func (m *UpdateAccountRequest) GetCustomId() *wrappers.StringValue {
	if m != nil {
		return m.CustomId
	}
	return nil
}

func (m *UpdateAccountRequest) GetEmail() *wrappers.StringValue {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *UpdateAccountRequest) GetDeviceIds() map[string]string {
	if m != nil {
		return m.DeviceIds
	}
	return nil
}

func (m *UpdateAccountRequest) GetWallet() *wrappers.StringValue {
	if m != nil {
		return m.Wallet
	}
	return nil
}

// A list of users.
type UserList struct {
	// A list of users.
	Users []*api.User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	// Approximate total number of users.
	TotalCount           int32    `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserList) Reset()         { *m = UserList{} }
func (m *UserList) String() string { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()    {}
func (*UserList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{16}
}

func (m *UserList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserList.Unmarshal(m, b)
}
func (m *UserList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserList.Marshal(b, m, deterministic)
}
func (m *UserList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserList.Merge(m, src)
}
func (m *UserList) XXX_Size() int {
	return xxx_messageInfo_UserList.Size(m)
}
func (m *UserList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserList.DiscardUnknown(m)
}

var xxx_messageInfo_UserList proto.InternalMessageInfo

func (m *UserList) GetUsers() []*api.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UserList) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

// List of nodes and their stats.
type StatusList struct {
	// List of nodes and their stats.
	Nodes                []*StatusList_Status `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StatusList) Reset()         { *m = StatusList{} }
func (m *StatusList) String() string { return proto.CompactTextString(m) }
func (*StatusList) ProtoMessage()    {}
func (*StatusList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{17}
}

func (m *StatusList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusList.Unmarshal(m, b)
}
func (m *StatusList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusList.Marshal(b, m, deterministic)
}
func (m *StatusList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusList.Merge(m, src)
}
func (m *StatusList) XXX_Size() int {
	return xxx_messageInfo_StatusList.Size(m)
}
func (m *StatusList) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusList.DiscardUnknown(m)
}

var xxx_messageInfo_StatusList proto.InternalMessageInfo

func (m *StatusList) GetNodes() []*StatusList_Status {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// The status of a Nakama node.
type StatusList_Status struct {
	// Node name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Health score.
	Health int32 `protobuf:"varint,2,opt,name=health,proto3" json:"health,omitempty"`
	// Currently connected sessions.
	SessionCount int32 `protobuf:"varint,3,opt,name=session_count,json=sessionCount,proto3" json:"session_count,omitempty"`
	// Currently registered live presences.
	PresenceCount int32 `protobuf:"varint,4,opt,name=presence_count,json=presenceCount,proto3" json:"presence_count,omitempty"`
	// Current number of active authoritative matches.
	MatchCount int32 `protobuf:"varint,5,opt,name=match_count,json=matchCount,proto3" json:"match_count,omitempty"`
	// Current number of running goroutines.
	GoroutineCount int32 `protobuf:"varint,6,opt,name=goroutine_count,json=goroutineCount,proto3" json:"goroutine_count,omitempty"`
	// Average response latency in milliseconds.
	AvgLatencyMs float64 `protobuf:"fixed64,7,opt,name=avg_latency_ms,json=avgLatencyMs,proto3" json:"avg_latency_ms,omitempty"`
	// Average number of requests per second.
	AvgRateSec float64 `protobuf:"fixed64,8,opt,name=avg_rate_sec,json=avgRateSec,proto3" json:"avg_rate_sec,omitempty"`
	// Average input bandwidth usage.
	AvgInputKbs float64 `protobuf:"fixed64,9,opt,name=avg_input_kbs,json=avgInputKbs,proto3" json:"avg_input_kbs,omitempty"`
	// Average output bandwidth usage.
	AvgOutputKbs         float64  `protobuf:"fixed64,10,opt,name=avg_output_kbs,json=avgOutputKbs,proto3" json:"avg_output_kbs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusList_Status) Reset()         { *m = StatusList_Status{} }
func (m *StatusList_Status) String() string { return proto.CompactTextString(m) }
func (*StatusList_Status) ProtoMessage()    {}
func (*StatusList_Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{17, 0}
}

func (m *StatusList_Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusList_Status.Unmarshal(m, b)
}
func (m *StatusList_Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusList_Status.Marshal(b, m, deterministic)
}
func (m *StatusList_Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusList_Status.Merge(m, src)
}
func (m *StatusList_Status) XXX_Size() int {
	return xxx_messageInfo_StatusList_Status.Size(m)
}
func (m *StatusList_Status) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusList_Status.DiscardUnknown(m)
}

var xxx_messageInfo_StatusList_Status proto.InternalMessageInfo

func (m *StatusList_Status) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StatusList_Status) GetHealth() int32 {
	if m != nil {
		return m.Health
	}
	return 0
}

func (m *StatusList_Status) GetSessionCount() int32 {
	if m != nil {
		return m.SessionCount
	}
	return 0
}

func (m *StatusList_Status) GetPresenceCount() int32 {
	if m != nil {
		return m.PresenceCount
	}
	return 0
}

func (m *StatusList_Status) GetMatchCount() int32 {
	if m != nil {
		return m.MatchCount
	}
	return 0
}

func (m *StatusList_Status) GetGoroutineCount() int32 {
	if m != nil {
		return m.GoroutineCount
	}
	return 0
}

func (m *StatusList_Status) GetAvgLatencyMs() float64 {
	if m != nil {
		return m.AvgLatencyMs
	}
	return 0
}

func (m *StatusList_Status) GetAvgRateSec() float64 {
	if m != nil {
		return m.AvgRateSec
	}
	return 0
}

func (m *StatusList_Status) GetAvgInputKbs() float64 {
	if m != nil {
		return m.AvgInputKbs
	}
	return 0
}

func (m *StatusList_Status) GetAvgOutputKbs() float64 {
	if m != nil {
		return m.AvgOutputKbs
	}
	return 0
}

// An individual update to a user's wallet.
type WalletLedger struct {
	// The identifier of this wallet change.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The user ID this wallet ledger item belongs to.
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The changeset.
	Changeset string `protobuf:"bytes,3,opt,name=changeset,proto3" json:"changeset,omitempty"`
	// Any associated metadata.
	Metadata string `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The UNIX time when the wallet ledger item was created.
	CreateTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The UNIX time when the wallet ledger item was updated.
	UpdateTime           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *WalletLedger) Reset()         { *m = WalletLedger{} }
func (m *WalletLedger) String() string { return proto.CompactTextString(m) }
func (*WalletLedger) ProtoMessage()    {}
func (*WalletLedger) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{18}
}

func (m *WalletLedger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WalletLedger.Unmarshal(m, b)
}
func (m *WalletLedger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WalletLedger.Marshal(b, m, deterministic)
}
func (m *WalletLedger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletLedger.Merge(m, src)
}
func (m *WalletLedger) XXX_Size() int {
	return xxx_messageInfo_WalletLedger.Size(m)
}
func (m *WalletLedger) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletLedger.DiscardUnknown(m)
}

var xxx_messageInfo_WalletLedger proto.InternalMessageInfo

func (m *WalletLedger) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *WalletLedger) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *WalletLedger) GetChangeset() string {
	if m != nil {
		return m.Changeset
	}
	return ""
}

func (m *WalletLedger) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func (m *WalletLedger) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *WalletLedger) GetUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

// List of wallet ledger items for a particular user.
type WalletLedgerList struct {
	// A list of wallet ledger items.
	Items                []*WalletLedger `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *WalletLedgerList) Reset()         { *m = WalletLedgerList{} }
func (m *WalletLedgerList) String() string { return proto.CompactTextString(m) }
func (*WalletLedgerList) ProtoMessage()    {}
func (*WalletLedgerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{19}
}

func (m *WalletLedgerList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WalletLedgerList.Unmarshal(m, b)
}
func (m *WalletLedgerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WalletLedgerList.Marshal(b, m, deterministic)
}
func (m *WalletLedgerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletLedgerList.Merge(m, src)
}
func (m *WalletLedgerList) XXX_Size() int {
	return xxx_messageInfo_WalletLedgerList.Size(m)
}
func (m *WalletLedgerList) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletLedgerList.DiscardUnknown(m)
}

var xxx_messageInfo_WalletLedgerList proto.InternalMessageInfo

func (m *WalletLedgerList) GetItems() []*WalletLedger {
	if m != nil {
		return m.Items
	}
	return nil
}

// Write a new storage object or update an existing one.
type WriteStorageObjectRequest struct {
	// Collection.
	Collection string `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	// Key.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// Owner user ID.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Value.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Version for OCC.
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// Read permission value.
	PermissionRead *wrappers.Int32Value `protobuf:"bytes,6,opt,name=permission_read,json=permissionRead,proto3" json:"permission_read,omitempty"`
	// Write permission value.
	PermissionWrite      *wrappers.Int32Value `protobuf:"bytes,7,opt,name=permission_write,json=permissionWrite,proto3" json:"permission_write,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *WriteStorageObjectRequest) Reset()         { *m = WriteStorageObjectRequest{} }
func (m *WriteStorageObjectRequest) String() string { return proto.CompactTextString(m) }
func (*WriteStorageObjectRequest) ProtoMessage()    {}
func (*WriteStorageObjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9289ac5ba895f2a7, []int{20}
}

func (m *WriteStorageObjectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteStorageObjectRequest.Unmarshal(m, b)
}
func (m *WriteStorageObjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteStorageObjectRequest.Marshal(b, m, deterministic)
}
func (m *WriteStorageObjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteStorageObjectRequest.Merge(m, src)
}
func (m *WriteStorageObjectRequest) XXX_Size() int {
	return xxx_messageInfo_WriteStorageObjectRequest.Size(m)
}
func (m *WriteStorageObjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteStorageObjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteStorageObjectRequest proto.InternalMessageInfo

func (m *WriteStorageObjectRequest) GetCollection() string {
	if m != nil {
		return m.Collection
	}
	return ""
}

func (m *WriteStorageObjectRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *WriteStorageObjectRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *WriteStorageObjectRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *WriteStorageObjectRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *WriteStorageObjectRequest) GetPermissionRead() *wrappers.Int32Value {
	if m != nil {
		return m.PermissionRead
	}
	return nil
}

func (m *WriteStorageObjectRequest) GetPermissionWrite() *wrappers.Int32Value {
	if m != nil {
		return m.PermissionWrite
	}
	return nil
}

func init() {
	proto.RegisterType((*Account)(nil), "nakama.console.Account")
	proto.RegisterType((*AccountDeleteRequest)(nil), "nakama.console.AccountDeleteRequest")
	proto.RegisterType((*AccountExport)(nil), "nakama.console.AccountExport")
	proto.RegisterType((*AccountId)(nil), "nakama.console.AccountId")
	proto.RegisterType((*AuthenticateRequest)(nil), "nakama.console.AuthenticateRequest")
	proto.RegisterType((*Config)(nil), "nakama.console.Config")
	proto.RegisterType((*Config_Warning)(nil), "nakama.console.Config.Warning")
	proto.RegisterType((*ConsoleSession)(nil), "nakama.console.ConsoleSession")
	proto.RegisterType((*DeleteFriendRequest)(nil), "nakama.console.DeleteFriendRequest")
	proto.RegisterType((*DeleteGroupUserRequest)(nil), "nakama.console.DeleteGroupUserRequest")
	proto.RegisterType((*DeleteStorageObjectRequest)(nil), "nakama.console.DeleteStorageObjectRequest")
	proto.RegisterType((*DeleteWalletLedgerRequest)(nil), "nakama.console.DeleteWalletLedgerRequest")
	proto.RegisterType((*ListStorageRequest)(nil), "nakama.console.ListStorageRequest")
	proto.RegisterType((*ListUsersRequest)(nil), "nakama.console.ListUsersRequest")
	proto.RegisterType((*StorageList)(nil), "nakama.console.StorageList")
	proto.RegisterType((*UnlinkDeviceRequest)(nil), "nakama.console.UnlinkDeviceRequest")
	proto.RegisterType((*UpdateAccountRequest)(nil), "nakama.console.UpdateAccountRequest")
	proto.RegisterMapType((map[string]string)(nil), "nakama.console.UpdateAccountRequest.DeviceIdsEntry")
	proto.RegisterType((*UserList)(nil), "nakama.console.UserList")
	proto.RegisterType((*StatusList)(nil), "nakama.console.StatusList")
	proto.RegisterType((*StatusList_Status)(nil), "nakama.console.StatusList.Status")
	proto.RegisterType((*WalletLedger)(nil), "nakama.console.WalletLedger")
	proto.RegisterType((*WalletLedgerList)(nil), "nakama.console.WalletLedgerList")
	proto.RegisterType((*WriteStorageObjectRequest)(nil), "nakama.console.WriteStorageObjectRequest")
}

func init() { proto.RegisterFile("console/console.proto", fileDescriptor_9289ac5ba895f2a7) }

var fileDescriptor_9289ac5ba895f2a7 = []byte{
	// 2390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x4b, 0x6f, 0x1b, 0xc9,
	0x11, 0xf6, 0x50, 0xe2, 0xab, 0xa8, 0xd7, 0xb6, 0x64, 0xef, 0x88, 0x92, 0x6d, 0x7a, 0xec, 0x95,
	0x6d, 0xae, 0x45, 0xda, 0x54, 0x36, 0xf6, 0x6a, 0x37, 0x0f, 0x49, 0xb6, 0x15, 0x61, 0x6d, 0x6f,
	0x30, 0xb2, 0x63, 0xc0, 0x09, 0x40, 0x34, 0x67, 0x5a, 0xa3, 0x59, 0x0d, 0xa7, 0xb9, 0xd3, 0x4d,
	0x2a, 0x8a, 0x20, 0x20, 0xd9, 0xe4, 0x98, 0xd3, 0xe6, 0x10, 0x20, 0x87, 0x9c, 0xf6, 0x96, 0x5f,
	0x13, 0xe4, 0x14, 0x20, 0xc7, 0x20, 0x97, 0xfc, 0x85, 0x1c, 0x82, 0x7e, 0x0c, 0x35, 0x7c, 0x8c,
	0x24, 0x7b, 0xe1, 0x83, 0x61, 0x76, 0xf7, 0x57, 0xf5, 0x55, 0xd7, 0x54, 0x55, 0x57, 0xb7, 0xe0,
	0xb2, 0x43, 0x43, 0x46, 0x03, 0x52, 0xd7, 0xff, 0xd7, 0x3a, 0x11, 0xe5, 0x14, 0xcd, 0x84, 0xf8,
	0x00, 0xb7, 0x71, 0x4d, 0xcf, 0x96, 0xab, 0x9e, 0xcf, 0xf7, 0xbb, 0xad, 0x9a, 0x43, 0xdb, 0xf5,
	0x7d, 0x12, 0x51, 0xdf, 0x09, 0x70, 0x8b, 0xd5, 0x15, 0xaa, 0x8e, 0x3b, 0xbe, 0xf8, 0xa7, 0x64,
	0xcb, 0xcb, 0x1e, 0xa5, 0x5e, 0x40, 0xd4, 0x6c, 0x18, 0x52, 0x8e, 0xb9, 0x4f, 0x43, 0xa6, 0x57,
	0x97, 0xf4, 0xaa, 0x1c, 0xb5, 0xba, 0x7b, 0x75, 0xd2, 0xee, 0xf0, 0x23, 0xbd, 0x78, 0x7d, 0x78,
	0x91, 0xfb, 0x6d, 0xc2, 0x38, 0x6e, 0x77, 0x34, 0xe0, 0xda, 0x30, 0xe0, 0x30, 0xc2, 0x9d, 0x0e,
	0x89, 0x62, 0xed, 0xf7, 0xe4, 0x7f, 0xce, 0xaa, 0x47, 0xc2, 0x55, 0x76, 0x88, 0x3d, 0x8f, 0x44,
	0x75, 0xda, 0x91, 0xfc, 0xa3, 0xb6, 0x58, 0x87, 0x90, 0xdf, 0x70, 0x1c, 0xda, 0x0d, 0x39, 0x5a,
	0x85, 0x3c, 0x56, 0x3f, 0x4d, 0xa3, 0x62, 0xdc, 0x29, 0x35, 0xe6, 0x6b, 0xda, 0x05, 0x62, 0x63,
	0x1a, 0x65, 0xc7, 0x18, 0xf4, 0x23, 0x98, 0x72, 0x7d, 0x86, 0x5b, 0x01, 0x69, 0x0a, 0x13, 0xcd,
	0x8c, 0x94, 0x29, 0xd7, 0x94, 0x79, 0xb5, 0xd8, 0xbc, 0xda, 0xcb, 0xd8, 0x7e, 0xbb, 0xa4, 0xf1,
	0x62, 0xc6, 0x3a, 0x80, 0x05, 0xad, 0xf2, 0x31, 0x09, 0x08, 0x27, 0x36, 0xf9, 0xba, 0x4b, 0x18,
	0x47, 0x33, 0x90, 0xf1, 0x5d, 0x69, 0x40, 0xd1, 0xce, 0xf8, 0x2e, 0xda, 0x82, 0xd9, 0x88, 0x38,
	0x34, 0x72, 0x9b, 0xae, 0xc0, 0xf9, 0x34, 0x4c, 0x65, 0xda, 0xa4, 0x34, 0xf8, 0x05, 0x0e, 0xba,
	0xc4, 0x9e, 0x51, 0x22, 0x8f, 0xb5, 0x84, 0xf5, 0xcf, 0x09, 0x98, 0xd6, 0x6c, 0x4f, 0x7e, 0xdd,
	0xa1, 0xd1, 0x5b, 0x6f, 0x76, 0x0d, 0xf2, 0xb4, 0xf5, 0x15, 0x71, 0x38, 0x33, 0x33, 0x95, 0x89,
	0x3b, 0xa5, 0xc6, 0x62, 0x12, 0xbe, 0xcb, 0x69, 0x84, 0x3d, 0xf2, 0xa5, 0x44, 0xd8, 0x31, 0x12,
	0xdd, 0x83, 0xfc, 0x5e, 0xe4, 0x93, 0xd0, 0x65, 0xe6, 0x84, 0x14, 0x42, 0x49, 0xa1, 0xa7, 0x72,
	0xc9, 0x8e, 0x21, 0xe8, 0x2e, 0xe4, 0xbc, 0x88, 0x76, 0x3b, 0xcc, 0x9c, 0x94, 0xe0, 0x0f, 0x92,
	0xe0, 0x6d, 0xb1, 0x62, 0x6b, 0x00, 0xfa, 0x21, 0x14, 0xda, 0x84, 0x31, 0xec, 0x11, 0x66, 0x66,
	0x25, 0xb8, 0x9c, 0x04, 0x6f, 0xed, 0xe3, 0x30, 0x24, 0xc1, 0x73, 0x05, 0xb1, 0xfb, 0x58, 0xf4,
	0x02, 0xe6, 0x03, 0x82, 0x5d, 0x12, 0xb5, 0x28, 0x8e, 0xdc, 0xa6, 0x72, 0x12, 0x33, 0x73, 0x52,
	0xc5, 0xd5, 0xa4, 0x8a, 0x67, 0xa7, 0x30, 0x5b, 0xa2, 0x6c, 0x14, 0x0c, 0x4f, 0x31, 0xf4, 0x63,
	0x98, 0x0e, 0x29, 0xf7, 0xf7, 0x7c, 0x47, 0xc5, 0x94, 0x99, 0x97, 0x9a, 0xcc, 0xa4, 0xa6, 0x17,
	0x09, 0x80, 0x3d, 0x08, 0x47, 0x5b, 0x30, 0x73, 0x88, 0x83, 0x80, 0xf0, 0x66, 0x40, 0x5c, 0x8f,
	0x44, 0xcc, 0x2c, 0x48, 0x05, 0xcb, 0xb5, 0xc1, 0xdc, 0xab, 0xbd, 0x96, 0xa8, 0x67, 0x12, 0x64,
	0x4f, 0x1f, 0x26, 0x46, 0xcc, 0x5a, 0x82, 0xa2, 0xfe, 0x5c, 0x3b, 0xee, 0x70, 0xf4, 0x58, 0xcf,
	0x61, 0x7e, 0xa3, 0xcb, 0xf7, 0x49, 0xc8, 0x05, 0x69, 0x3f, 0xc8, 0xca, 0x50, 0xe8, 0x32, 0x12,
	0x85, 0xb8, 0x4d, 0x34, 0xb8, 0x3f, 0x16, 0x6b, 0x1d, 0xcc, 0xd8, 0x21, 0x8d, 0x5c, 0x19, 0x69,
	0x45, 0xbb, 0x3f, 0xb6, 0xfe, 0x6c, 0x40, 0x6e, 0x8b, 0x86, 0x7b, 0xbe, 0x87, 0xae, 0x40, 0xce,
	0x91, 0xbf, 0xb4, 0x02, 0x3d, 0x42, 0xeb, 0x50, 0x38, 0xc4, 0x51, 0xe8, 0x87, 0x5e, 0x1c, 0x2a,
	0xd7, 0x86, 0x77, 0xa3, 0x34, 0xd4, 0x5e, 0x2b, 0x98, 0xdd, 0xc7, 0x97, 0x3f, 0x85, 0xbc, 0x9e,
	0x44, 0x0b, 0x90, 0xdd, 0xf3, 0x49, 0x10, 0xef, 0x45, 0x0d, 0x90, 0x09, 0x79, 0xfd, 0x31, 0xb5,
	0x69, 0xf1, 0xd0, 0x5a, 0x81, 0x99, 0x2d, 0xa5, 0x7e, 0x97, 0x30, 0xe6, 0xd3, 0x50, 0x68, 0xe0,
	0xf4, 0x80, 0x84, 0xb1, 0x06, 0x39, 0xb0, 0x36, 0x61, 0x5e, 0xe5, 0x9b, 0x0e, 0xbf, 0x94, 0xac,
	0x5b, 0x82, 0xa2, 0x8a, 0xcb, 0xa6, 0xdf, 0xf7, 0x82, 0x9a, 0xd8, 0x71, 0xad, 0x2d, 0xb8, 0xa2,
	0x74, 0xc8, 0xa8, 0x7c, 0xc5, 0x48, 0x94, 0xa6, 0x66, 0x11, 0x0a, 0x32, 0x64, 0x4f, 0xb5, 0xe4,
	0xe5, 0x78, 0xc7, 0xb5, 0x7e, 0x67, 0x40, 0x59, 0x69, 0x19, 0xcc, 0x1e, 0xad, 0xe9, 0x1a, 0x80,
	0x43, 0x83, 0x80, 0x38, 0x32, 0xe3, 0x95, 0xc6, 0xc4, 0x0c, 0x9a, 0x83, 0x89, 0x03, 0x72, 0xa4,
	0x95, 0x8a, 0x9f, 0xe8, 0x43, 0xc8, 0x8b, 0x6f, 0x28, 0xa8, 0x26, 0xd4, 0x17, 0x11, 0xc3, 0x1d,
	0xe9, 0xb4, 0x1e, 0x89, 0x84, 0x4f, 0xcc, 0x49, 0x65, 0x83, 0x1e, 0x5a, 0x3f, 0x83, 0x45, 0x65,
	0xc2, 0x40, 0x7c, 0xa5, 0xbb, 0x44, 0x07, 0xeb, 0xa9, 0x4b, 0xd4, 0xc4, 0x8e, 0x6b, 0xad, 0x02,
	0x7a, 0xe6, 0x33, 0xae, 0xb7, 0x12, 0xab, 0x48, 0x98, 0x64, 0x24, 0x4d, 0xb2, 0x5a, 0x30, 0x27,
	0xe0, 0xc2, 0x75, 0x2c, 0x06, 0x5f, 0x81, 0xdc, 0x9e, 0x1f, 0x70, 0x12, 0xc5, 0x58, 0x35, 0x12,
	0xf3, 0x2d, 0x91, 0xcf, 0x8a, 0xb4, 0x60, 0xeb, 0x91, 0xf0, 0x10, 0xa7, 0xed, 0x16, 0xe3, 0x34,
	0x24, 0x4c, 0x6e, 0xb9, 0x60, 0x27, 0x66, 0x2c, 0x07, 0x4a, 0xda, 0x1c, 0x41, 0x95, 0xac, 0x60,
	0xc6, 0x85, 0x2b, 0xd8, 0x75, 0x28, 0x71, 0xca, 0x71, 0xd0, 0x54, 0x95, 0x52, 0x18, 0x90, 0x15,
	0x24, 0x1c, 0x07, 0x5b, 0x62, 0x46, 0x84, 0xd3, 0xab, 0x30, 0xf0, 0xc3, 0x83, 0xc7, 0xa4, 0xe7,
	0x3b, 0xe4, 0x0c, 0xdf, 0xb9, 0x12, 0x90, 0xf0, 0x9d, 0x9a, 0xd8, 0x71, 0xad, 0xff, 0x65, 0x61,
	0xe1, 0x55, 0xc7, 0xc5, 0x9c, 0xc4, 0x65, 0x37, 0x45, 0xcb, 0xa3, 0x44, 0xd6, 0xaa, 0x33, 0x60,
	0x79, 0xe4, 0x0c, 0xd8, 0xe5, 0x91, 0x1f, 0x7a, 0xea, 0x14, 0x38, 0xcd, 0xe9, 0x9f, 0xc8, 0xb3,
	0xaa, 0x13, 0xe0, 0xa3, 0xa6, 0x94, 0x9e, 0xb8, 0x80, 0x74, 0x49, 0x4b, 0xbc, 0x10, 0x0a, 0x1e,
	0x89, 0x8a, 0xcb, 0xb1, 0x8b, 0x39, 0x96, 0x41, 0x74, 0x2e, 0x75, 0x8c, 0x46, 0x9f, 0x01, 0xe0,
	0x1e, 0xe6, 0x38, 0x6a, 0x76, 0xa3, 0xc0, 0xcc, 0x5e, 0x40, 0xb6, 0xa8, 0xf0, 0xaf, 0xa2, 0x00,
	0x3d, 0x84, 0x42, 0x80, 0x43, 0xaf, 0xc9, 0xb1, 0x67, 0xe6, 0x2e, 0x20, 0x9a, 0x17, 0xe8, 0x97,
	0xd8, 0x13, 0xf6, 0x06, 0x54, 0x95, 0x59, 0x33, 0x7f, 0x11, 0x7b, 0x63, 0xb4, 0x90, 0x14, 0xc7,
	0xf9, 0x6f, 0x68, 0x48, 0xcc, 0xc2, 0x45, 0x24, 0x63, 0x34, 0xfa, 0x14, 0x8a, 0x4e, 0x97, 0x71,
	0xda, 0x16, 0x1f, 0xb9, 0x78, 0x11, 0x51, 0x05, 0xdf, 0x71, 0x51, 0x03, 0xb2, 0xa4, 0x8d, 0xfd,
	0xc0, 0x84, 0x0b, 0x88, 0x29, 0x28, 0xb2, 0x01, 0xfa, 0x31, 0xc5, 0xcc, 0x92, 0x8c, 0xe9, 0xb5,
	0xe1, 0x52, 0x3b, 0x2e, 0xae, 0x6a, 0x8f, 0x75, 0xe4, 0xb1, 0x27, 0x21, 0x8f, 0x8e, 0xec, 0x62,
	0x1c, 0x89, 0x0c, 0xfd, 0x00, 0x72, 0x2a, 0xa5, 0xcd, 0xa9, 0x0b, 0x18, 0xa2, 0xb1, 0xe5, 0xcf,
	0x61, 0x66, 0x50, 0x65, 0x5c, 0x9d, 0x8c, 0xd3, 0xea, 0xb4, 0x00, 0xd9, 0x9e, 0x10, 0xd2, 0xd1,
	0xaf, 0x06, 0xeb, 0x99, 0x47, 0x86, 0xb5, 0x0b, 0x05, 0x51, 0x07, 0x64, 0x92, 0xae, 0x40, 0x56,
	0xc4, 0x6c, 0x9c, 0xa2, 0x73, 0xc9, 0x14, 0x95, 0x75, 0x56, 0x2d, 0x9f, 0x9f, 0x97, 0xdf, 0x4d,
	0x00, 0xec, 0x72, 0xcc, 0xbb, 0x4c, 0xea, 0x7d, 0x08, 0xd9, 0x90, 0xba, 0x24, 0xd6, 0x7b, 0x63,
	0xd8, 0x4d, 0xa7, 0x50, 0xfd, 0xd3, 0x56, 0xf8, 0xf2, 0xbf, 0x32, 0x90, 0x53, 0x33, 0x08, 0xc1,
	0x64, 0xe2, 0xbc, 0x94, 0xbf, 0x45, 0x6d, 0xda, 0x27, 0x38, 0xe0, 0xfb, 0xda, 0x04, 0x3d, 0x42,
	0x37, 0x61, 0x9a, 0xa9, 0x63, 0x48, 0x5b, 0x38, 0x21, 0x97, 0xa7, 0xf4, 0xa4, 0xb4, 0x11, 0x7d,
	0x04, 0x33, 0x9d, 0x88, 0x30, 0x12, 0x3a, 0x44, 0xa3, 0x26, 0x25, 0x6a, 0x3a, 0x9e, 0x55, 0xb0,
	0xeb, 0x50, 0x6a, 0x63, 0xee, 0xec, 0x6b, 0x4c, 0x56, 0xed, 0x55, 0x4e, 0x29, 0xc0, 0x6d, 0x98,
	0xf5, 0x68, 0x44, 0xbb, 0xdc, 0x0f, 0x63, 0x45, 0x39, 0x09, 0x9a, 0xe9, 0x4f, 0x2b, 0xe0, 0x2d,
	0x98, 0xc1, 0x3d, 0xaf, 0x19, 0x60, 0x4e, 0x42, 0xe7, 0xa8, 0xd9, 0x66, 0x32, 0x35, 0x0c, 0x7b,
	0x0a, 0xf7, 0xbc, 0x67, 0x6a, 0xf2, 0x39, 0x43, 0x15, 0x10, 0xe3, 0x66, 0x84, 0x39, 0x69, 0x32,
	0xe2, 0xc8, 0x24, 0x30, 0x6c, 0xc0, 0x3d, 0xcf, 0xc6, 0x9c, 0xec, 0x12, 0x07, 0x59, 0x30, 0x2d,
	0x10, 0x7e, 0xd8, 0xe9, 0xf2, 0xe6, 0x41, 0x8b, 0xc9, 0x60, 0x37, 0xec, 0x12, 0xee, 0x79, 0x3b,
	0x62, 0xee, 0x8b, 0x16, 0x8b, 0xb9, 0x68, 0x97, 0xc7, 0x20, 0xe8, 0x73, 0x7d, 0x29, 0x27, 0xbf,
	0x68, 0x31, 0xeb, 0xbf, 0x06, 0x4c, 0x25, 0xcf, 0x9e, 0x91, 0x92, 0x97, 0x38, 0x41, 0x32, 0x03,
	0x87, 0xda, 0x32, 0x14, 0x9d, 0x7d, 0x1c, 0x7a, 0x84, 0x11, 0xae, 0xcf, 0xbb, 0xd3, 0x09, 0xd1,
	0xc3, 0x0c, 0x94, 0xab, 0xe2, 0x40, 0x41, 0x2a, 0x39, 0x11, 0x11, 0xbb, 0x93, 0x6d, 0x7b, 0xf6,
	0xdc, 0xb6, 0x1d, 0x14, 0x5c, 0x4c, 0x08, 0xe1, 0xae, 0x4c, 0x29, 0x25, 0x9c, 0x3b, 0x5f, 0x58,
	0xc1, 0x65, 0xcb, 0xff, 0x14, 0xe6, 0x92, 0x9b, 0x95, 0x91, 0xd9, 0x80, 0xac, 0xcf, 0x49, 0x3b,
	0x8e, 0xcc, 0xb3, 0x3b, 0x3f, 0x05, 0xb5, 0xbe, 0xcb, 0xc0, 0xe2, 0xeb, 0xc8, 0x7f, 0xff, 0x9d,
	0x43, 0x3f, 0x69, 0x27, 0x13, 0x49, 0x9b, 0xec, 0x27, 0xb2, 0x03, 0xfd, 0x04, 0x7a, 0x0c, 0xb3,
	0x1d, 0x12, 0xb5, 0x7d, 0x15, 0xf9, 0x11, 0xc1, 0xae, 0xf6, 0xd0, 0xd2, 0x88, 0x87, 0x76, 0x42,
	0xbe, 0xd6, 0xd0, 0x97, 0x95, 0x53, 0x19, 0x9b, 0x60, 0x17, 0x3d, 0x85, 0xb9, 0x84, 0x96, 0x43,
	0xb1, 0x51, 0x5d, 0xc3, 0xcf, 0x54, 0x93, 0xa0, 0x96, 0xce, 0x69, 0xfc, 0xa7, 0x0c, 0x79, 0xdd,
	0x13, 0xa2, 0xdf, 0x1b, 0x30, 0x95, 0x6c, 0x84, 0xd1, 0xcd, 0x61, 0x47, 0x8f, 0x69, 0x93, 0xcb,
	0xe3, 0x3a, 0xd7, 0x44, 0x8b, 0x69, 0xd5, 0xbe, 0xdd, 0x28, 0xb4, 0x72, 0x30, 0x09, 0x97, 0xd0,
	0xa5, 0x6f, 0xfe, 0xf1, 0xef, 0x3f, 0x65, 0xae, 0x5a, 0x66, 0xbd, 0xd7, 0x88, 0x2f, 0xd2, 0x75,
	0x9c, 0xd0, 0xb9, 0x6e, 0x54, 0x51, 0x0b, 0xf2, 0x9b, 0x38, 0x14, 0x85, 0x0c, 0x2d, 0x8e, 0xf0,
	0xc7, 0x3d, 0x7c, 0xf9, 0xca, 0xc8, 0x2e, 0x9f, 0x88, 0xfb, 0xb1, 0x75, 0x4b, 0x52, 0x5c, 0xb3,
	0x96, 0x07, 0x28, 0x94, 0x58, 0xfd, 0xd8, 0x77, 0x4f, 0xea, 0x2d, 0x1c, 0x22, 0x0a, 0xd3, 0xaa,
	0xa7, 0x8b, 0xaf, 0xb5, 0xb7, 0x52, 0x98, 0x06, 0xae, 0x9d, 0xa9, 0xa4, 0x15, 0x49, 0x5a, 0xae,
	0x9a, 0x69, 0xa4, 0xe8, 0xb7, 0x06, 0x4c, 0x25, 0x5b, 0xea, 0x51, 0xd7, 0x8e, 0x69, 0xb8, 0x53,
	0xf9, 0xd6, 0x24, 0xdf, 0x6a, 0xf5, 0xe3, 0xd4, 0x4d, 0xaa, 0x36, 0xbc, 0x7e, 0xdc, 0xef, 0xcf,
	0x4f, 0xd0, 0x1f, 0x0c, 0x98, 0x1d, 0xea, 0xc8, 0xd1, 0xca, 0x78, 0x2b, 0x86, 0x5b, 0xf6, 0x54,
	0x43, 0x1e, 0x48, 0x43, 0x3e, 0xae, 0xde, 0x4d, 0x35, 0x44, 0x76, 0xf2, 0xf5, 0xe3, 0xb8, 0xc1,
	0x3f, 0x41, 0xbf, 0x8a, 0x5d, 0xaf, 0xf3, 0x12, 0xa5, 0xe8, 0x4e, 0xe5, 0x5c, 0x92, 0x9c, 0x97,
	0xab, 0xf3, 0x49, 0x4e, 0xa6, 0x95, 0xfd, 0xdd, 0x88, 0xaf, 0x2e, 0x03, 0x69, 0x8f, 0xaa, 0xe3,
	0x37, 0x3a, 0xae, 0x36, 0xa4, 0x12, 0xf7, 0x24, 0x71, 0xa7, 0x7a, 0x7f, 0x0c, 0x71, 0xfd, 0xf8,
	0xb4, 0x78, 0x9c, 0xd4, 0x8f, 0x0f, 0xc8, 0xd1, 0x49, 0xfd, 0x58, 0xd7, 0x8b, 0x93, 0x37, 0x9f,
	0x57, 0xd7, 0xdf, 0x56, 0xa6, 0x7e, 0xac, 0xeb, 0xc5, 0x09, 0x7a, 0x0d, 0x25, 0x65, 0xad, 0xbc,
	0x09, 0xbc, 0xb5, 0xbf, 0x4c, 0x69, 0x36, 0xaa, 0xce, 0x25, 0x4d, 0x10, 0x34, 0xe8, 0x8f, 0x06,
	0xa0, 0xd1, 0xab, 0x0d, 0xba, 0x3b, 0xde, 0x57, 0x63, 0xae, 0x3f, 0xdf, 0x23, 0x40, 0x55, 0x57,
	0x54, 0x3f, 0xee, 0xdf, 0x96, 0x4e, 0x50, 0x04, 0xd3, 0xea, 0xdd, 0x25, 0x4e, 0xca, 0x33, 0xd2,
	0xff, 0x6a, 0xca, 0x92, 0x52, 0x60, 0xdd, 0x96, 0xfc, 0x37, 0xd0, 0xf5, 0x54, 0x7e, 0xa2, 0x5e,
	0x78, 0x5a, 0x00, 0xdb, 0xe4, 0x22, 0x84, 0x1f, 0xa6, 0x2c, 0xc5, 0xb9, 0x8f, 0xd2, 0x73, 0xff,
	0x35, 0x14, 0xb7, 0x09, 0x8f, 0x5f, 0x04, 0x52, 0xbf, 0xde, 0xd8, 0xfb, 0xbf, 0x55, 0x96, 0xea,
	0x17, 0x10, 0x4a, 0xaa, 0xd7, 0xaf, 0x08, 0x44, 0x1a, 0xff, 0x54, 0x3f, 0x0d, 0x9d, 0x61, 0xfc,
	0xfc, 0xe8, 0x93, 0x12, 0xbb, 0x80, 0x8f, 0x54, 0xf1, 0x40, 0xbe, 0xb4, 0x7f, 0x5b, 0xbd, 0x2a,
	0x9d, 0xc1, 0xb2, 0x38, 0xdc, 0x88, 0x4a, 0x11, 0x71, 0x80, 0x5b, 0x2b, 0x92, 0xab, 0x82, 0xae,
	0x9d, 0x5d, 0x27, 0xd0, 0x2f, 0x25, 0x95, 0xee, 0x25, 0xd3, 0x5c, 0x55, 0x4e, 0x6f, 0x4c, 0xc7,
	0xbb, 0x8b, 0x29, 0x7d, 0xdf, 0x18, 0xd2, 0x5f, 0x71, 0xdd, 0xb9, 0x9e, 0x34, 0x57, 0x9c, 0xa9,
	0x03, 0xc5, 0x60, 0x78, 0x3f, 0x03, 0x8b, 0xd6, 0x23, 0x49, 0xd3, 0x40, 0x6f, 0x5d, 0x0a, 0xd0,
	0x21, 0xcc, 0x6e, 0x13, 0x3e, 0x90, 0x6f, 0x67, 0xb8, 0xb4, 0x72, 0x56, 0xa7, 0x23, 0x37, 0x7c,
	0xfe, 0x57, 0x54, 0x19, 0x86, 0x0e, 0xa0, 0x94, 0x78, 0x7c, 0x40, 0xd6, 0xb0, 0xe6, 0xd1, 0x97,
	0x89, 0xf2, 0xd2, 0xa8, 0xa3, 0xfb, 0x4f, 0x05, 0x71, 0x19, 0x46, 0x63, 0xcb, 0x30, 0x86, 0x62,
	0xff, 0xe9, 0x02, 0x55, 0xc6, 0x51, 0x25, 0x5f, 0x35, 0xca, 0xe6, 0xc8, 0x8d, 0x4c, 0xdf, 0x75,
	0xe2, 0xe2, 0x85, 0x46, 0x8b, 0xd7, 0x1e, 0x14, 0x5f, 0x85, 0xad, 0x77, 0x6f, 0x14, 0x74, 0x48,
	0x5a, 0xe9, 0x21, 0xd9, 0x15, 0xea, 0xd1, 0xd7, 0x30, 0xa5, 0x1e, 0x2f, 0xb6, 0xe4, 0x3d, 0xf4,
	0x5d, 0xa8, 0x6a, 0x92, 0xea, 0x8e, 0xb5, 0x72, 0x06, 0x95, 0x60, 0xa8, 0xab, 0xab, 0x2e, 0x3a,
	0x8e, 0x29, 0xd5, 0x85, 0x71, 0xb4, 0x57, 0x18, 0xf3, 0x9a, 0xf2, 0xfd, 0xc9, 0xd5, 0x05, 0x17,
	0x51, 0x28, 0x29, 0xf5, 0x4f, 0xe4, 0x05, 0xfa, 0x1d, 0xb6, 0xbb, 0x2a, 0x19, 0x6f, 0x5b, 0x1f,
	0x9d, 0xc7, 0xa8, 0xae, 0xe8, 0x5d, 0x98, 0x51, 0x84, 0x4f, 0xb1, 0x43, 0x5a, 0x94, 0x1e, 0xbc,
	0x0b, 0xe7, 0x7d, 0xc9, 0x59, 0xb5, 0xee, 0x9c, 0xc7, 0xb9, 0x17, 0x93, 0x1c, 0xc1, 0x9c, 0xa2,
	0xdd, 0xc6, 0x6d, 0xb2, 0x45, 0x42, 0xfe, 0x6e, 0x61, 0xd4, 0x90, 0xc4, 0xf7, 0xac, 0xea, 0x79,
	0xc4, 0x1e, 0x6e, 0x13, 0x47, 0xd1, 0xf4, 0x43, 0x6a, 0x5b, 0xaa, 0x7c, 0xaf, 0x21, 0xa5, 0xc4,
	0x4f, 0xbf, 0xea, 0x2e, 0x27, 0xb8, 0xfd, 0x5e, 0xbf, 0x2a, 0x93, 0x0c, 0x11, 0x4c, 0x0f, 0x3c,
	0xab, 0x8c, 0x76, 0xd8, 0xe3, 0x5e, 0x5d, 0x52, 0xd9, 0x6f, 0x8e, 0xbd, 0x39, 0x24, 0xd8, 0xc5,
	0xcd, 0xe1, 0x2f, 0x06, 0xa0, 0xd1, 0x2b, 0xdf, 0x68, 0x3f, 0x93, 0x7a, 0x2d, 0x2c, 0x2f, 0xa7,
	0x96, 0xfc, 0x0d, 0xe7, 0xc0, 0xfa, 0x4c, 0x1a, 0xf1, 0x49, 0xf9, 0xad, 0xab, 0xfe, 0xba, 0x51,
	0xdd, 0xfc, 0x5b, 0xe6, 0xdb, 0x8d, 0xbf, 0x66, 0xd0, 0x09, 0x5c, 0x7e, 0x21, 0x29, 0x2a, 0x5a,
	0x41, 0x65, 0xe3, 0xe7, 0x3b, 0x95, 0x5e, 0xc3, 0x6a, 0xc2, 0x8d, 0x97, 0xfb, 0xa4, 0xa2, 0x17,
	0xc5, 0x45, 0x8b, 0x46, 0xac, 0xb2, 0x52, 0xd9, 0xa2, 0x21, 0x8f, 0xfc, 0x56, 0x97, 0xd3, 0x88,
	0xa1, 0x5b, 0xfb, 0x9c, 0x77, 0xd8, 0x7a, 0xbd, 0x7e, 0xd6, 0x9f, 0x19, 0xcb, 0x0b, 0xfb, 0x24,
	0x08, 0xe8, 0x4f, 0x4f, 0x17, 0x04, 0xae, 0x31, 0xd1, 0xa8, 0xdd, 0x2f, 0xcf, 0x3c, 0x68, 0x3c,
	0xac, 0xdd, 0xaf, 0xdd, 0xaf, 0x3d, 0x58, 0x7f, 0xb8, 0xf6, 0xc9, 0x83, 0xaa, 0x61, 0x34, 0xe6,
	0x70, 0xa7, 0x13, 0xe8, 0xbf, 0xb6, 0xd4, 0xbf, 0x62, 0x34, 0x5c, 0x1f, 0x99, 0x79, 0xf3, 0x01,
	0xcc, 0x42, 0x71, 0x13, 0x33, 0xdf, 0x11, 0x86, 0xa1, 0x4c, 0xc1, 0x68, 0xcd, 0xc2, 0x74, 0x72,
	0xea, 0x52, 0xb4, 0x09, 0x37, 0xb5, 0xf1, 0x8c, 0x44, 0x3d, 0x12, 0xf5, 0x37, 0xe8, 0x52, 0xa7,
	0xdb, 0x26, 0xa1, 0xfa, 0x93, 0x22, 0x5a, 0x8a, 0xb7, 0x30, 0x68, 0x5e, 0xdd, 0xa5, 0x0e, 0x7b,
	0x93, 0xd7, 0x32, 0xad, 0x9c, 0xfc, 0xfe, 0x6b, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x97, 0x89,
	0x06, 0x8c, 0x77, 0x1d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsoleClient is the client API for Console service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsoleClient interface {
	// Authenticate a console user with username and password.
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*ConsoleSession, error)
	// Ban a user.
	BanUser(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete all information stored for a user account.
	DeleteAccount(ctx context.Context, in *AccountDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete the friend relationship between two users.
	DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Remove a user from a group.
	DeleteGroupUser(ctx context.Context, in *DeleteGroupUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete all storage data.
	DeleteStorage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete a storage object.
	DeleteStorageObject(ctx context.Context, in *DeleteStorageObjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete (non-recorded) all user accounts.
	DeleteUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete a wallet ledger item.
	DeleteWalletLedger(ctx context.Context, in *DeleteWalletLedgerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Export all information stored about a user account.
	ExportAccount(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*AccountExport, error)
	// Get detailed account information for a single user.
	GetAccount(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*Account, error)
	// Get server config and configuration warnings.
	GetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config, error)
	// Get a user's list of friend relationships.
	GetFriends(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*api.Friends, error)
	// Get a list of groups the user is a member of.
	GetGroups(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*api.UserGroupList, error)
	// Get current status data for all nodes.
	GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusList, error)
	// Get a storage object.
	GetStorage(ctx context.Context, in *api.ReadStorageObjectId, opts ...grpc.CallOption) (*api.StorageObject, error)
	// Get a list of the user's wallet transactions.
	GetWalletLedger(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*WalletLedgerList, error)
	// List (and optionally filter) storage data.
	ListStorage(ctx context.Context, in *ListStorageRequest, opts ...grpc.CallOption) (*StorageList, error)
	// List (and optionally filter) users.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*UserList, error)
	// Unban a user.
	UnbanUser(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the custom ID from a user account.
	UnlinkCustom(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the device ID from a user account.
	UnlinkDevice(ctx context.Context, in *UnlinkDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the email from a user account.
	UnlinkEmail(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the Facebook ID from a user account.
	UnlinkFacebook(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the Game Center ID from a user account.
	UnlinkGameCenter(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the Google ID from a user account.
	UnlinkGoogle(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unlink the Steam ID from a user account.
	UnlinkSteam(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error)
	// Update one or more fields on a user account.
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Write a new storage object or replace an existing one.
	WriteStorageObject(ctx context.Context, in *WriteStorageObjectRequest, opts ...grpc.CallOption) (*api.StorageObjectAck, error)
}

type consoleClient struct {
	cc *grpc.ClientConn
}

func NewConsoleClient(cc *grpc.ClientConn) ConsoleClient {
	return &consoleClient{cc}
}

func (c *consoleClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*ConsoleSession, error) {
	out := new(ConsoleSession)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) BanUser(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/BanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteAccount(ctx context.Context, in *AccountDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteFriend(ctx context.Context, in *DeleteFriendRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteGroupUser(ctx context.Context, in *DeleteGroupUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteGroupUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteStorage(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteStorageObject(ctx context.Context, in *DeleteStorageObjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteStorageObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) DeleteWalletLedger(ctx context.Context, in *DeleteWalletLedgerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/DeleteWalletLedger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) ExportAccount(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*AccountExport, error) {
	out := new(AccountExport)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/ExportAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetAccount(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetFriends(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*api.Friends, error) {
	out := new(api.Friends)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetFriends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetGroups(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*api.UserGroupList, error) {
	out := new(api.UserGroupList)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusList, error) {
	out := new(StatusList)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetStorage(ctx context.Context, in *api.ReadStorageObjectId, opts ...grpc.CallOption) (*api.StorageObject, error) {
	out := new(api.StorageObject)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) GetWalletLedger(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*WalletLedgerList, error) {
	out := new(WalletLedgerList)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/GetWalletLedger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) ListStorage(ctx context.Context, in *ListStorageRequest, opts ...grpc.CallOption) (*StorageList, error) {
	out := new(StorageList)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/ListStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnbanUser(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnbanUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkCustom(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkCustom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkDevice(ctx context.Context, in *UnlinkDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkEmail(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkFacebook(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkFacebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkGameCenter(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkGameCenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkGoogle(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkGoogle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UnlinkSteam(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UnlinkSteam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consoleClient) WriteStorageObject(ctx context.Context, in *WriteStorageObjectRequest, opts ...grpc.CallOption) (*api.StorageObjectAck, error) {
	out := new(api.StorageObjectAck)
	err := c.cc.Invoke(ctx, "/nakama.console.Console/WriteStorageObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsoleServer is the server API for Console service.
type ConsoleServer interface {
	// Authenticate a console user with username and password.
	Authenticate(context.Context, *AuthenticateRequest) (*ConsoleSession, error)
	// Ban a user.
	BanUser(context.Context, *AccountId) (*empty.Empty, error)
	// Delete all information stored for a user account.
	DeleteAccount(context.Context, *AccountDeleteRequest) (*empty.Empty, error)
	// Delete the friend relationship between two users.
	DeleteFriend(context.Context, *DeleteFriendRequest) (*empty.Empty, error)
	// Remove a user from a group.
	DeleteGroupUser(context.Context, *DeleteGroupUserRequest) (*empty.Empty, error)
	// Delete all storage data.
	DeleteStorage(context.Context, *empty.Empty) (*empty.Empty, error)
	// Delete a storage object.
	DeleteStorageObject(context.Context, *DeleteStorageObjectRequest) (*empty.Empty, error)
	// Delete (non-recorded) all user accounts.
	DeleteUsers(context.Context, *empty.Empty) (*empty.Empty, error)
	// Delete a wallet ledger item.
	DeleteWalletLedger(context.Context, *DeleteWalletLedgerRequest) (*empty.Empty, error)
	// Export all information stored about a user account.
	ExportAccount(context.Context, *AccountId) (*AccountExport, error)
	// Get detailed account information for a single user.
	GetAccount(context.Context, *AccountId) (*Account, error)
	// Get server config and configuration warnings.
	GetConfig(context.Context, *empty.Empty) (*Config, error)
	// Get a user's list of friend relationships.
	GetFriends(context.Context, *AccountId) (*api.Friends, error)
	// Get a list of groups the user is a member of.
	GetGroups(context.Context, *AccountId) (*api.UserGroupList, error)
	// Get current status data for all nodes.
	GetStatus(context.Context, *empty.Empty) (*StatusList, error)
	// Get a storage object.
	GetStorage(context.Context, *api.ReadStorageObjectId) (*api.StorageObject, error)
	// Get a list of the user's wallet transactions.
	GetWalletLedger(context.Context, *AccountId) (*WalletLedgerList, error)
	// List (and optionally filter) storage data.
	ListStorage(context.Context, *ListStorageRequest) (*StorageList, error)
	// List (and optionally filter) users.
	ListUsers(context.Context, *ListUsersRequest) (*UserList, error)
	// Unban a user.
	UnbanUser(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the custom ID from a user account.
	UnlinkCustom(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the device ID from a user account.
	UnlinkDevice(context.Context, *UnlinkDeviceRequest) (*empty.Empty, error)
	// Unlink the email from a user account.
	UnlinkEmail(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the Facebook ID from a user account.
	UnlinkFacebook(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the Game Center ID from a user account.
	UnlinkGameCenter(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the Google ID from a user account.
	UnlinkGoogle(context.Context, *AccountId) (*empty.Empty, error)
	// Unlink the Steam ID from a user account.
	UnlinkSteam(context.Context, *AccountId) (*empty.Empty, error)
	// Update one or more fields on a user account.
	UpdateAccount(context.Context, *UpdateAccountRequest) (*empty.Empty, error)
	// Write a new storage object or replace an existing one.
	WriteStorageObject(context.Context, *WriteStorageObjectRequest) (*api.StorageObjectAck, error)
}

func RegisterConsoleServer(s *grpc.Server, srv ConsoleServer) {
	s.RegisterService(&_Console_serviceDesc, srv)
}

func _Console_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/BanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).BanUser(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteAccount(ctx, req.(*AccountDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteFriend(ctx, req.(*DeleteFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteGroupUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteGroupUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteGroupUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteGroupUser(ctx, req.(*DeleteGroupUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteStorage(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteStorageObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStorageObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteStorageObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteStorageObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteStorageObject(ctx, req.(*DeleteStorageObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteUsers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_DeleteWalletLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWalletLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).DeleteWalletLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/DeleteWalletLedger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).DeleteWalletLedger(ctx, req.(*DeleteWalletLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_ExportAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).ExportAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/ExportAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).ExportAccount(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetAccount(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetFriends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetFriends(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetGroups(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(api.ReadStorageObjectId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetStorage(ctx, req.(*api.ReadStorageObjectId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_GetWalletLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).GetWalletLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/GetWalletLedger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).GetWalletLedger(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_ListStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).ListStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/ListStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).ListStorage(ctx, req.(*ListStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnbanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnbanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnbanUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnbanUser(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkCustom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkCustom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkCustom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkCustom(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkDevice(ctx, req.(*UnlinkDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkEmail(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkFacebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkFacebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkFacebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkFacebook(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkGameCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkGameCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkGameCenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkGameCenter(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkGoogle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkGoogle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkGoogle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkGoogle(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UnlinkSteam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UnlinkSteam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UnlinkSteam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UnlinkSteam(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Console_WriteStorageObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteStorageObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsoleServer).WriteStorageObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nakama.console.Console/WriteStorageObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsoleServer).WriteStorageObject(ctx, req.(*WriteStorageObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Console_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nakama.console.Console",
	HandlerType: (*ConsoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _Console_Authenticate_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _Console_BanUser_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _Console_DeleteAccount_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _Console_DeleteFriend_Handler,
		},
		{
			MethodName: "DeleteGroupUser",
			Handler:    _Console_DeleteGroupUser_Handler,
		},
		{
			MethodName: "DeleteStorage",
			Handler:    _Console_DeleteStorage_Handler,
		},
		{
			MethodName: "DeleteStorageObject",
			Handler:    _Console_DeleteStorageObject_Handler,
		},
		{
			MethodName: "DeleteUsers",
			Handler:    _Console_DeleteUsers_Handler,
		},
		{
			MethodName: "DeleteWalletLedger",
			Handler:    _Console_DeleteWalletLedger_Handler,
		},
		{
			MethodName: "ExportAccount",
			Handler:    _Console_ExportAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Console_GetAccount_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Console_GetConfig_Handler,
		},
		{
			MethodName: "GetFriends",
			Handler:    _Console_GetFriends_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _Console_GetGroups_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Console_GetStatus_Handler,
		},
		{
			MethodName: "GetStorage",
			Handler:    _Console_GetStorage_Handler,
		},
		{
			MethodName: "GetWalletLedger",
			Handler:    _Console_GetWalletLedger_Handler,
		},
		{
			MethodName: "ListStorage",
			Handler:    _Console_ListStorage_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _Console_ListUsers_Handler,
		},
		{
			MethodName: "UnbanUser",
			Handler:    _Console_UnbanUser_Handler,
		},
		{
			MethodName: "UnlinkCustom",
			Handler:    _Console_UnlinkCustom_Handler,
		},
		{
			MethodName: "UnlinkDevice",
			Handler:    _Console_UnlinkDevice_Handler,
		},
		{
			MethodName: "UnlinkEmail",
			Handler:    _Console_UnlinkEmail_Handler,
		},
		{
			MethodName: "UnlinkFacebook",
			Handler:    _Console_UnlinkFacebook_Handler,
		},
		{
			MethodName: "UnlinkGameCenter",
			Handler:    _Console_UnlinkGameCenter_Handler,
		},
		{
			MethodName: "UnlinkGoogle",
			Handler:    _Console_UnlinkGoogle_Handler,
		},
		{
			MethodName: "UnlinkSteam",
			Handler:    _Console_UnlinkSteam_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Console_UpdateAccount_Handler,
		},
		{
			MethodName: "WriteStorageObject",
			Handler:    _Console_WriteStorageObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "console/console.proto",
}
